// Function returning the stream of zipped with the given function of two streams.
def zipWith {
  #(f, xs, ys).head -> f(xs.head, ys.head),
  #(f, xs, ys).tail -> zipWith(f, xs.tail, ys.tail),
}

// Operators can be defined as functions.
def + { #(x, y,) -> prim(add, x, y) /* add is a primitive function that adds two numbers */ }

def fib {
  #.head -> 1,
  #.tail.head -> 1,
  #.tail.tail -> zipWith({#(x, y) -> x + y}, fib, fib.tail),
}

// Function returning the stream of shifted stream.
// Pattern matching can be used to detect the trace of evaluation.
def shift {
  #(s.head) -> s.tail.head,
  #(s.tail) -> s.tail.tail,
}

def main { #() -> prim(print, shift(shift(shift(fib.head)))) }