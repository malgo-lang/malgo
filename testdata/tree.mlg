type Int     = prim(int)
type List(a) = {
  Nil(),
  Cons(a, List)
}
infixl 6 -
def - = { (x, y) -> prim(sub, x, y) }
def map = {
  (f, Nil()) -> Nil(),
  (f, Cons(x, xs)) -> Cons(f(x), map(f, xs)),
}
def prune = {
  #(x,t).node -> t.node,
  #(0,t).children -> Nil,
  #(x,t).children -> map(prune(x-1), t.children),
}
def tree = {
  #.node -> 1,
  #.children -> Cons(tree1, Cons(tree2, Nil())),
}
def tree1 = {
  #.node -> 2,
  #.children -> Nil(),
}
def tree2 = {
  #.node -> 3,
  #.children -> Cons(tree, Nil()),
}
def main = { prune(2, tree) }