; EBNF for malgo syntax.

program = decs

decs = {dec}

dec = scdec
    | scann
    | typedec

scdec = ident [params] "=" expr
scann = ident ":" type_scheme

typedec = "alias" ident {tyvar} "=" type ; type synonym
        | "type" ident {tyvar} "=" type ; new type with constructor

type_scheme = ["forall" {tyvar} "."] type

expr = ident ; variable
     | int   ; int literal
     | float ; float literal
     | "true" | "false" ; boolean literal
     | char  ; char literal
     | "{" { field_expr } "}" ; record literal
     | "<" field_expr ">" ":" type ; variant literal
     | "let" bind "in" expr
     | expr expr ; application
     | "case" expr "{" { "|" clause } "}" ; pattern match
     | "fun" {ident | "(" ident ":" type ")"} "->" expr

bind = ident [":" type] "=" expr
     | "rec" recbind { "and" recbind }

recbind = ident {ident} [":" type] "=" expr

clause = "<" ident "=" ident ">" ":" type "=>" expr
       | "true" "=>" expr
       | "false" "=>" expr

type = tycon {type} ; type application
     | type "->" type
     | ident        ; type variable

tycon = type_name
      | "{" { field_type } "}"
      | "<" { field_type } ">"

field_expr = ident "=" expr [","]

field_type = ident ":" type [","]