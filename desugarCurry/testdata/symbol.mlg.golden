(def map (codata (clause (call (call # (var f)) (symbol :Nil)) (seq (symbol :Nil))) (clause (call (call # (var f)) (call (call (symbol :Cons) (var x)) (var xs))) (seq (call (call (symbol :Cons) (call (var f) (var x))) (call (call (var map) (var f)) (var xs)))))))
(def main (codata (clause (call #) (seq (let (var xs) (call (call (symbol :Cons) (literal 1)) (call (call (symbol :Cons) (literal 2)) (call (call (symbol :Cons) (literal 3)) (symbol :Nil))))) (let (var xs1) (call (call (var map) (codata (clause (call # (var x)) (seq (prim add (var x) (literal 1)))))) (var xs))) (prim print (var xs1)) (prim print_trace (var xs1))))))
