(def map (lambda (:p1 :p2) (case ((var :p1) (var :p2)) (clause ((var f) (symbol :Nil)) (seq (symbol :Nil))) (clause ((var f) (call (symbol :Cons) (var x) (var xs))) (seq (call (symbol :Cons) (call (var f) (var x)) (call (var map) (var f) (var xs))))))))
(def main (lambda () (seq (let (var xs) (call (symbol :Cons) (literal 1) (call (symbol :Cons) (literal 2) (call (symbol :Cons) (literal 3) (symbol :Nil))))) (let (var xs1) (call (var map) (lambda (:p1) (case ((var :p1)) (clause (var x) (seq (prim add (var x) (literal 1)))))) (var xs))) (prim print (var xs1)) (prim print_trace (var xs1)))))
