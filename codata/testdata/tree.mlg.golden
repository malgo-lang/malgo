(infix infixl 6 -)
(def - (lambda (:p1 :p2) (case ((var :p1) (var :p2)) (clause ((var x) (var y)) (seq (prim sub (var x) (var y)))))))
(def map (lambda (:p1 :p2) (case ((var :p1) (var :p2)) (clause ((var f) (symbol Nil)) (seq (symbol Nil))) (clause ((var f) (call (symbol Cons) (var x) (var xs))) (seq (call (symbol Cons) (call (var f) (var x)) (call (var map) (var f) (var xs))))))))
(def prune (lambda (:p1 :p2) (object (field children (case ((var :p1) (var :p2)) (clause ((literal 0) (var t)) (seq (symbol Nil))) (clause ((var x) (var t)) (seq (call (var map) (call (var prune) (binary (var x) - (literal 1))) (access (var t) children)))))) (field node (case ((var :p1) (var :p2)) (clause ((var x) (var t)) (seq (access (var t) node))))))))
(def tree (object (field children (seq (call (symbol Cons) (var tree1) (call (symbol Cons) (var tree2) (symbol Nil))))) (field node (seq (literal 1)))))
(def tree1 (object (field children (seq (symbol Nil))) (field node (seq (literal 2)))))
(def tree2 (object (field children (seq (call (symbol Cons) (var tree) (symbol Nil)))) (field node (seq (literal 3)))))
(def main (lambda () (seq (access (call (var prune) (literal 2) (var tree)) children))))
