(def map.0 (lambda (:p1.2 :p2.3) (case ((var :p1.2) (var :p2.3)) (clause ((var f.4) (symbol :Nil)) (seq (symbol :Nil))) (clause ((var f.5) (call (symbol :Cons) (var x.6) (var xs.7))) (seq (call (symbol :Cons) (call (var f.5) (var x.6)) (call (var map.0) (var f.5) (var xs.7))))))))
(def main.1 (lambda () (seq (let (var xs.8) (call (symbol :Cons) (literal 1) (call (symbol :Cons) (literal 2) (call (symbol :Cons) (literal 3) (symbol :Nil))))) (let (var xs1.9) (call (var map.0) (lambda (:p1.10) (case ((var :p1.10)) (clause (var x.11) (seq (prim add (var x.11) (literal 1)))))) (var xs.8))) (prim print (var xs1.9)) (prim print_trace (var xs1.9)))))
