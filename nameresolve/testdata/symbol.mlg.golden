(def map.0 (lambda (:p1.2) (lambda (:p2.3) (case ((var :p1.2) (var :p2.3)) (clause ((var f.4) (symbol Nil)) (seq (symbol Nil))) (clause ((var f.5) (call (call (symbol Cons) (var x.6)) (var xs.7))) (seq (call (call (symbol Cons) (call (var f.5) (var x.6))) (call (call (var map.0) (var f.5)) (var xs.7)))))))))
(def main.1 (lambda (:p1.8) (case ((var :p1.8)) (clause (tuple) (seq (let (var xs.9) (call (call (symbol Cons) (literal 1)) (call (call (symbol Cons) (literal 2)) (call (call (symbol Cons) (literal 3)) (symbol Nil))))) (let (var xs1.10) (call (call (var map.0) (lambda (:p1.11) (case ((var :p1.11)) (clause (var x.12) (seq (prim add (var x.12) (literal 1))))))) (var xs.9))) (prim print (var xs1.10)) (prim print_trace (var xs1.10)))))))
