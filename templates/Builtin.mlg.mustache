module Builtin = {
  -- Primitive Types
  data Int32 = Int32# Int32#;
  data Int64 = Int64# Int64#;
  data Float = Float# Float#;
  data Double = Double# Double#;
  data Char = Char# Char#;
  data String = String# String#;
  data Bool = False | True;

  -- Boxing functions
  int32# :: Int32# -> Int32;
  int32# = { x -> Int32# x };

  int64# :: Int64# -> Int64;
  int64# = { x -> Int64# x };

  float# :: Float# -> Float;
  float# = { x -> Float# x };

  double# :: Double# -> Double;
  double# = { x -> Double# x };

  char# :: Char# -> Char;
  char# = { x -> Char# x };

  string# :: String# -> String;
  string# = { x -> String# x };

  -- Arithmetic operators
  {{#magmaType}}
  foreign import malgo_add_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> {{malgoType}}#;
  add{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> {{malgoType}}#;
  add{{malgoType}}# = { x y -> malgo_add_{{cType}} x y };
  add{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> {{malgoType}};
  add{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> {{malgoType}}# (add{{malgoType}}# x y) };

  foreign import malgo_sub_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> {{malgoType}}#;
  sub{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> {{malgoType}}#;
  sub{{malgoType}}# = { x y -> malgo_sub_{{cType}} x y };
  sub{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> {{malgoType}};
  sub{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> {{malgoType}}# (sub{{malgoType}}# x y) };

  foreign import malgo_mul_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> {{malgoType}}#;
  mul{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> {{malgoType}}#;
  mul{{malgoType}}# = { x y -> malgo_mul_{{cType}} x y };
  mul{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> {{malgoType}};
  mul{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> {{malgoType}}# (mul{{malgoType}}# x y) };

  foreign import malgo_div_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> {{malgoType}}#;
  div{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> {{malgoType}}#;
  div{{malgoType}}# = { x y -> malgo_div_{{cType}} x y };
  div{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> {{malgoType}};
  div{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> {{malgoType}}# (div{{malgoType}}# x y) };

  {{/magmaType}}

  foreign import sqrtf :: Float# -> Float#;
  sqrtFloat# :: Float# -> Float#;
  sqrtFloat# = { x -> sqrtf x };
  sqrtFloat :: Float -> Float;
  sqrtFloat = { Float# x -> Float# (sqrtFloat# x) };

  foreign import sqrt :: Double# -> Double#;
  sqrtDouble# :: Double# -> Double#;
  sqrtDouble# = { x -> sqrt x };
  sqrtDouble :: Double -> Double;
  sqrtDouble = { Double# x -> Double# (sqrtDouble# x) };

  isTrue# :: Int32# -> Bool;
  isTrue# = { 1# -> True
            | _  -> False };

  not :: Bool -> Bool;
  not = { True -> False
        | False -> True };

  {{#compareType}}
  foreign import malgo_eq_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  eq{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  eq{{malgoType}}# = { x y -> malgo_eq_{{cType}} x y };
  eq{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> Bool;
  eq{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> isTrue# (eq{{malgoType}}# x y) };

  foreign import malgo_ne_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  ne{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  ne{{malgoType}}# = { x y -> malgo_ne_{{cType}} x y };
  ne{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> Bool;
  ne{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> isTrue# (ne{{malgoType}}# x y) };

  foreign import malgo_lt_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  lt{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  lt{{malgoType}}# = { x y -> malgo_lt_{{cType}} x y };
  lt{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> Bool;
  lt{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> isTrue# (lt{{malgoType}}# x y) };

  foreign import malgo_gt_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  gt{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  gt{{malgoType}}# = { x y -> malgo_gt_{{cType}} x y };
  gt{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> Bool;
  gt{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> isTrue# (gt{{malgoType}}# x y) };

  foreign import malgo_le_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  le{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  le{{malgoType}}# = { x y -> malgo_le_{{cType}} x y };
  le{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> Bool;
  le{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> isTrue# (le{{malgoType}}# x y) };

  foreign import malgo_ge_{{cType}} :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  ge{{malgoType}}# :: {{malgoType}}# -> {{malgoType}}# -> Int32#;
  ge{{malgoType}}# = { x y -> malgo_ge_{{cType}} x y };
  ge{{malgoType}} :: {{malgoType}} -> {{malgoType}} -> Bool;
  ge{{malgoType}} = { ({{malgoType}}# x) ({{malgoType}}# y) -> isTrue# (ge{{malgoType}}# x y) };

  {{/compareType}}

  -- String operators
  foreign import malgo_string_at :: Int64# -> String# -> Char#;
  atString# :: Int64# -> String# -> Char#;
  atString# = { i x -> malgo_string_at i x };
  atString :: Int64 -> String -> Char;
  atString = { (Int64# i) (String# x) -> Char# (atString# i x) };

  foreign import malgo_string_append :: String# -> String# -> String#;
  appendString# :: String# -> String# -> String#;
  appendString# = { x y -> malgo_string_append x y };
  appendString :: String -> String -> String;
  appendString = { (String# x) (String# y) -> String# (appendString# x y) };

  {{#toStringType}}
  foreign import malgo_{{cType}}_to_string :: {{malgoType}}# -> String#;
  toString{{malgoType}}# :: {{malgoType}}# -> String#;
  toString{{malgoType}}# = { x -> malgo_{{cType}}_to_string x };
  toString{{malgoType}} :: {{malgoType}} -> String;
  toString{{malgoType}} = { {{malgoType}}# x -> String# (toString{{malgoType}}# x) };

  {{/toStringType}}

  -- List
  data List a = Nil | Cons a (List a);

  head :: List a -> a;
  head = { [x] -> x };

  tail :: List a -> List a;
  tail = { Cons _ xs -> xs };

  -- IO functions
  foreign import malgo_newline :: () -> ();
  newline = { _ -> malgo_newline () };

  foreign import malgo_print_char :: Char# -> ();
  printChar# :: Char# -> ();
  printChar# = { x -> malgo_print_char x };
  printChar :: Char -> ();
  printChar = { Char# x -> printChar# x };

  foreign import malgo_print_string :: String# -> ();
  printString# :: String# -> ();
  printString# = { x -> malgo_print_string x };
  printString :: String -> ();
  printString = { String# x -> printString# x };

  foreign import malgo_flush :: () -> ();
  flush = { _ -> malgo_flush () };

  foreign import malgo_get_char :: () -> Char#;
  getChar = { _ -> Char# (malgo_get_char ()) };

  foreign import malgo_get_contents :: () -> String#;
  getContents = { _ -> String# (malgo_get_contents ()) };

  -- Tuple functions
  fst :: (a, b) -> a;
  fst = { (a, b) -> a };

  snd :: (a, b) -> b;
  snd = { (a, b) -> b };
}
