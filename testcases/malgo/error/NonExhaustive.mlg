module NonExhaustiveIsUB = {
  infixl 0 (|>);
  def (|>) : a -> (a -> b) -> b;
  def (|>) = {x f -> f x};

  data String = String# String#;

  foreign import malgo_print_string : String# -> ();

  def string# : String# -> String;
  def string# = { x -> String# x };

  data List a = Nil | Cons a (List a);

  def head : List a -> a;
  def head = { (Cons x Nil) -> x };

  def main = {
    let xs = [String# "a"#, String# "b"#];
    (head xs) |> { String# x -> malgo_print_string x }
  };
}

-- Expected: 1
