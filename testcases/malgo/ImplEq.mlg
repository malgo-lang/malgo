module ImplEq = {
  module {..} = import Builtin;
  module {..} = import Prelude;

  infixr 3 (&&);
  (&&) : Bool -> Bool -> Bool;
  (&&) = { True True -> True
         | _ _ -> False
         };

  class Eq a = {
    eq : a -> a -> Bool;
  };

  impl eqOfInt32 : Eq Int32 = {
    eq = { x y -> eqInt32 x y };
  };

  eqList =
    { _ Nil Nil -> True
    | eqOfA (Cons x xs) (Cons y ys) -> #eq eqOfA x y && eqList eqOfA xs ys
    | _ _ _ -> False
    };

  impl eqOfList : Eq a -> Eq (List a) = { eqOfA ->
    { eq = eqList eqOfA }
  };

  main = {
    let xs = Cons 1 (Cons 2 (Cons 3 Nil));
    let ys = Cons 1 (Cons 2 (Cons 3 Nil));
    if (#eq (eqOfList eqOfInt32) xs ys)
      { printString "true" }
      { printString "false" }
  };
}

-- Expected: true
