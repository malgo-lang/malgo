module Infixing = {
    import Builtin;

    add = {(Int64# x, Int64# y) -> Int64# (add_Int64# x y)};

    infixl 3 (<\);
    (<\) = {x f -> {y -> f (x, y)}};

    infixl 3 (\>);
    (\>) = {f y -> f y};

    infixr 3 (</);
    (</) = {x f -> f x};

    infixr 3 (/>);
    (/>) = {f y -> {x -> f (x, y)}};

    foreign import print_int :: Int64# -> ();

    printInt = {Int64# x -> print_int x};

    main = {
        printInt (Int64# 1L# <\add\> Int64# 2L#);
        printInt (Int64# 1L# </add/> Int64# 2L#);
    };
}

-- Expected: 33
