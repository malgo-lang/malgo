module String = {
  import Builtin;
  import Prelude;

  type Index = Int64;

  foreign import string_at :: Int64# -> String# -> Char#;

  at :: Index -> String -> Char;
  at = { (Int64# i) (String# str) -> Char# (string_at i str) };

  foreign import string_append :: String# -> String# -> String#;

  append :: String -> String -> String;
  append = { (String# first) (String# second) -> String# (string_append first second) };

  foreign import string_take :: Int64# -> String# -> String#;

  take :: Index -> String -> String;
  take = { (Int64# i) (String# str) -> String# (string_take i str) };

  foreign import string_drop :: Int64# -> String# -> String#;

  drop :: Index -> String -> String;
  drop = { (Int64# i) (String# str) -> String# (string_drop i str) };

  type Rune = Int32;

  foreign import string_decode_rune :: String# -> Int32#;

  decodeRune :: String -> (Rune, Index);
  decodeRune =
    { (String# str) ->
      let rune = string_decode_rune str;
      (Int32# rune, sizeOfRune rune)
    };

  rune1Max :: Int32#
  rune2Max :: Int32#
  rune3Max :: Int32#
  rune4Max :: Int32#
  surrogateMin :: Int32#
  surrogateMax :: Int32#

  sizeOfRune :: Rune -> Int64;
  sizeOfRune = {
    | rune when isTrue# (lt_int32 rune 0#) -> -1L
    | rune when isTrue# (le_int32 rune rune1Max) -> 1L
    | rune when isTrue# (le_int32 rune rune2Max) -> 2L
    | rune when isTrue# (and_bool (le_int32 surrogateMin rune) (le_int32 r surrogateMax)) -> -1L
    | rune when isTrue# (le_int32 rune rune3Max) -> 3L
    | rune when isTrue# (le_int32 rune maxRune) -> 4L
    | _ -> -1L
    };
}
