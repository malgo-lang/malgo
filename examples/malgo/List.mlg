module list = {
  import Builtin;

  infixl 6 (+#);
  (+#) = {x y -> add_Int64# x y};

  infixl 0 (|>);
  (|>) :: a -> (a -> b) -> b;
  (|>) = {x f -> f x};

  data List a = Nil | Cons a (List a);

  map = { f xs ->
    xs |> { Nil -> Nil
          | (Cons x xs) -> Cons (f x) (map' f xs)
          }
  };

  map' = { _ Nil -> Nil
         | f (Cons x xs) -> Cons (f x) (map f xs)
         };

  sum = { Nil -> Int64# 0L#
        | (Cons (Int64# x) xs) ->
            sum xs |> {(Int64# s) -> Int64# (x +# s)}
        };

  foreign import print_int :: Int64# -> ();

  main = {
      sum (Cons (Int64# 1L#) (Cons (Int64# 2L#) Nil))
        |> {(Int64# i) -> print_int i}
      };
}
-- Expected: 3
