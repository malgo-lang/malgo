module List = {
  module {..} = import Builtin;
  module {..} = import Prelude;

  infixl 6 (+#);
  (+#) = {x y -> addInt64# x y};

  map = { f xs ->
    xs |> { Nil -> Nil
          | (Cons x xs) -> Cons (f x) (map' f xs)
          }
  };

  map' = { _ Nil -> Nil
         | f (Cons x xs) -> Cons (f x) (map f xs)
         };

  sum = { Nil -> 0L
        | (Cons x xs) ->
            sum xs |> addInt64 x
        };

  main = {
      sum (Cons 1L (Cons 2L Nil))
        |> toStringInt64
        |> putStrLn
  };
}
-- Expected: 3
