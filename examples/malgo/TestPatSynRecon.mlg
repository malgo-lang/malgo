module TestPatSynRecon = {
  import Builtin.(*);

  infixl 6 (+#);
  (+#) = {x y -> add_Int64# x y};
  
  infixl 0 (|>);
  (|>) :: a -> (a -> b) -> b;
  (|>) = {x f -> f x};
  
  data List a = Nil | Cons a (List a);

  sum = { Cons (Int64# x) xs ->
            sum xs |> {(Int64# s) -> Int64# (x +# s)}
        | Nil -> Int64# 0L#
        };
  
  foreign import print_int :: Int64# -> ();
  
  main = {
      sum (Cons (Int64# 1L#) (Cons (Int64# 2L#) Nil))
        |> {(Int64# i) -> print_int i}
      };
}
-- Expected: 3