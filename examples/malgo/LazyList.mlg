module {..} = import "../../runtime/malgo/Builtin.mlg"
module {..} = import "../../runtime/malgo/Prelude.mlg"

data LazyList a = LNil | LCons a {LazyList a}

def nil : {LazyList a}
def nil = {LNil}

def cons : a -> {LazyList a} -> {LazyList a}
def cons = { x xs -> {LCons x xs} }

def map = { f xs -> {
  xs () |>
    { LNil -> LNil,
      (LCons x xs) -> LCons (f x) (map f xs)
    }
  }
}

def sum = { xs ->
  xs () |> { LNil -> 0i64,
             (LCons x xs) -> addInt64 x (sum xs)
           }
}

def main = {
  let xs = {LCons 1i64 {LCons 2i64 nil}};
  sum (cons 1i64 (cons 2i64 nil))
    |> toStringInt64
    |> putStrLn
}
