module LazyList = {
  module {..} = import Builtin;
  module {..} = import Prelude;
  
  data LazyList a = LNil | LCons a {LazyList a};

  nil : {LazyList a};
  nil = {LNil};

  cons : a -> {LazyList a} -> {LazyList a}; 
  cons = { x xs -> {LCons x xs} };

  map = { f xs -> {
      !xs |>
        { LNil -> LNil
        | LCons x xs -> LCons (f x) (map f xs)
        }
    }
  };

  sum = { xs ->
    !xs |> { LNil -> 0L
           | LCons x xs -> addInt64 x (sum xs)
           }
  };

  main = {
    let xs = {LCons 1L {LCons 2L nil}};
    sum (cons 1L (cons 2L nil)) 
      |> toStringInt64
      |> putStrLn
  };
}

-- Expected: 3
