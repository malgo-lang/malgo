module {..} = import Builtin
module {..} = import Prelude

foreign import malgo_new_vector : Int64# -> Ptr# Char# -> Ptr# (Ptr# Char#)

foreign import malgo_read_vector : Int64# -> Ptr# (Ptr# Char#) -> Ptr# Char#

data Vector a = Vector Int64 (Ptr# a)

def newVector : Int64 -> a -> Vector a
def newVector = { (Int64# length) init ->
  Vector (Int64# length) (malgo_unsafe_cast (malgo_new_vector length (malgo_unsafe_cast init)))
}

def readVector : Int64 -> Vector a -> Maybe a
def readVector = { (Int64# index) (Vector (Int64# length) ptr) ->
  if (isTrue# (geInt64# index length))
  { Nothing }
  { Just (malgo_unsafe_cast (malgo_read_vector index (malgo_unsafe_cast ptr))) }
}

def main = {
  let vec = newVector 10L 5;
  let val = readVector 2L vec;
  val |> { Nothing -> putStrLn "ERROR",
           Just x -> putStrLn (toStringInt32 x) }
}