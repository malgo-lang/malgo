module Vector = {
  import Builtin;
  import Prelude;
  
  foreign import unsafe_cast :: a -> b;

  castToPtrChar# :: a -> Ptr# Char#;
  castToPtrChar# = { x -> unsafe_cast x };

  castToPtrPtrChar# :: Ptr# a -> Ptr# (Ptr# Char#);
  castToPtrPtrChar# = { x -> unsafe_cast x };

  castFromPtrChar# :: Ptr# Char# -> a;  
  castFromPtrChar# = { x -> unsafe_cast x };

  castFromPtrPtrChar# :: Ptr# (Ptr# Char#) -> Ptr# a;
  castFromPtrPtrChar# = { x -> unsafe_cast x };

  foreign import new_vector :: Int64# -> Ptr# Char# -> Ptr# (Ptr# Char#);

  foreign import read_vector :: Int64# -> Ptr# (Ptr# Char#) -> Ptr# Char#;

  data Vector a = Vector Int64 (Ptr# a);

  newVector :: Int64 -> a -> Vector a;
  newVector = { (Int64# length) init ->
    Vector (Int64# length) (castFromPtrPtrChar# (new_vector length (castToPtrChar# init)))
  };

  data Maybe a = Nothing | Just a;

  readVector :: Int64 -> Vector a -> Maybe a;
  readVector = { (Int64# index) (Vector (Int64# length) ptr) ->
    if (isTrue# (ge_Int64# index length))
    { Nothing }
    { Just (castFromPtrChar# (read_vector index (castToPtrPtrChar# ptr))) }
  };

  foreign import print_int32 :: Int32# -> ();

  main = {
    let vec = newVector 10L 5;
    let val = readVector 2L vec;
    val |> { Nothing -> putStrLn "ERROR"
           | Just (Int32# x) -> print_int32 x }
  }
} 

-- Expected: 5