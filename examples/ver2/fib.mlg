-- -*- tab-width: 2 -*-

-- recursive function
fib : Int -> Int
rec fib n =
  if n <= 1
  then 1
  else fib (n - 1) + fib (n - 2)

-- function with effect
fibLoop : Int -> ()
rec fibLoop n =
  let unused = fib 30
  in if n <= 0
     then {printInt (fib 0); newline ()}
     else {printInt (fib n); newline (); fibLoop (n - 1)}
  end

-- brace syntax
fibLoop' : Int -> ()
rec fibLoop' n = {
  let unused = fib 30; -- 'let' in braces
  if n <= 0 {
    printInt (fib 0);
    newline ()
  } else {
    printInt (fib n);
    newline();
    fibLoop (n - 1)
  }
}

-- mutual recursive functions
even : Int -> Bool
odd : Int -> Bool
rec even n = if n == 0 then True  else odd  (n - 1)
and odd  n = if n == 0 then False else even (n - 1)

{-- 次のように変換される
even : Int -> Bool
rec even n =
  let rec odd' n = if n == 0 then False else even (n - 1)
  in if n == 0 then True else odd' (n - 1)
  end

odd : Int -> Bool
rec odd n =
  let rec even' n = if n == 0 then True else odd (n - 1)
  in if n == 0 then False else even' (n - 1)
  end
-}

-- entry point
main : List String -> ()
main argv =
  fibLoop 30