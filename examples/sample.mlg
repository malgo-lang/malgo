let extern print : String -> {} = "print" in
let extern println : String -> {} = "println" in
let extern print_int : Int -> {} = "print_int" in
let extern print_float : Float -> {} = "print_float" in
let extern flush : () -> {} = "flush" in
let extern getChar : () -> Char = "getchar" in
let extern ord : Char -> Int = "ord" in
let extern chr : Int -> Char = "chr" in
let extern size : String -> Int = "size" in
let extern newline : () -> {} = "newline" in
let extern substring : (String, Int, Int) -> String = "substring" in
let extern concat : (String, String) -> String = "concat" in
let extern not : Bool -> Bool = "not" in
let fun println_int(x:Int) : {} = print_int(x); newline() in
let fun println_float(x:Float) : {} = print_float(x); newline() in

let val a = 42 in
let fun fib (n:Int) : Int =
  if n <= 1
  then 1
  else fib (n - 1) + fib (n - 2) in
let val a:Int = a + 1 in
let fun do_nothing():{} = {} in
let fun add(x:Int):Int =
  let fun add2(y:Int):Int = x + y in
  add2(2) in
let fun area(r:Float):Float = r *. r *. 3.14 in
let val name = "malgo" in
let fun print_fib (n:Int) : {} = print_int(fib(n)) in

println("Hello, world!");
print("fib(10) = ");
println_int(fib(10));
do_nothing();
println_int(add(2));
println_int(a);
println_int((fn (x:Int) -> x * 4)(3));
println(substring(name, 1, 3));
println(concat("foo", "bar"));
println_float(3.14);
println_float(area(10.0))
