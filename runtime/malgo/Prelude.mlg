module {..} = import Builtin

-- identity function
def identity : a -> a
def identity = { x -> x }

-- return `a` for all inputs
def const : a -> b -> a
def const = { a _ -> a }

-- reverse apply function
-- use as pattern match expression
def case : a -> (a -> b) -> b
def case = { x f -> f x }

-- Tuple functions
def fst : {a, b} -> a
def fst = { {a, b} -> a }

def snd : {a, b} -> b
def snd = { {a, b} -> b }

-- optional value
data Maybe a = Nothing | Just a

-- list
data List a = Nil | Cons a (List a)

def head : List a -> a
def head =
  { (Cons x _) -> x,
    _ -> exitFailure {},
  }

def tail : List a -> List a
def tail =
  { (Cons _ xs) -> xs,
    _ -> exitFailure {},
  }

-- fold left
def foldl : (a -> b -> a) -> a -> List b -> a
def foldl =
  { _ z Nil -> z,
    f z (Cons x xs) -> foldl f (f z x) xs,
  }

-- map function over a list
def mapList : (a -> b) -> List a -> List b
def mapList =
  { _ Nil -> Nil,
    f (Cons x xs) -> Cons (f x) (mapList f xs),
  }

-- convert a list of character to a string
def listToString : List Char -> String
def listToString =
  { Nil -> "",
    (Cons c cs) -> consString c (listToString cs)
  }

-- get the first character of string
def headString : String -> Maybe Char
def headString = { str ->
  if (eqString str "")
    { Nothing }
    { Just (atString 0L str) }
}

-- trim the first character of string
def tailString : String -> String
def tailString = { str ->
  if (eqString str "")
    { str }
    { substring str 1L (lengthString str) }
}

-- return the longest prefix of `str` of that satisfy `pred`
def takeWhileString = { pred str ->
  case (headString str) {
    Nothing -> str,
    (Just c) ->
      if (pred c)
        { consString c (takeWhileString pred (tailString str)) }
        { "" }
  }
}

-- return the suffix remains after `takeWhileString pred str`
def dropWhileString = { pred str ->
  case (headString str) {
    Nothing -> str,
    (Just c) ->
      if (pred c)
        { dropWhileString pred (tailString str) }
        { str }
  }
}

def concatString : List String -> String
def concatString =
  { Nil -> "",
    (Cons x xs) -> appendString x (concatString xs)
  }

def punctuate : a -> List a -> List a
def punctuate =
  { _ Nil -> Nil,
    _ (Cons x Nil) -> Cons x Nil,
    sep (Cons x xs) -> Cons x (Cons sep (punctuate sep xs))
  }

-- check that `x` is a whitespace
def isWhiteSpace : Char -> Bool
def isWhiteSpace =
  { (Char# ' '#) -> True,
    (Char# '\n'#) -> True,
    (Char# '\r'#) -> True,
    (Char# '\t'#) -> True,
    _ -> False
  }

infixr 9 (<<)
def (<<) : (b -> c) -> (a -> b) -> (a -> c)
def (<<) = {f g -> {x -> f (g x)}}

infixl 0 (|>)
def (|>) : a -> (a -> b) -> b
def (|>) = {x f -> f x}

infixr 0 (<|)
def (<|) : (a -> b) -> a -> b
def (<|) = {f x -> f x}

def if : Bool -> {a} -> {a} -> a
def if =
  { True t _ -> t {},
    False _ f -> f {},
  }

def unless : Bool -> a -> {a} -> a
def unless = { c tValue f -> if c {tValue} f }

-- multiway if
def cond : List {Bool, {a}} -> a
def cond =
  { Nil -> panic "no branch",
    (Cons {True, x} _) -> x {},
    (Cons {False, _} xs) -> cond xs
  }

def putStr : String -> {}
def putStr = { str -> printString str }

def putStrLn : String -> {}
def putStrLn = { str ->
  printString str;
  newline {}
}

def printInt32 : Int32 -> {}
def printInt32 = { i -> printString (toStringInt32 i) }

def printInt64 : Int64 -> {}
def printInt64 = { i -> printString (toStringInt64 i) }