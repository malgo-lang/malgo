module Prelude = {
  module {..} = import Builtin;

  infixr 9 (.);
  (.) :: (b -> c) -> (a -> b) -> (a -> c);
  (.) = {f g -> {x -> f (g x)}};

  infixl 0 (|>);
  (|>) :: a -> (a -> b) -> b;
  (|>) = {x f -> f x};

  infixr 0 (<|);
  (<|) :: (a -> b) -> a -> b;
  (<|) = {f x -> f x};

  if :: Bool -> {a} -> {a} -> a;
  if = { True t _ -> !t
       | False _ f -> !f
       };

  unless :: Bool -> a -> {a} -> a;
  unless = { c tValue f -> if c {tValue} f };

  putStr :: String -> ();
  putStr = { str -> printString str };

  putStrLn :: String -> ();
  putStrLn = { str ->
    printString str;
    newline ()
  };

  printInt32 :: Int32 -> ();
  printInt32 = { i -> printString (toStringInt32 i) };

  printInt64 :: Int64 -> ();
  printInt64 = { i -> printString (toStringInt64 i) };
}