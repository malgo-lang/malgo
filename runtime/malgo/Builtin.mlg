module Builtin = {
  -- Primitive Types
  data Int32 = Int32# Int32#;
  data Int64 = Int64# Int64#;
  data Float = Float# Float#;
  data Double = Double# Double#;
  data Char = Char# Char#;
  data String = String# String#;
  data Bool = False | True;

  -- Boxing functions
  def int32# : Int32# -> Int32;
  def int32# = { x -> Int32# x };

  def int64# : Int64# -> Int64;
  def int64# = { x -> Int64# x };

  def float# : Float# -> Float;
  def float# = { x -> Float# x };

  def double# : Double# -> Double;
  def double# = { x -> Double# x };

  def char# : Char# -> Char;
  def char# = { x -> Char# x };

  def string# : String# -> String;
  def string# = { x -> String# x };

  -- Panic and Undefined
  foreign import malgo_panic : String# -> a;
  def panic : String -> a;
  def panic = { String# message -> malgo_panic message };

  foreign import malgo_unsafe_cast : a -> b;

  def undefined : a;
  def undefined = malgo_unsafe_cast ();

  -- Arithmetic operators
  foreign import malgo_add_int32_t : Int32# -> Int32# -> Int32#;
  def addInt32# : Int32# -> Int32# -> Int32#;
  def addInt32# = { x y -> malgo_add_int32_t x y };
  def addInt32 : Int32 -> Int32 -> Int32;
  def addInt32 = { (Int32# x) (Int32# y) -> Int32# (addInt32# x y) };

  foreign import malgo_sub_int32_t : Int32# -> Int32# -> Int32#;
  def subInt32# : Int32# -> Int32# -> Int32#;
  def subInt32# = { x y -> malgo_sub_int32_t x y };
  def subInt32 : Int32 -> Int32 -> Int32;
  def subInt32 = { (Int32# x) (Int32# y) -> Int32# (subInt32# x y) };

  foreign import malgo_mul_int32_t : Int32# -> Int32# -> Int32#;
  def mulInt32# : Int32# -> Int32# -> Int32#;
  def mulInt32# = { x y -> malgo_mul_int32_t x y };
  def mulInt32 : Int32 -> Int32 -> Int32;
  def mulInt32 = { (Int32# x) (Int32# y) -> Int32# (mulInt32# x y) };

  foreign import malgo_div_int32_t : Int32# -> Int32# -> Int32#;
  def divInt32# : Int32# -> Int32# -> Int32#;
  def divInt32# = { x y -> malgo_div_int32_t x y };
  def divInt32 : Int32 -> Int32 -> Int32;
  def divInt32 = { (Int32# x) (Int32# y) -> Int32# (divInt32# x y) };

  foreign import malgo_add_int64_t : Int64# -> Int64# -> Int64#;
  def addInt64# : Int64# -> Int64# -> Int64#;
  def addInt64# = { x y -> malgo_add_int64_t x y };
  def addInt64 : Int64 -> Int64 -> Int64;
  def addInt64 = { (Int64# x) (Int64# y) -> Int64# (addInt64# x y) };

  foreign import malgo_sub_int64_t : Int64# -> Int64# -> Int64#;
  def subInt64# : Int64# -> Int64# -> Int64#;
  def subInt64# = { x y -> malgo_sub_int64_t x y };
  def subInt64 : Int64 -> Int64 -> Int64;
  def subInt64 = { (Int64# x) (Int64# y) -> Int64# (subInt64# x y) };

  foreign import malgo_mul_int64_t : Int64# -> Int64# -> Int64#;
  def mulInt64# : Int64# -> Int64# -> Int64#;
  def mulInt64# = { x y -> malgo_mul_int64_t x y };
  def mulInt64 : Int64 -> Int64 -> Int64;
  def mulInt64 = { (Int64# x) (Int64# y) -> Int64# (mulInt64# x y) };

  foreign import malgo_div_int64_t : Int64# -> Int64# -> Int64#;
  def divInt64# : Int64# -> Int64# -> Int64#;
  def divInt64# = { x y -> malgo_div_int64_t x y };
  def divInt64 : Int64 -> Int64 -> Int64;
  def divInt64 = { (Int64# x) (Int64# y) -> Int64# (divInt64# x y) };

  foreign import malgo_add_float : Float# -> Float# -> Float#;
  def addFloat# : Float# -> Float# -> Float#;
  def addFloat# = { x y -> malgo_add_float x y };
  def addFloat : Float -> Float -> Float;
  def addFloat = { (Float# x) (Float# y) -> Float# (addFloat# x y) };

  foreign import malgo_sub_float : Float# -> Float# -> Float#;
  def subFloat# : Float# -> Float# -> Float#;
  def subFloat# = { x y -> malgo_sub_float x y };
  def subFloat : Float -> Float -> Float;
  def subFloat = { (Float# x) (Float# y) -> Float# (subFloat# x y) };

  foreign import malgo_mul_float : Float# -> Float# -> Float#;
  def mulFloat# : Float# -> Float# -> Float#;
  def mulFloat# = { x y -> malgo_mul_float x y };
  def mulFloat : Float -> Float -> Float;
  def mulFloat = { (Float# x) (Float# y) -> Float# (mulFloat# x y) };

  foreign import malgo_div_float : Float# -> Float# -> Float#;
  def divFloat# : Float# -> Float# -> Float#;
  def divFloat# = { x y -> malgo_div_float x y };
  def divFloat : Float -> Float -> Float;
  def divFloat = { (Float# x) (Float# y) -> Float# (divFloat# x y) };

  foreign import malgo_add_double : Double# -> Double# -> Double#;
  def addDouble# : Double# -> Double# -> Double#;
  def addDouble# = { x y -> malgo_add_double x y };
  def addDouble : Double -> Double -> Double;
  def addDouble = { (Double# x) (Double# y) -> Double# (addDouble# x y) };

  foreign import malgo_sub_double : Double# -> Double# -> Double#;
  def subDouble# : Double# -> Double# -> Double#;
  def subDouble# = { x y -> malgo_sub_double x y };
  def subDouble : Double -> Double -> Double;
  def subDouble = { (Double# x) (Double# y) -> Double# (subDouble# x y) };

  foreign import malgo_mul_double : Double# -> Double# -> Double#;
  def mulDouble# : Double# -> Double# -> Double#;
  def mulDouble# = { x y -> malgo_mul_double x y };
  def mulDouble : Double -> Double -> Double;
  def mulDouble = { (Double# x) (Double# y) -> Double# (mulDouble# x y) };

  foreign import malgo_div_double : Double# -> Double# -> Double#;
  def divDouble# : Double# -> Double# -> Double#;
  def divDouble# = { x y -> malgo_div_double x y };
  def divDouble : Double -> Double -> Double;
  def divDouble = { (Double# x) (Double# y) -> Double# (divDouble# x y) };


  foreign import sqrtf : Float# -> Float#;
  def sqrtFloat# : Float# -> Float#;
  def sqrtFloat# = { x -> sqrtf x };
  def sqrtFloat : Float -> Float;
  def sqrtFloat = { Float# x -> Float# (sqrtFloat# x) };

  foreign import sqrt : Double# -> Double#;
  def sqrtDouble# : Double# -> Double#;
  def sqrtDouble# = { x -> sqrt x };
  def sqrtDouble : Double -> Double;
  def sqrtDouble = { Double# x -> Double# (sqrtDouble# x) };

  def isTrue# : Int32# -> Bool;
  def isTrue# =
    { 1# -> True
    | _  -> False };

  def not : Bool -> Bool;
  def not =
    { True -> False
    | False -> True };

  foreign import malgo_eq_int32_t : Int32# -> Int32# -> Int32#;
  def eqInt32# : Int32# -> Int32# -> Int32#;
  def eqInt32# = { x y -> malgo_eq_int32_t x y };
  def eqInt32 : Int32 -> Int32 -> Bool;
  def eqInt32 = { (Int32# x) (Int32# y) -> isTrue# (eqInt32# x y) };

  foreign import malgo_ne_int32_t : Int32# -> Int32# -> Int32#;
  def neInt32# : Int32# -> Int32# -> Int32#;
  def neInt32# = { x y -> malgo_ne_int32_t x y };
  def neInt32 : Int32 -> Int32 -> Bool;
  def neInt32 = { (Int32# x) (Int32# y) -> isTrue# (neInt32# x y) };

  foreign import malgo_lt_int32_t : Int32# -> Int32# -> Int32#;
  def ltInt32# : Int32# -> Int32# -> Int32#;
  def ltInt32# = { x y -> malgo_lt_int32_t x y };
  def ltInt32 : Int32 -> Int32 -> Bool;
  def ltInt32 = { (Int32# x) (Int32# y) -> isTrue# (ltInt32# x y) };

  foreign import malgo_gt_int32_t : Int32# -> Int32# -> Int32#;
  def gtInt32# : Int32# -> Int32# -> Int32#;
  def gtInt32# = { x y -> malgo_gt_int32_t x y };
  def gtInt32 : Int32 -> Int32 -> Bool;
  def gtInt32 = { (Int32# x) (Int32# y) -> isTrue# (gtInt32# x y) };

  foreign import malgo_le_int32_t : Int32# -> Int32# -> Int32#;
  def leInt32# : Int32# -> Int32# -> Int32#;
  def leInt32# = { x y -> malgo_le_int32_t x y };
  def leInt32 : Int32 -> Int32 -> Bool;
  def leInt32 = { (Int32# x) (Int32# y) -> isTrue# (leInt32# x y) };

  foreign import malgo_ge_int32_t : Int32# -> Int32# -> Int32#;
  def geInt32# : Int32# -> Int32# -> Int32#;
  def geInt32# = { x y -> malgo_ge_int32_t x y };
  def geInt32 : Int32 -> Int32 -> Bool;
  def geInt32 = { (Int32# x) (Int32# y) -> isTrue# (geInt32# x y) };

  foreign import malgo_eq_int64_t : Int64# -> Int64# -> Int32#;
  def eqInt64# : Int64# -> Int64# -> Int32#;
  def eqInt64# = { x y -> malgo_eq_int64_t x y };
  def eqInt64 : Int64 -> Int64 -> Bool;
  def eqInt64 = { (Int64# x) (Int64# y) -> isTrue# (eqInt64# x y) };

  foreign import malgo_ne_int64_t : Int64# -> Int64# -> Int32#;
  def neInt64# : Int64# -> Int64# -> Int32#;
  def neInt64# = { x y -> malgo_ne_int64_t x y };
  def neInt64 : Int64 -> Int64 -> Bool;
  def neInt64 = { (Int64# x) (Int64# y) -> isTrue# (neInt64# x y) };

  foreign import malgo_lt_int64_t : Int64# -> Int64# -> Int32#;
  def ltInt64# : Int64# -> Int64# -> Int32#;
  def ltInt64# = { x y -> malgo_lt_int64_t x y };
  def ltInt64 : Int64 -> Int64 -> Bool;
  def ltInt64 = { (Int64# x) (Int64# y) -> isTrue# (ltInt64# x y) };

  foreign import malgo_gt_int64_t : Int64# -> Int64# -> Int32#;
  def gtInt64# : Int64# -> Int64# -> Int32#;
  def gtInt64# = { x y -> malgo_gt_int64_t x y };
  def gtInt64 : Int64 -> Int64 -> Bool;
  def gtInt64 = { (Int64# x) (Int64# y) -> isTrue# (gtInt64# x y) };

  foreign import malgo_le_int64_t : Int64# -> Int64# -> Int32#;
  def leInt64# : Int64# -> Int64# -> Int32#;
  def leInt64# = { x y -> malgo_le_int64_t x y };
  def leInt64 : Int64 -> Int64 -> Bool;
  def leInt64 = { (Int64# x) (Int64# y) -> isTrue# (leInt64# x y) };

  foreign import malgo_ge_int64_t : Int64# -> Int64# -> Int32#;
  def geInt64# : Int64# -> Int64# -> Int32#;
  def geInt64# = { x y -> malgo_ge_int64_t x y };
  def geInt64 : Int64 -> Int64 -> Bool;
  def geInt64 = { (Int64# x) (Int64# y) -> isTrue# (geInt64# x y) };

  foreign import malgo_eq_float : Float# -> Float# -> Int32#;
  def eqFloat# : Float# -> Float# -> Int32#;
  def eqFloat# = { x y -> malgo_eq_float x y };
  def eqFloat : Float -> Float -> Bool;
  def eqFloat = { (Float# x) (Float# y) -> isTrue# (eqFloat# x y) };

  foreign import malgo_ne_float : Float# -> Float# -> Int32#;
  def neFloat# : Float# -> Float# -> Int32#;
  def neFloat# = { x y -> malgo_ne_float x y };
  def neFloat : Float -> Float -> Bool;
  def neFloat = { (Float# x) (Float# y) -> isTrue# (neFloat# x y) };

  foreign import malgo_lt_float : Float# -> Float# -> Int32#;
  def ltFloat# : Float# -> Float# -> Int32#;
  def ltFloat# = { x y -> malgo_lt_float x y };
  def ltFloat : Float -> Float -> Bool;
  def ltFloat = { (Float# x) (Float# y) -> isTrue# (ltFloat# x y) };

  foreign import malgo_gt_float : Float# -> Float# -> Int32#;
  def gtFloat# : Float# -> Float# -> Int32#;
  def gtFloat# = { x y -> malgo_gt_float x y };
  def gtFloat : Float -> Float -> Bool;
  def gtFloat = { (Float# x) (Float# y) -> isTrue# (gtFloat# x y) };

  foreign import malgo_le_float : Float# -> Float# -> Int32#;
  def leFloat# : Float# -> Float# -> Int32#;
  def leFloat# = { x y -> malgo_le_float x y };
  def leFloat : Float -> Float -> Bool;
  def leFloat = { (Float# x) (Float# y) -> isTrue# (leFloat# x y) };

  foreign import malgo_ge_float : Float# -> Float# -> Int32#;
  def geFloat# : Float# -> Float# -> Int32#;
  def geFloat# = { x y -> malgo_ge_float x y };
  def geFloat : Float -> Float -> Bool;
  def geFloat = { (Float# x) (Float# y) -> isTrue# (geFloat# x y) };

  foreign import malgo_eq_double : Double# -> Double# -> Int32#;
  def eqDouble# : Double# -> Double# -> Int32#;
  def eqDouble# = { x y -> malgo_eq_double x y };
  def eqDouble : Double -> Double -> Bool;
  def eqDouble = { (Double# x) (Double# y) -> isTrue# (eqDouble# x y) };

  foreign import malgo_ne_double : Double# -> Double# -> Int32#;
  def neDouble# : Double# -> Double# -> Int32#;
  def neDouble# = { x y -> malgo_ne_double x y };
  def neDouble : Double -> Double -> Bool;
  def neDouble = { (Double# x) (Double# y) -> isTrue# (neDouble# x y) };

  foreign import malgo_lt_double : Double# -> Double# -> Int32#;
  def ltDouble# : Double# -> Double# -> Int32#;
  def ltDouble# = { x y -> malgo_lt_double x y };
  def ltDouble : Double -> Double -> Bool;
  def ltDouble = { (Double# x) (Double# y) -> isTrue# (ltDouble# x y) };

  foreign import malgo_gt_double : Double# -> Double# -> Int32#;
  def gtDouble# : Double# -> Double# -> Int32#;
  def gtDouble# = { x y -> malgo_gt_double x y };
  def gtDouble : Double -> Double -> Bool;
  def gtDouble = { (Double# x) (Double# y) -> isTrue# (gtDouble# x y) };

  foreign import malgo_le_double : Double# -> Double# -> Int32#;
  def leDouble# : Double# -> Double# -> Int32#;
  def leDouble# = { x y -> malgo_le_double x y };
  def leDouble : Double -> Double -> Bool;
  def leDouble = { (Double# x) (Double# y) -> isTrue# (leDouble# x y) };

  foreign import malgo_ge_double : Double# -> Double# -> Int32#;
  def geDouble# : Double# -> Double# -> Int32#;
  def geDouble# = { x y -> malgo_ge_double x y };
  def geDouble : Double -> Double -> Bool;
  def geDouble = { (Double# x) (Double# y) -> isTrue# (geDouble# x y) };

  foreign import malgo_eq_char : Char# -> Char# -> Int32#;
  def eqChar# : Char# -> Char# -> Int32#;
  def eqChar# = { x y -> malgo_eq_char x y };
  def eqChar : Char -> Char -> Bool;
  def eqChar = { (Char# x) (Char# y) -> isTrue# (eqChar# x y) };

  foreign import malgo_ne_char : Char# -> Char# -> Int32#;
  def neChar# : Char# -> Char# -> Int32#;
  def neChar# = { x y -> malgo_ne_char x y };
  def neChar : Char -> Char -> Bool;
  def neChar = { (Char# x) (Char# y) -> isTrue# (neChar# x y) };

  foreign import malgo_lt_char : Char# -> Char# -> Int32#;
  def ltChar# : Char# -> Char# -> Int32#;
  def ltChar# = { x y -> malgo_lt_char x y };
  def ltChar : Char -> Char -> Bool;
  def ltChar = { (Char# x) (Char# y) -> isTrue# (ltChar# x y) };

  foreign import malgo_gt_char : Char# -> Char# -> Int32#;
  def gtChar# : Char# -> Char# -> Int32#;
  def gtChar# = { x y -> malgo_gt_char x y };
  def gtChar : Char -> Char -> Bool;
  def gtChar = { (Char# x) (Char# y) -> isTrue# (gtChar# x y) };

  foreign import malgo_le_char : Char# -> Char# -> Int32#;
  def leChar# : Char# -> Char# -> Int32#;
  def leChar# = { x y -> malgo_le_char x y };
  def leChar : Char -> Char -> Bool;
  def leChar = { (Char# x) (Char# y) -> isTrue# (leChar# x y) };

  foreign import malgo_ge_char : Char# -> Char# -> Int32#;
  def geChar# : Char# -> Char# -> Int32#;
  def geChar# = { x y -> malgo_ge_char x y };
  def geChar : Char -> Char -> Bool;
  def geChar = { (Char# x) (Char# y) -> isTrue# (geChar# x y) };

  foreign import malgo_eq_string : String# -> String# -> Int32#;
  def eqString# : String# -> String# -> Int32#;
  def eqString# = { x y -> malgo_eq_string x y };
  def eqString : String -> String -> Bool;
  def eqString = { (String# x) (String# y) -> isTrue# (eqString# x y) };

  foreign import malgo_ne_string : String# -> String# -> Int32#;
  def neString# : String# -> String# -> Int32#;
  def neString# = { x y -> malgo_ne_string x y };
  def neString : String -> String -> Bool;
  def neString = { (String# x) (String# y) -> isTrue# (neString# x y) };

  foreign import malgo_lt_string : String# -> String# -> Int32#;
  def ltString# : String# -> String# -> Int32#;
  def ltString# = { x y -> malgo_lt_string x y };
  def ltString : String -> String -> Bool;
  def ltString = { (String# x) (String# y) -> isTrue# (ltString# x y) };

  foreign import malgo_gt_string : String# -> String# -> Int32#;
  def gtString# : String# -> String# -> Int32#;
  def gtString# = { x y -> malgo_gt_string x y };
  def gtString : String -> String -> Bool;
  def gtString = { (String# x) (String# y) -> isTrue# (gtString# x y) };

  foreign import malgo_le_string : String# -> String# -> Int32#;
  def leString# : String# -> String# -> Int32#;
  def leString# = { x y -> malgo_le_string x y };
  def leString : String -> String -> Bool;
  def leString = { (String# x) (String# y) -> isTrue# (leString# x y) };

  foreign import malgo_ge_string : String# -> String# -> Int32#;
  def geString# : String# -> String# -> Int32#;
  def geString# = { x y -> malgo_ge_string x y };
  def geString : String -> String -> Bool;
  def geString = { (String# x) (String# y) -> isTrue# (geString# x y) };

  -- char operators
  foreign import malgo_char_ord : Char# -> Int32#;
  def ordChar# : Char# -> Int32#;
  def ordChar# = { x -> malgo_char_ord x };
  def ordChar : Char -> Int32;
  def ordChar = { (Char# chr) -> Int32# (ordChar# chr) };

  foreign import malgo_is_digit : Char# -> Int32#;
  def isDigit# : Char# -> Int32#;
  def isDigit# = { x -> malgo_is_digit x };
  def isDigit : Char -> Bool;
  def isDigit = { Char# x -> isTrue# (isDigit# x) };

  foreign import malgo_is_lower : Char# -> Int32#;
  def isLower# : Char# -> Int32#;
  def isLower# = { x -> malgo_is_lower x };
  def isLower : Char -> Bool;
  def isLower = { Char# x -> isTrue# (isLower# x) };

  foreign import malgo_is_upper : Char# -> Int32#;
  def isUpper# : Char# -> Int32#;
  def isUpper# = { x -> malgo_is_upper x };
  def isUpper : Char -> Bool;
  def isUpper = { Char# x -> isTrue# (isUpper# x) };

  foreign import malgo_is_alphanum : Char# -> Int32#;
  def isAlphanum# : Char# -> Int32#;
  def isAlphanum# = { x -> malgo_is_alphanum x };
  def isAlphanum : Char -> Bool;
  def isAlphanum = { Char# x -> isTrue# (isAlphanum# x) };

  -- String operators
  foreign import malgo_string_length : String# -> Int64#;
  def lengthString# : String# -> Int64#;
  def lengthString# = { x -> malgo_string_length x };
  def lengthString : String -> Int64;
  def lengthString = { (String# str) -> Int64# (lengthString# str) };

  foreign import malgo_string_at : Int64# -> String# -> Char#;
  def atString# : Int64# -> String# -> Char#;
  def atString# = { i x -> malgo_string_at i x };
  def atString : Int64 -> String -> Char;
  def atString = { (Int64# i) (String# x) -> Char# (atString# i x) };

  foreign import malgo_string_cons : Char# -> String# -> String#;
  def consString# : Char# -> String# -> String#;
  def consString# = { c cs -> malgo_string_cons c cs };
  def consString : Char -> String -> String;
  def consString = { (Char# c) (String# cs) -> String# (consString# c cs) };

  foreign import malgo_string_append : String# -> String# -> String#;
  def appendString# : String# -> String# -> String#;
  def appendString# = { x y -> malgo_string_append x y };
  def appendString : String -> String -> String;
  def appendString = { (String# x) (String# y) -> String# (appendString# x y) };

  foreign import malgo_substring : String# -> Int64# -> Int64# -> String#;
  def substring# : String# -> Int64# -> Int64# -> String#;
  def substring# = { str start end -> malgo_substring str start end };
  def substring : String -> Int64 -> Int64 -> String;
  def substring = { (String# str) (Int64# start) (Int64# end) -> String# (substring# str start end) };

  foreign import malgo_int32_t_to_string : Int32# -> String#;
  def toStringInt32# : Int32# -> String#;
  def toStringInt32# = { x -> malgo_int32_t_to_string x };
  def toStringInt32 : Int32 -> String;
  def toStringInt32 = { Int32# x -> String# (toStringInt32# x) };

  foreign import malgo_int64_t_to_string : Int64# -> String#;
  def toStringInt64# : Int64# -> String#;
  def toStringInt64# = { x -> malgo_int64_t_to_string x };
  def toStringInt64 : Int64 -> String;
  def toStringInt64 = { Int64# x -> String# (toStringInt64# x) };

  foreign import malgo_float_to_string : Float# -> String#;
  def toStringFloat# : Float# -> String#;
  def toStringFloat# = { x -> malgo_float_to_string x };
  def toStringFloat : Float -> String;
  def toStringFloat = { Float# x -> String# (toStringFloat# x) };

  foreign import malgo_double_to_string : Double# -> String#;
  def toStringDouble# : Double# -> String#;
  def toStringDouble# = { x -> malgo_double_to_string x };
  def toStringDouble : Double -> String;
  def toStringDouble = { Double# x -> String# (toStringDouble# x) };

  foreign import malgo_char_to_string : Char# -> String#;
  def toStringChar# : Char# -> String#;
  def toStringChar# = { x -> malgo_char_to_string x };
  def toStringChar : Char -> String;
  def toStringChar = { Char# x -> String# (toStringChar# x) };


  -- IO functions
  foreign import malgo_exit_failure : () -> a;
  def exitFailure : () -> a;
  def exitFailure = { _ -> malgo_exit_failure () };

  foreign import malgo_newline : () -> ();
  def newline = { _ -> malgo_newline () };

  foreign import malgo_print_char : Char# -> ();
  def printChar# : Char# -> ();
  def printChar# = { x -> malgo_print_char x };
  def printChar : Char -> ();
  def printChar = { Char# x -> printChar# x };

  foreign import malgo_print_string : String# -> ();
  def printString# : String# -> ();
  def printString# = { x -> malgo_print_string x };
  def printString : String -> ();
  def printString = { String# x -> printString# x };

  foreign import malgo_flush : () -> ();
  def flush = { _ -> malgo_flush () };

  foreign import malgo_get_char : () -> Char#;
  def getChar = { _ -> Char# (malgo_get_char ()) };

  foreign import malgo_get_contents : () -> String#;
  def getContents = { _ -> String# (malgo_get_contents ()) };
}
