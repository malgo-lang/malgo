module Factorial = {
  module {..} = import Builtin
  module {..} = import Prelude
  
  infix 4 (==)
  def (==) = { x y -> eqInt64 x y }

  infixl 6 (-)
  def (-) = { x y -> subInt64 x y }

  infixl 7 (*)
  def (*) = { x y -> mulInt64 x y }

  def fact = { n -> factAcc n 1L }

  def factAcc = { n acc -> if (n == 0L) { acc } { factAcc (n - 1L) (n * acc) } }

  def main = {
    fact 5L |> toStringInt64 |> putStrLn
  }
}

-- Expected: 120
