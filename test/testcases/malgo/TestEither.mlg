module {..} = import "../../../runtime/malgo/Builtin.mlg"
module {..} = import "../../../runtime/malgo/Prelude.mlg"

data Either a b = Left a | Right b

def id = {x -> x}

def andThen =
  { _ (Left x) -> Left x,
    f (Right x) -> f x }

def main = {
  Right 1 |> { Right x -> putStr (toStringInt32 x), _ -> putStrLn "unreachable" };

  let x = Right 1;

  x |> andThen { x -> Right (addInt32 x 1) }
    |> andThen { y -> y |> toStringInt32 |> putStr |> Right };

  x |> andThen { _ -> Left "error" }
    |> andThen { x -> Right (addInt32 x 1) }
    |> { Left err -> putStrLn err,
         Right x -> x |> toStringInt32 |> putStrLn } 
}