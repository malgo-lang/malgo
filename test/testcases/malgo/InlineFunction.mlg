module InlineFunction = {
  module {..} = import Builtin
  module {..} = import Prelude

  infix 4 (<=)
  def (<=) = { x y -> leInt32 x y }

  infixl 6 (+)
  def (+) = { x y -> addInt32 x y }

  infixl 6 (-)
  def (-) = { x y -> subInt32 x y }

  def fix = { f x -> f (fix f) x }

  def main = {
    let fib = fix { f n ->
      if (n <= 1)
        { 1 }
        { f (n - 1) + f (n - 2) }
      };
    fib 5 |> toStringInt32 |> putStrLn
  }
}

-- Expected: 8
