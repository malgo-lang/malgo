module {..} = import Builtin
module {..} = import Prelude

data Eventually a = Done a
                  | NotYetDone { Eventually a }

type EventuallyBuilder a b = {
  bind : Eventually a -> (a -> Eventually b) -> Eventually b,
  return : a -> Eventually a,
}

def eventually : EventuallyBuilder a b
def eventually = {
  bind = eventuallyBind,
  return = Done,
}

def eventuallyBind : Eventually a -> (a -> Eventually b) -> Eventually b
def eventuallyBind =
  { (Done value) k -> k value,
    (NotYetDone work) k -> NotYetDone { eventuallyBind (work ()) k }
  }

def step =
  { Done value -> Done value,
    NotYetDone work -> (work ())
  }

def bind : EventuallyBuilder a b -> Eventually a -> (a -> Eventually b) -> Eventually b
def bind = { { bind = x, return = _ } -> x }

def return : EventuallyBuilder a b -> a -> Eventually a
def return = { { bind = _, return = x } -> x }

def comp : Eventually Int32
def comp =
  bind eventually (NotYetDone { Done (printString "1") }) { _ -> 
    bind eventually (NotYetDone { Done (printString "2") }) { _ ->
      return eventually 3 } }

def main : { () }
def main = {
  comp |> step;
  comp |> step |> step |> step
    |> { Done x -> printString (toStringInt32 x),
         NotYetDone _ -> printString "not yet" }
}