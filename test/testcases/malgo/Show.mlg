module {..} = import "../../../runtime/malgo/Builtin.mlg"
module {..} = import "../../../runtime/malgo/Prelude.mlg"

infixr 5 (<>)
def (<>) : String -> String -> String
def (<>) = { x y -> appendString x y }

type Show a = {
  show : a -> String,
}

def showInt32 : Show Int32
def showInt32 = {
  show = { x -> toStringInt32 x },
}

def show : Show a -> a -> String
def show = { { show = show } -> show }

def showTuple2 : Show a -> Show b -> Show {a, b}
def showTuple2 = {
  showDictA showDictB -> {
    show = { {a, b} ->
      "(" <> show showDictA a <> ", " <> show showDictB b <> ")"
    },
  }
}

def print : Show a -> a -> ()
def print = { showDict x -> printString (show showDict x) }

def main = { print (showTuple2 showInt32 showInt32) {1, 2} }
