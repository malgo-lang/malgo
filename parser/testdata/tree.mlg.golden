(infix infixl 6 -)
(def - (codata (clause (call # (var x) (var y)) (seq (prim sub (var x) (var y))))))
(def map (codata (clause (call # (var f) (symbol :Nil)) (seq (symbol :Nil))) (clause (call # (var f) (call (symbol :Cons) (var x) (var xs))) (seq (call (symbol :Cons) (call (var f) (var x)) (call (var map) (var f) (var xs)))))))
(def prune (codata (clause (access (call # (var x) (var t)) node) (seq (access (var t) node))) (clause (access (call # (literal 0) (var t)) children) (seq (symbol :Nil))) (clause (access (call # (var x) (var t)) children) (seq (call (var map) (call (var prune) (binary (var x) - (literal 1))) (access (var t) children))))))
(def tree (codata (clause (access # node) (seq (literal 1))) (clause (access # children) (seq (call (symbol :Cons) (var tree1) (call (symbol :Cons) (var tree2) (symbol :Nil)))))))
(def tree1 (codata (clause (access # node) (seq (literal 2))) (clause (access # children) (seq (symbol :Nil)))))
(def tree2 (codata (clause (access # node) (seq (literal 3))) (clause (access # children) (seq (call (symbol :Cons) (var tree) (symbol :Nil))))))
(def main (codata (clause (call #) (seq (call (var prune) (literal 2) (var tree))))))
