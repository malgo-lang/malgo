package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"strings"
)

// Example: `go run main.go -comment -in ../ast.go -out ../docs/ast.ebnf`.
func main() {
	var (
		comment    = flag.Bool("comment", false, "comment")
		dump       = flag.Bool("dump", false, "dump")
		inputFile  = flag.String("in", "", "input file")
		outputFile = flag.String("out", "", "output file")
	)
	flag.Parse()

	switch {
	case *comment:
		commentFile(*inputFile, *outputFile)
	case *dump:
		dumpFile(*inputFile)
	default:
		flag.Usage()
	}
}

// Get all comments from the file and print them.
func commentFile(in, out string) {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, in, nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	comments := make(map[ast.Node]*ast.CommentGroup)
	commentsList := make([]ast.Node, 0)
	ast.Inspect(node, func(node ast.Node) bool {
		switch node := node.(type) {
		case *ast.GenDecl:
			for _, spec := range node.Specs {
				comments[spec] = node.Doc
				commentsList = append(commentsList, spec)
			}
		case *ast.FuncDecl:
			comments[node] = node.Doc
			commentsList = append(commentsList, node)
		}

		return true
	})

	output, err := os.Create(out)
	if err != nil {
		panic(err)
	}
	defer output.Close()

	fmt.Fprintf(output, "(* Code generated by go generate; DO NOT EDIT. *)\n\n")

comments:
	for _, node := range commentsList {
		comment := comments[node]
		if comment == nil {
			continue
		}
		for _, c := range comment.List {
			if strings.Contains(c.Text, "tool:ignore") {
				continue comments
			}
		}
		str := strings.TrimSuffix(comment.Text(), "\n")
		switch node := node.(type) {
		case *ast.TypeSpec:
			fmt.Fprintf(output, "%s (* type %v *)\n\n", str, node.Name)
		case *ast.ValueSpec:
			fmt.Fprintf(output, "%s (* var", str)
			for _, name := range node.Names {
				fmt.Fprintf(output, " %v", name)
			}
			fmt.Fprintf(output, " *)\n\n")
		case *ast.FuncDecl:
			fmt.Fprintf(output, "%s (* func %v *)\n\n", str, node.Name)
		}
	}
}

func dumpFile(in string) {
	fset := new(token.FileSet)
	f, _ := parser.ParseFile(fset, in, nil, parser.ParseComments)
	ast.Print(fset, f)
}
