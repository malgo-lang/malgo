Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "f", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 22 } } ], [ AnyT ] :-> AnyT, Assign
    ( Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 25 } } )
    ( Let
     [ LocalDef
      { _variable = Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
        { name = "fun", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 24 } }, typ =
       [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
       [ Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "$_", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 23 } } ]
       ( Atom
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "x", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 22 } } ) ) ) } ]
     ( Atom
      ( Var
       ( Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 24 } } ) ) ) )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 27 } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "let", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 26 } }, typ = SumT
        [ Con Tuple [] ], _object = Pack
        ( SumT [ Con Tuple [] ] )
        ( Con Tuple [] ) [] } ]
      ( Atom
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 26 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 28 } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 25 } } ) )
       [ Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 27 } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 28 } } ) ) ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 29 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 33 } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 31 } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 30 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ StringT ] :-> AnyT, id = Id
          { name = "String#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( String "Hello" ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 30 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 32 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 31 } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 32 } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 34 } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "putStrLn", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 33 } } ) ] )
     ( Cast
      ( SumT [ Con Tuple [] ] )
      ( Var
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DeferLaw.mlg" ), sort = Temporal 34 } } ) ) ) ) ) ], extFuns = [] }