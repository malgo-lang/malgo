Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ AnyT,
      [ SumT [ Con Tuple [] ] ] :-> AnyT,
      [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
     { name = "if_curry", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 51 } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "true", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 52 } }, Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "t", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 53 } }, Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "_", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 54 } } ],
    [ AnyT,
     [ SumT [ Con Tuple [] ] ] :-> AnyT,
     [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = SumT
      [ Con
       ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
       ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
      { name = "scrutinee", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 78 } } )
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
       ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "true", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 52 } } ) ) )
    ( Switch
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
         ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
        { name = "scrutinee", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 78 } } ) )
     [
      ( Data "test/testcases/malgo/Test1.mlg.True", Destruct
       ( Var
        ( Meta
         { meta = SumT
          [ Con
           ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
           ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
          { name = "scrutinee", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 78 } } ) )
       ( Con ( Data "test/testcases/malgo/Test1.mlg.True" ) [] ) []
       ( Let
        [ LocalDef
         { _variable = Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 55 } }, typ = SumT
          [ Con Tuple [] ], _object = Pack
          ( SumT [ Con Tuple [] ] )
          ( Con Tuple [] ) [] } ]
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 57 } } )
         ( Call
          ( Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "t", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 53 } } ) )
          [ Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "let", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 55 } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 57 } } ) ) ) ) ) ),
      ( Data "test/testcases/malgo/Test1.mlg.False", Destruct
       ( Var
        ( Meta
         { meta = SumT
          [ Con
           ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
           ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
          { name = "scrutinee", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 78 } } ) )
       ( Con ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ) []
       ( Let
        [ LocalDef
         { _variable = Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 58 } }, typ = SumT
          [ Con Tuple [] ], _object = Pack
          ( SumT [ Con Tuple [] ] )
          ( Con Tuple [] ) [] } ]
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 60 } } )
         ( Call
          ( Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "_", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 54 } } ) )
          [ Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "let", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 58 } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 60 } } ) ) ) ) ) ) ] ( Error AnyT ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
        ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 39 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
       ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
        ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test1.mlg.True" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
         ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 39 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
        ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 40 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
       ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
        ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
         ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 40 } } ) ) ) ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 41 } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 41 } } ) ] ),
   ( Meta
    { meta = [ AnyT ] :->
     (
      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
      ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) ), id = Id
     { name = "if", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "true", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 42 } } ], [ AnyT ] :->
    (
     [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
     ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
       ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 62 } }, typ =
      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
      ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), _object = Fun
      [ Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
        { name = "t", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 43 } } ]
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta =
          [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 61 } }, typ =
         [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, _object = Fun
         [ Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "_", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 44 } } ]
         ( CallDirect
          ( Meta
           { meta =
            [ AnyT,
             [ SumT [ Con Tuple [] ] ] :-> AnyT,
             [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
            { name = "if_curry", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 51 } } )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "true", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 42 } } ), Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "t", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 43 } } ), Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "_", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 44 } } ) ] ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 61 } } ) ) ) ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
        ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 62 } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 63 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 64 } } )
    ( CallDirect
     ( Meta
      { meta = [] :-> AnyT, id = Id
       { name = "True", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } } ) [] )
    ( Assign
     ( Meta
      { meta =
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
       ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 65 } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :->
         (
          [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
          ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) ), id = Id
         { name = "if", moduleName = Artifact
          ( ArtifactPath
           { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath
           { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 64 } } ) ] )
     ( Assign
      ( Meta
       { meta =
        [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :->
        (
         [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ] ), id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 66 } } )
      ( Cast
       (
        [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :->
        (
         [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ] ) )
       ( Var
        ( Meta
         { meta =
          [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
          ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 65 } } ) ) )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 69 } }, typ =
         [ SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ], _object = Fun
         [ Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "$_", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 67 } } ]
         ( Assign
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 68 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ StringT ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "malgo_print_string", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } } ) )
           [ Unboxed ( String "True" ) ] )
          ( Cast
           ( SumT [ Con Tuple [] ] )
           ( Var
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 68 } } ) ) ) ) } ]
       ( Assign
        ( Meta
         { meta =
          [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 71 } } )
        ( Call
         ( Var
          ( Meta
           { meta =
            [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :->
            (
             [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
             [ Con Tuple [] ] ), id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 66 } } ) )
         [ Var
          ( Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :-> SumT
            [ Con Tuple [] ], id = Id
            { name = "fun", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 69 } } ) ] )
        ( Assign
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 72 } } )
         ( Cast
          (
           [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ] )
          ( Var
           ( Meta
            { meta =
             [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 71 } } ) ) )
         ( Let
          [ LocalDef
           { _variable = Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 75 } }, typ =
            [ SumT [ Con Tuple [] ] ] :-> SumT
            [ Con Tuple [] ], _object = Fun
            [ Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "$_", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 73 } } ]
            ( Assign
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 74 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ StringT ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "malgo_print_string", moduleName = Artifact
                  ( ArtifactPath
                   { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = External } } ) )
              [ Unboxed ( String "False" ) ] )
             ( Cast
              ( SumT [ Con Tuple [] ] )
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath
                   { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 74 } } ) ) ) ) } ]
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 77 } } )
           ( Call
            ( Var
             ( Meta
              { meta =
               [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 72 } } ) )
            [ Var
             ( Meta
              { meta =
               [ SumT [ Con Tuple [] ] ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "fun", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 75 } } ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test1.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test1.mlg", relPath = "test/testcases/malgo/Test1.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test1.mlg" } ), sort = Temporal 77 } } ) ) ) ) ) ) ) ) ) ) ) ], extFuns =
  [ ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ) ] }