Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 30 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 30 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 31 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 31 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False1", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 32 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 32 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True1", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 33 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 33 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False2", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 34 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 34 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True2", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 35 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 35 } } ) ) ) ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 36 } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 36 } } ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
     { name = "malgo_exit_failure", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 37 } } ],
    [ SumT [ Con Tuple [] ] ] :-> AnyT, RawCall "malgo_exit_failure"
    ( [ SumT [ Con Tuple [] ] ] :-> AnyT )
    [ Var
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 37 } } ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 38 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "fun", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 44 } }, typ = [ AnyT ] :-> SumT
      [ Con Tuple [] ], _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "true", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 39 } } ]
      ( Assign
       ( Meta
        { meta = SumT
         [ Con
          ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
          ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
         { name = "scrutinee", moduleName = Artifact
          ( ArtifactPath
           { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 58 } } )
       ( Cast
        ( SumT
         [ Con
          ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
          ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ] )
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "true", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 39 } } ) ) )
       ( Switch
        ( Var
         ( Meta
          { meta = SumT
           [ Con
            ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
            ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
           { name = "scrutinee", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 58 } } ) )
        [
         ( Data "test/testcases/malgo/NestedMatch.mlg.False", Destruct
          ( Var
           ( Meta
            { meta = SumT
             [ Con
              ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
              ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
             { name = "scrutinee", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 58 } } ) )
          ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [] ) []
          ( Let
           [ LocalDef
            { _variable = Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "let", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 40 } }, typ = SumT
             [ Con Tuple [] ], _object = Pack
             ( SumT [ Con Tuple [] ] )
             ( Con Tuple [] ) [] } ]
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 42 } } )
            ( Call
             ( Var
              ( Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "malgo_exit_failure", moduleName = Artifact
                 ( ArtifactPath
                  { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "let", moduleName = Artifact
                 ( ArtifactPath
                  { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 40 } } ) ] )
            ( Cast
             ( SumT [ Con Tuple [] ] )
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath
                  { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 42 } } ) ) ) ) ) ),
         ( Data "test/testcases/malgo/NestedMatch.mlg.True", Destruct
          ( Var
           ( Meta
            { meta = SumT
             [ Con
              ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
              ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
             { name = "scrutinee", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 58 } } ) )
          ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ) []
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 43 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ StringT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "malgo_print_string", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } } ) )
            [ Unboxed ( String "OK" ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 43 } } ) ) ) ) ) ]
        ( Error ( SumT [ Con Tuple [] ] ) ) ) ) } ]
    ( Let
     [ LocalDef
      { _variable = Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "fun", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 47 } }, typ = [ AnyT ] :-> AnyT, _object = Fun
       [ Meta
        { meta = AnyT, id = Id
         { name = "true1", moduleName = Artifact
          ( ArtifactPath
           { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 46 } } ]
       ( Assign
        ( Meta
         { meta = SumT
          [ Con
           ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
           ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
          { name = "scrutinee", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 59 } } )
        ( Cast
         ( SumT
          [ Con
           ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
           ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ] )
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "true1", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 46 } } ) ) )
        ( Switch
         ( Var
          ( Meta
           { meta = SumT
            [ Con
             ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
             ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
            { name = "scrutinee", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 59 } } ) )
         [
          ( Data "test/testcases/malgo/NestedMatch.mlg.False1", Destruct
           ( Var
            ( Meta
             { meta = SumT
              [ Con
               ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
               ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
              { name = "scrutinee", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 59 } } ) )
           ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [] ) []
           ( CallDirect
            ( Meta
             { meta = [] :-> AnyT, id = Id
              { name = "True", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } } ) [] ) ),
          ( Data "test/testcases/malgo/NestedMatch.mlg.True1", Destruct
           ( Var
            ( Meta
             { meta = SumT
              [ Con
               ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
               ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
              { name = "scrutinee", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 59 } } ) )
           ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ) []
           ( CallDirect
            ( Meta
             { meta = [] :-> AnyT, id = Id
              { name = "False", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } } ) [] ) ) ] ( Error AnyT ) ) ) } ]
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath
           { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 50 } }, typ = [ AnyT ] :-> AnyT, _object = Fun
        [ Meta
         { meta = AnyT, id = Id
          { name = "true2", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 49 } } ]
        ( Assign
         ( Meta
          { meta = SumT
           [ Con
            ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
            ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
           { name = "scrutinee", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 60 } } )
         ( Cast
          ( SumT
           [ Con
            ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
            ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ] )
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "true2", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 49 } } ) ) )
         ( Switch
          ( Var
           ( Meta
            { meta = SumT
             [ Con
              ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
              ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
             { name = "scrutinee", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 60 } } ) )
          [
           ( Data "test/testcases/malgo/NestedMatch.mlg.False2", Destruct
            ( Var
             ( Meta
              { meta = SumT
               [ Con
                ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
                ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
               { name = "scrutinee", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 60 } } ) )
            ( Con
             ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [] ) []
            ( CallDirect
             ( Meta
              { meta = [] :-> AnyT, id = Id
               { name = "True1", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } } ) [] ) ),
           ( Data "test/testcases/malgo/NestedMatch.mlg.True2", Destruct
            ( Var
             ( Meta
              { meta = SumT
               [ Con
                ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
                ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
               { name = "scrutinee", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 60 } } ) )
            ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ) []
            ( CallDirect
             ( Meta
              { meta = [] :-> AnyT, id = Id
               { name = "False1", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } } ) [] ) ) ] ( Error AnyT ) ) ) } ]
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath
           { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 52 } } )
       ( CallDirect
        ( Meta
         { meta = [] :-> AnyT, id = Id
          { name = "True2", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = External } } ) [] )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 53 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "fun", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 50 } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 52 } } ) ] )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 54 } } )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 53 } } ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 55 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 47 } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 54 } } ) ] )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 56 } } )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 55 } } ) ) )
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath
                { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 57 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ AnyT ] :-> SumT
                [ Con Tuple [] ], id = Id
                { name = "fun", moduleName = Artifact
                 ( ArtifactPath
                  { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 44 } } ) )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath
                  { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 56 } } ) ] )
            ( Cast
             ( SumT [ Con Tuple [] ] )
             ( Var
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath
                  { rawPath = "./test/testcases/malgo/NestedMatch.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/NestedMatch.mlg", relPath = "test/testcases/malgo/NestedMatch.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/NestedMatch.mlg" } ), sort = Temporal 57 } } ) ) ) ) ) ) ) ) ) ) ) ) ], extFuns =
  [
   ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ),
   ( "malgo_exit_failure", [ SumT [ Con Tuple [] ] ] :-> AnyT ) ] }