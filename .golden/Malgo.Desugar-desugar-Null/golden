Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
     { name = "|>_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "f", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ],
    [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
    ( Call
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) )
     [ Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "x", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta =
     [ AnyT, AnyT ] :-> AnyT, id = Id
     { name = "Cons_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ],
    [ AnyT, AnyT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Cons" )
        [ AnyT, AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.Cons" )
       [ AnyT, AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Cons" )
        [ AnyT, AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/Null.mlg.Cons" ) [ AnyT, AnyT ] )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ), Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
         ( Data "test/testcases/malgo/Null.mlg.Cons" )
         [ AnyT, AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "Nothing", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
         ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "Just", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
         ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.True" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.True" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.True" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Null.mlg.False" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
         ( Data "test/testcases/malgo/Null.mlg.True" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.True" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.True" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.True" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Null.mlg.True" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
         ( Data "test/testcases/malgo/Null.mlg.True" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "Nil", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Cons" )
        [ AnyT, AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.Cons" )
       [ AnyT, AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Cons" )
        [ AnyT, AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/Null.mlg.Nil" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
         ( Data "test/testcases/malgo/Null.mlg.Cons" )
         [ AnyT, AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "Cons", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ], [ AnyT ] :->
    ( [ AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "p", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, AnyT ] :-> AnyT, id = Id
         { name = "Cons_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
     { name = "malgo_exit_failure", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> AnyT, RawCall "malgo_exit_failure"
    ( [ SumT [ Con Tuple [] ] ] :-> AnyT )
    [ Var
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
     { name = "|>", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ], [ AnyT ] :->
    ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ =
      [ [ AnyT ] :-> AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "|>_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "mHead", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "nil", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.Cons" )
       [ AnyT, AnyT ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "nil", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) )
    [ Unpack
     ( Con ( Data "test/testcases/malgo/Null.mlg.Nil" ) [] ) []
     ( CallDirect
      ( Meta
       { meta = [] :-> AnyT, id = Id
        { name = "Nothing", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) [] ), Unpack
     ( Con ( Data "test/testcases/malgo/Null.mlg.Cons" ) [ AnyT, AnyT ] )
     [ Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ]
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "Just", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) ] ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "isNothing", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "nothing", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "nothing", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) )
    [ Unpack
     ( Con ( Data "test/testcases/malgo/Null.mlg.Nothing" ) [] ) []
     ( CallDirect
      ( Meta
       { meta = [] :-> AnyT, id = Id
        { name = "True", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) [] ), Unpack
     ( Con ( Data "test/testcases/malgo/Null.mlg.Just" ) [ AnyT ] )
     [ Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ]
     ( CallDirect
      ( Meta
       { meta = [] :-> AnyT, id = Id
        { name = "False", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) [] ) ] ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "null", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "as", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "mHead", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "as", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "isNothing", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
        ( CallDirect
         ( Meta
          { meta = [] :-> AnyT, id = Id
           { name = "True", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) [] )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :->
             ( [ AnyT ] :-> AnyT ), id = Id
             { name = "Cons", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
         ( Cast
          ( [ AnyT ] :-> AnyT )
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
          ( CallDirect
           ( Meta
            { meta = [] :-> AnyT, id = Id
             { name = "True", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) [] )
          ( Assign
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :->
               ( [ AnyT ] :-> AnyT ), id = Id
               { name = "Cons", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
           ( Cast
            ( [ AnyT ] :-> AnyT )
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
          ( CallDirect
           ( Meta
            { meta = [] :-> AnyT, id = Id
             { name = "Nil", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) [] )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "null", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) )
     ( Assign
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :->
          ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
          { name = "|>", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = AnyT, id = Id
          { name = "false", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ]
        ( Match
         ( Cast
          ( SumT
           [ Con
            ( Data "test/testcases/malgo/Null.mlg.False" ) [], Con
            ( Data "test/testcases/malgo/Null.mlg.True" ) [] ] )
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "false", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) )
         [ Unpack
          ( Con ( Data "test/testcases/malgo/Null.mlg.False" ) [] ) []
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ StringT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "malgo_print_string", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
            [ Unboxed ( String "OK" ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ), Unpack
          ( Con ( Data "test/testcases/malgo/Null.mlg.True" ) [] ) []
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
           ( Let
            [ LocalDef
             { _variable = Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "let", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = SumT
              [ Con Tuple [] ], _object = Pack
              ( SumT [ Con Tuple [] ] )
              ( Con Tuple [] ) [] } ]
            ( Atom
             ( Var
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "let", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
            ( Call
             ( Var
              ( Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "malgo_exit_failure", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
            ( Cast
             ( SumT [ Con Tuple [] ] )
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) ) ) ], extFuns =
  [
   ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ),
   ( "malgo_exit_failure", [ SumT [ Con Tuple [] ] ] :-> AnyT ) ] }
DsState
 { _nameEnv = fromList
  [
   ( Id
    { name = "isNothing", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "isNothing", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "False", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Meta
    { meta = AnyT, id = Id
     { name = "p", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "f", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "f", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "main", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "as", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Meta
    { meta = AnyT, id = Id
     { name = "as", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "True", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "|>", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [ AnyT ] :->
     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
     { name = "|>", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "Nothing", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "Nothing", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Meta
    { meta = AnyT, id = Id
     { name = "p", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "Nil", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "Nil", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "Just", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "Just", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "null", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "null", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "$_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Meta
    { meta = SumT
     [ Con Tuple [] ], id = Id
     { name = "$_", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "Cons", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [ AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "Cons", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "p", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Meta
    { meta = AnyT, id = Id
     { name = "p", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "malgo_print_string", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "mHead", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "mHead", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "malgo_exit_failure", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
     { name = "malgo_exit_failure", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } } ),
   ( Id
    { name = "x", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Meta
    { meta = AnyT, id = Id
     { name = "x", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ], _signatureMap = fromList
  [
   ( Id
    { name = "isNothing", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "a", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyArr
     ( TyApp
      ( TyCon
       ( Id
        { name = "Maybe", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
      ( TyVar
       ( Id
        { name = "a", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) )
     ( TyCon
      ( Id
       { name = "Bool", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) ) ) ),
   ( Id
    { name = "False", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall []
    ( TyCon
     ( Id
      { name = "Bool", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) ) ),
   ( Id
    { name = "_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Forall []
    ( TyVar
     ( Id
      { name = "t", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ),
   ( Id
    { name = "f", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Forall []
    ( TyArr
     ( TyVar
      ( Id
       { name = "t", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) )
     ( TyVar
      ( Id
       { name = "t", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ),
   ( Id
    { name = "main", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall []
    ( TyArr ( TyTuple 0 ) ( TyTuple 0 ) ) ),
   ( Id
    { name = "as", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Forall []
    ( TyApp
     ( TyCon
      ( Id
       { name = "List", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
     ( TyVar
      ( Id
       { name = "a", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ),
   ( Id
    { name = "True", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall []
    ( TyCon
     ( Id
      { name = "Bool", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) ) ),
   ( Id
    { name = "|>", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "a", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Id
     { name = "b", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyArr
     ( TyVar
      ( Id
       { name = "a", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) )
     ( TyArr
      ( TyArr
       ( TyVar
        ( Id
         { name = "a", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) )
       ( TyVar
        ( Id
         { name = "b", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) )
      ( TyVar
       ( Id
        { name = "b", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ) ),
   ( Id
    { name = "Nothing", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyApp
     ( TyCon
      ( Id
       { name = "Maybe", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
     ( TyVar
      ( Id
       { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ),
   ( Id
    { name = "_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Forall []
    ( TyApp
     ( TyCon
      ( Id
       { name = "List", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
     ( TyVar
      ( Id
       { name = "t", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ),
   ( Id
    { name = "Nil", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyApp
     ( TyCon
      ( Id
       { name = "List", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
     ( TyVar
      ( Id
       { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ),
   ( Id
    { name = "Just", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyArr
     ( TyVar
      ( Id
       { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) )
     ( TyApp
      ( TyCon
       ( Id
        { name = "Maybe", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
      ( TyVar
       ( Id
        { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ) ),
   ( Id
    { name = "null", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "a", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyArr
     ( TyApp
      ( TyCon
       ( Id
        { name = "List", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
      ( TyVar
       ( Id
        { name = "a", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) )
     ( TyCon
      ( Id
       { name = "Bool", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) ) ) ),
   ( Id
    { name = "$_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Forall []
    ( TyTuple 0 ) ),
   ( Id
    { name = "Cons", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyArr
     ( TyVar
      ( Id
       { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) )
     ( TyArr
      ( TyApp
       ( TyCon
        ( Id
         { name = "List", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
       ( TyVar
        ( Id
         { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) )
      ( TyApp
       ( TyCon
        ( Id
         { name = "List", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
       ( TyVar
        ( Id
         { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ) ) ),
   ( Id
    { name = "p", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Forall []
    ( TyVar
     ( Id
      { name = "t", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ),
   ( Id
    { name = "malgo_print_string", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall []
    ( TyArr ( TyPrim StringT ) ( TyTuple 0 ) ) ),
   ( Id
    { name = "mHead", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "a", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyArr
     ( TyApp
      ( TyCon
       ( Id
        { name = "List", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
      ( TyVar
       ( Id
        { name = "a", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) )
     ( TyApp
      ( TyCon
       ( Id
        { name = "Maybe", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
      ( TyVar
       ( Id
        { name = "a", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ) ),
   ( Id
    { name = "malgo_exit_failure", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
    [ Id
     { name = "a", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
    ( TyArr
     ( TyTuple 0 )
     ( TyVar
      ( Id
       { name = "a", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ),
   ( Id
    { name = "x", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, Forall []
    ( TyVar
     ( Id
      { name = "t", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ], _typeDefMap = fromList
  [
   ( Id
    { name = "b", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "b", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ), _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Double#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim DoubleT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Int32#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim Int32T, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Ptr#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPtr, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Char#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim CharT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Maybe", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, TypeDef
    { _typeConstructor = TyCon
     ( Id
      { name = "Maybe", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ), _typeParameters =
     [ Id
      { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ], _valueConstructors =
     [
      ( Id
       { name = "Nothing", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
       [ Id
        { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
       ( TyApp
        ( TyCon
         ( Id
          { name = "Maybe", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
        ( TyVar
         ( Id
          { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ),
      ( Id
       { name = "Just", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
       [ Id
        { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
       ( TyArr
        ( TyVar
         ( Id
          { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) )
        ( TyApp
         ( TyCon
          ( Id
           { name = "Maybe", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
         ( TyVar
          ( Id
           { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ) ) ] } ),
   ( Id
    { name = "Int64#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim Int64T, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "a", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ), _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "String#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim StringT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "a", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ), _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "a", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ), _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "List", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, TypeDef
    { _typeConstructor = TyCon
     ( Id
      { name = "List", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ), _typeParameters =
     [ Id
      { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ], _valueConstructors =
     [
      ( Id
       { name = "Nil", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
       [ Id
        { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
       ( TyApp
        ( TyCon
         ( Id
          { name = "List", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
        ( TyVar
         ( Id
          { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ),
      ( Id
       { name = "Cons", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall
       [ Id
        { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ]
       ( TyArr
        ( TyVar
         ( Id
          { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) )
        ( TyArr
         ( TyApp
          ( TyCon
           ( Id
            { name = "List", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
          ( TyVar
           ( Id
            { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) )
         ( TyApp
          ( TyCon
           ( Id
            { name = "List", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) )
          ( TyVar
           ( Id
            { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ) ) ) ) ) ) ] } ),
   ( Id
    { name = "Float#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim FloatT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "a", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ), _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "a", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ), _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Bool", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, TypeDef
    { _typeConstructor = TyCon
     ( Id
      { name = "Bool", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ), _typeParameters = [], _valueConstructors =
     [
      ( Id
       { name = "False", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall []
       ( TyCon
        ( Id
         { name = "Bool", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) ) ),
      ( Id
       { name = "True", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, Forall []
       ( TyCon
        ( Id
         { name = "Bool", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External } ) ) ) ] } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ), _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal } ), _typeParameters = [], _valueConstructors = [] } ) ], _kindCtx = fromList
  [
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Double#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Int32#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "b", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kb", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Ptr#", moduleName = ModuleName "Builtin", sort = External }, TyArr TYPE TYPE ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Char#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Maybe", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, TyArr TYPE TYPE ),
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Int64#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "String#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "b", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kb", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "List", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = External }, TyArr TYPE TYPE ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "test/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "ktest/testcases/malgo/Null.mlg.#a_0", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Float#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "b", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kb", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } ) ) ], _globalDefs =
  [ FunDef
   ( Meta
    { meta =
     [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
     { name = "|>_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
   [ Meta
    { meta = AnyT, id = Id
     { name = "x", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "f", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ]
   ( [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT )
   ( Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
    ( Call
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) )
     [ Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "x", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] )
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ), FunDef
   ( Meta
    { meta =
     [ AnyT, AnyT ] :-> AnyT, id = Id
     { name = "Cons_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } )
   [ Meta
    { meta = AnyT, id = Id
     { name = "p", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, Meta
    { meta = AnyT, id = Id
     { name = "p", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ]
   ( [ AnyT, AnyT ] :-> AnyT )
   ( Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Cons" )
        [ AnyT, AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
       ( Data "test/testcases/malgo/Null.mlg.Cons" )
       [ AnyT, AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Null.mlg.Cons" )
        [ AnyT, AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/Null.mlg.Cons" ) [ AnyT, AnyT ] )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ), Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Null.mlg.Nil" ) [], Con
         ( Data "test/testcases/malgo/Null.mlg.Cons" )
         [ AnyT, AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Null.mlg" ), sort = Temporal } } ) ) ) ) ], globalClosures = fromList [] }