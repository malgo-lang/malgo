Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ Int64T, Int64T ] :-> Int64T, id = Id
     { name = "+#_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 76 } },
    [ Meta
     { meta = Int64T, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 77 } }, Meta
     { meta = Int64T, id = Id
      { name = "y", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 78 } } ],
    [ Int64T, Int64T ] :-> Int64T, Assign
    ( Meta
     { meta = [ Int64T ] :-> Int64T, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 80 } } )
    ( Assign
     ( Meta
      { meta = [ Int64T ] :-> Int64T, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 79 } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ Int64T ] :->
         ( [ Int64T ] :-> Int64T ), id = Id
         { name = "addInt64#", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = Int64T, id = Id
         { name = "x", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 77 } } ) ] )
     ( Cast
      ( [ Int64T ] :-> Int64T )
      ( Var
       ( Meta
        { meta = [ Int64T ] :-> Int64T, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 79 } } ) ) ) )
    ( Assign
     ( Meta
      { meta = Int64T, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 81 } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ Int64T ] :-> Int64T, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 80 } } ) )
      [ Var
       ( Meta
        { meta = Int64T, id = Id
         { name = "y", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 78 } } ) ] )
     ( Cast Int64T
      ( Var
       ( Meta
        { meta = Int64T, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 81 } } ) ) ) ) ),
   ( Meta
    { meta =
     [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
     { name = "|>_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 53 } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 54 } }, Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "f", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 55 } } ],
    [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 56 } } )
    ( Call
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 55 } } ) )
     [ Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "x", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 54 } } ) ] )
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 56 } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
     { name = "|>", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 50 } } ], [ AnyT ] :->
    ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 57 } }, typ =
      [ [ AnyT ] :-> AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 51 } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "|>_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 53 } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 50 } } ), Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 51 } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 57 } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 58 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 62 } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 60 } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 59 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ Int64T ] :-> AnyT, id = Id
          { name = "Int64#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( Int64 1 ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 59 } } ) ) ) )
     ( Assign
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 61 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :->
          ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
          { name = "|>", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 60 } } ) ] )
      ( Cast
       ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 61 } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 69 } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 68 } }, typ = [ AnyT ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = AnyT, id = Id
          { name = "int64#", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 63 } } ]
        ( Match
         ( Cast
          ( SumT
           [ Con ( Data "runtime/malgo/Builtin.mlg.Int64#" ) [ Int64T ] ] )
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "int64#", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 63 } } ) ) )
         [ Unpack
          ( Con ( Data "runtime/malgo/Builtin.mlg.Int64#" ) [ Int64T ] )
          [ Meta
           { meta = Int64T, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 64 } } ]
          ( Assign
           ( Meta
            { meta = StringT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 66 } } )
           ( Assign
            ( Meta
             { meta = StringT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 65 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ Int64T ] :-> StringT, id = Id
                { name = "toStringInt64#", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = Int64T, id = Id
                { name = "p", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 64 } } ) ] )
            ( Cast StringT
             ( Var
              ( Meta
               { meta = StringT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 65 } } ) ) ) )
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 67 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ StringT ] :-> SumT
                [ Con Tuple [] ], id = Id
                { name = "printString#", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = StringT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 66 } } ) ] )
            ( Cast
             ( SumT [ Con Tuple [] ] )
             ( Var
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 67 } } ) ) ) ) ) ] ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 68 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 70 } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 62 } } ) )
       [ Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 69 } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 70 } } ) ) ) ) ) ),
   ( Meta
    { meta = [ Int64T ] :->
     ( [ Int64T ] :-> Int64T ), id = Id
     { name = "+#", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = External } },
    [ Meta
     { meta = Int64T, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 71 } } ], [ Int64T ] :->
    ( [ Int64T ] :-> Int64T ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ Int64T ] :-> Int64T, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 82 } }, typ = [ Int64T ] :-> Int64T, _object = Fun
      [ Meta
       { meta = Int64T, id = Id
        { name = "y", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 72 } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ Int64T, Int64T ] :-> Int64T, id = Id
         { name = "+#_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 76 } } )
       [ Var
        ( Meta
         { meta = Int64T, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 71 } } ), Var
        ( Meta
         { meta = Int64T, id = Id
          { name = "y", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 72 } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ Int64T ] :-> Int64T, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test0.mlg" ), sort = Temporal 82 } } ) ) ) ) ], extFuns = [] }