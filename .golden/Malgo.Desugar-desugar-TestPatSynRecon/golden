Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ Int64T, Int64T ] :-> Int64T, id = Id
     { name = "+#_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } },
    [ Meta
     { meta = Int64T, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } }, Meta
     { meta = Int64T, id = Id
      { name = "y", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ],
    [ Int64T, Int64T ] :-> Int64T, Assign
    ( Meta
     { meta = [ Int64T ] :-> Int64T, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = [ Int64T ] :-> Int64T, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ Int64T ] :->
         ( [ Int64T ] :-> Int64T ), id = Id
         { name = "addInt64#", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = Int64T, id = Id
         { name = "x", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
     ( Cast
      ( [ Int64T ] :-> Int64T )
      ( Var
       ( Meta
        { meta = [ Int64T ] :-> Int64T, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) )
    ( Assign
     ( Meta
      { meta = Int64T, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ Int64T ] :-> Int64T, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) )
      [ Var
       ( Meta
        { meta = Int64T, id = Id
         { name = "y", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
     ( Cast Int64T
      ( Var
       ( Meta
        { meta = Int64T, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) ),
   ( Meta
    { meta = [ Int64T ] :->
     ( [ Int64T ] :-> Int64T ), id = Id
     { name = "+#", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = External } },
    [ Meta
     { meta = Int64T, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ], [ Int64T ] :->
    ( [ Int64T ] :-> Int64T ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ Int64T ] :-> Int64T, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } }, typ = [ Int64T ] :-> Int64T, _object = Fun
      [ Meta
       { meta = Int64T, id = Id
        { name = "y", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ Int64T, Int64T ] :-> Int64T, id = Id
         { name = "+#_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = Int64T, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = Int64T, id = Id
          { name = "y", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ Int64T ] :-> Int64T, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "sum", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "cons", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "runtime/malgo/Prelude.mlg.Nil" ) [], Con
       ( Data "runtime/malgo/Prelude.mlg.Cons" )
       [ AnyT, AnyT ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "cons", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) )
    [ Unpack
     ( Con ( Data "runtime/malgo/Prelude.mlg.Nil" ) [] ) []
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ Int64T ] :-> AnyT, id = Id
          { name = "Int64#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( Int64 0 ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ), Unpack
     ( Con ( Data "runtime/malgo/Prelude.mlg.Cons" ) [ AnyT, AnyT ] )
     [ Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } }, Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ]
     ( Match
      ( Cast
       ( SumT [ Con ( Data "runtime/malgo/Builtin.mlg.Int64#" ) [ Int64T ] ] )
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) )
      [ Unpack
       ( Con ( Data "runtime/malgo/Builtin.mlg.Int64#" ) [ Int64T ] )
       [ Meta
        { meta = Int64T, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ]
       ( Assign
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "sum", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "p", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
          ( Cast AnyT
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) )
         ( Assign
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
              { name = "|>", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
         ( Let
          [ LocalDef
           { _variable = Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
            [ Meta
             { meta = AnyT, id = Id
              { name = "int64#", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ]
            ( Match
             ( Cast
              ( SumT
               [ Con ( Data "runtime/malgo/Builtin.mlg.Int64#" ) [ Int64T ] ] )
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "int64#", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) )
             [ Unpack
              ( Con ( Data "runtime/malgo/Builtin.mlg.Int64#" ) [ Int64T ] )
              [ Meta
               { meta = Int64T, id = Id
                { name = "p", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ]
              ( Assign
               ( Meta
                { meta = Int64T, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
               ( Assign
                ( Meta
                 { meta = [ Int64T ] :-> Int64T, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
                ( Assign
                 ( Meta
                  { meta = [ Int64T ] :-> Int64T, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ Int64T ] :->
                     ( [ Int64T ] :-> Int64T ), id = Id
                     { name = "+#", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = External } } ) )
                  [ Var
                   ( Meta
                    { meta = Int64T, id = Id
                     { name = "p", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
                 ( Cast
                  ( [ Int64T ] :-> Int64T )
                  ( Var
                   ( Meta
                    { meta = [ Int64T ] :-> Int64T, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) )
                ( Assign
                 ( Meta
                  { meta = Int64T, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ Int64T ] :-> Int64T, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) )
                  [ Var
                   ( Meta
                    { meta = Int64T, id = Id
                     { name = "p", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
                 ( Cast Int64T
                  ( Var
                   ( Meta
                    { meta = Int64T, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) )
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta = [ Int64T ] :-> AnyT, id = Id
                    { name = "Int64#", moduleName = Artifact
                     ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                 [ Var
                  ( Meta
                   { meta = Int64T, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
                ( Cast AnyT
                 ( Var
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) } ]
          ( Atom
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) )
           [ Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
          ( Cast AnyT
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) ) ) ] ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ Int64T ] :-> AnyT, id = Id
             { name = "Int64#", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
          [ Unboxed ( Int64 1 ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :->
             ( [ AnyT ] :-> AnyT ), id = Id
             { name = "Cons", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
         ( Cast
          ( [ AnyT ] :-> AnyT )
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ Int64T ] :-> AnyT, id = Id
               { name = "Int64#", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
            [ Unboxed ( Int64 2 ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :->
               ( [ AnyT ] :-> AnyT ), id = Id
               { name = "Cons", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
           ( Cast
            ( [ AnyT ] :-> AnyT )
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
          ( CallDirect
           ( Meta
            { meta = [] :-> AnyT, id = Id
             { name = "Nil", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) [] )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "sum", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) )
     ( Assign
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :->
          ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
          { name = "|>", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = AnyT, id = Id
          { name = "i", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ]
        ( Assign
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "printInt64", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "i", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
         ( Cast
          ( SumT [ Con Tuple [] ] )
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPatSynRecon.mlg" ), sort = Temporal } } ) ) ) ) ) ) ], extFuns = [] }