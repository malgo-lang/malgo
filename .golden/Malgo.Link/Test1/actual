(()
   ((define
       ($Test1.if_curry_xxx $Test1.true_xxx $Test1.t_xxx $Test1.__xxx)
       (->
          (Any# (-> ((sum (con Tuple#))) Any#) (-> ((sum (con Tuple#))) Any#))
          Any#)
       (=
          $Test1.scrutinee_xxx
          (cast
             (sum
                (con test/testcases/malgo/Test1.mlg.True)
                (con test/testcases/malgo/Test1.mlg.False))
             $Test1.true_xxx)
          (switch
             $Test1.scrutinee_xxx
             (test/testcases/malgo/Test1.mlg.True
                (destruct
                   $Test1.scrutinee_xxx
                   (con test/testcases/malgo/Test1.mlg.True)
                   ()
                   (let
                      (($Test1.let_xxx
                          (sum (con Tuple#))
                          (pack (sum (con Tuple#)) (con Tuple#))))
                      (=
                         $Test1.d_xxx
                         (call $Test1.t_xxx $Test1.let_xxx)
                         (cast Any# $Test1.d_xxx)))))
             (test/testcases/malgo/Test1.mlg.False
                (destruct
                   $Test1.scrutinee_xxx
                   (con test/testcases/malgo/Test1.mlg.False)
                   ()
                   (let
                      (($Test1.let_xxx
                          (sum (con Tuple#))
                          (pack (sum (con Tuple#)) (con Tuple#))))
                      (=
                         $Test1.d_xxx
                         (call $Test1.__xxx $Test1.let_xxx)
                         (cast Any# $Test1.d_xxx)))))
             (ERROR Any#))))
      (define
         (True)
         (-> () Any#)
         (let
            (($Test1.let_xxx
                (sum
                   (con test/testcases/malgo/Test1.mlg.True)
                   (con test/testcases/malgo/Test1.mlg.False))
                (pack
                   (sum
                      (con test/testcases/malgo/Test1.mlg.True)
                      (con test/testcases/malgo/Test1.mlg.False))
                   (con test/testcases/malgo/Test1.mlg.True))))
            (cast Any# $Test1.let_xxx)))
      (define
         (False)
         (-> () Any#)
         (let
            (($Test1.let_xxx
                (sum
                   (con test/testcases/malgo/Test1.mlg.True)
                   (con test/testcases/malgo/Test1.mlg.False))
                (pack
                   (sum
                      (con test/testcases/malgo/Test1.mlg.True)
                      (con test/testcases/malgo/Test1.mlg.False))
                   (con test/testcases/malgo/Test1.mlg.False))))
            (cast Any# $Test1.let_xxx)))
      (define
         (malgo_print_string $Test1.p_xxx)
         (-> (String#) (sum (con Tuple#)))
         (raw malgo_print_string (-> (String#) (sum (con Tuple#))) $Test1.p_xxx))
      (define
         (if $Test1.true_xxx)
         (->
            (Any#)
            (->
               ((-> ((sum (con Tuple#))) Any#))
               (-> ((-> ((sum (con Tuple#))) Any#)) Any#)))
         (let
            (($Test1.let_xxx
                (->
                   ((-> ((sum (con Tuple#))) Any#))
                   (-> ((-> ((sum (con Tuple#))) Any#)) Any#))
                (fun
                   ($Test1.t_xxx)
                   (let
                      (($Test1.let_xxx
                          (-> ((-> ((sum (con Tuple#))) Any#)) Any#)
                          (fun
                             ($Test1.__xxx)
                             (direct
                                $Test1.if_curry_xxx
                                $Test1.true_xxx
                                $Test1.t_xxx
                                $Test1.__xxx))))
                      $Test1.let_xxx))))
            $Test1.let_xxx))
      (define
         (main $Test1.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $Test1.d_xxx
            (direct True)
            (=
               $Test1.d_xxx
               (call if $Test1.d_xxx)
               (=
                  $Test1.d_xxx
                  (cast
                     (->
                        ((-> ((sum (con Tuple#))) (sum (con Tuple#))))
                        (->
                           ((-> ((sum (con Tuple#))) (sum (con Tuple#))))
                           (sum (con Tuple#))))
                     $Test1.d_xxx)
                  (let
                     (($Test1.fun_xxx
                         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
                         (fun
                            ($Test1.$__xxx)
                            (=
                               $Test1.d_xxx
                               (call malgo_print_string "True")
                               (cast (sum (con Tuple#)) $Test1.d_xxx)))))
                     (=
                        $Test1.d_xxx
                        (call $Test1.d_xxx $Test1.fun_xxx)
                        (=
                           $Test1.d_xxx
                           (cast
                              (->
                                 ((-> ((sum (con Tuple#))) (sum (con Tuple#))))
                                 (sum (con Tuple#)))
                              $Test1.d_xxx)
                           (let
                              (($Test1.fun_xxx
                                  (-> ((sum (con Tuple#))) (sum (con Tuple#)))
                                  (fun
                                     ($Test1.$__xxx)
                                     (=
                                        $Test1.d_xxx
                                        (call malgo_print_string "False")
                                        (cast (sum (con Tuple#)) $Test1.d_xxx)))))
                              (=
                                 $Test1.d_xxx
                                 (call $Test1.d_xxx $Test1.fun_xxx)
                                 (cast (sum (con Tuple#)) $Test1.d_xxx)))))))))))
   ((extern malgo_print_string (-> (String#) (sum (con Tuple#))))))