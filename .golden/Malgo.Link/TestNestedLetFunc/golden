(()
   ((define
       (malgo_print_string $TestNestedLetFunc.p_xxx)
       (-> (String#) (sum (con Tuple#)))
       (raw
          malgo_print_string
          (-> (String#) (sum (con Tuple#)))
          $TestNestedLetFunc.p_xxx))
      (define
         (main $TestNestedLetFunc.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (let
            (($TestNestedLetFunc.fun_xxx
                (-> ((sum (con Tuple#))) (sum (con Tuple#)))
                (fun
                   ($TestNestedLetFunc.$__xxx)
                   (let
                      (($TestNestedLetFunc.fun_xxx
                          (-> ((sum (con Tuple#))) (sum (con Tuple#)))
                          (fun
                             ($TestNestedLetFunc.a_xxx)
                             (let
                                (($TestNestedLetFunc.let_xxx
                                    (sum (con Tuple#))
                                    (pack (sum (con Tuple#)) (con Tuple#))))
                                $TestNestedLetFunc.let_xxx))))
                      (let
                         (($TestNestedLetFunc.let_xxx
                             (sum (con Tuple#))
                             (pack (sum (con Tuple#)) (con Tuple#))))
                         (=
                            $TestNestedLetFunc.d_xxx
                            (call
                               $TestNestedLetFunc.fun_xxx
                               $TestNestedLetFunc.let_xxx)
                            (cast (sum (con Tuple#)) $TestNestedLetFunc.d_xxx)))))))
            (=
               $TestNestedLetFunc.d_xxx
               (call malgo_print_string "PASS")
               (cast (sum (con Tuple#)) $TestNestedLetFunc.d_xxx)))))
   ((extern malgo_print_string (-> (String#) (sum (con Tuple#))))))