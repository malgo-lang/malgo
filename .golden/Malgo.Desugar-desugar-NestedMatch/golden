Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 30 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 30 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 31 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 31 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 32 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 32 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 33 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 33 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False2", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 34 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 34 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True2", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 35 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
       ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
        ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ] )
      ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
         ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 35 } } ) ) ) ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 36 } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 36 } } ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
     { name = "malgo_exit_failure", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 37 } } ],
    [ SumT [ Con Tuple [] ] ] :-> AnyT, RawCall "malgo_exit_failure"
    ( [ SumT [ Con Tuple [] ] ] :-> AnyT )
    [ Var
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 37 } } ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 38 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = [ AnyT ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 45 } } )
    ( Let
     [ LocalDef
      { _variable = Meta
       { meta = [ AnyT ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "fun", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 44 } }, typ = [ AnyT ] :-> SumT
       [ Con Tuple [] ], _object = Fun
       [ Meta
        { meta = AnyT, id = Id
         { name = "true", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 39 } } ]
       ( Match
        ( Cast
         ( SumT
          [ Con
           ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [], Con
           ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ] )
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "true", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 39 } } ) ) )
        [ Unpack
         ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False" ) [] ) []
         ( Assign
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 41 } } )
          ( Let
           [ LocalDef
            { _variable = Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "let", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 40 } }, typ = SumT
             [ Con Tuple [] ], _object = Pack
             ( SumT [ Con Tuple [] ] )
             ( Con Tuple [] ) [] } ]
           ( Atom
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "let", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 40 } } ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 42 } } )
           ( Call
            ( Var
             ( Meta
              { meta =
               [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
               { name = "malgo_exit_failure", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 41 } } ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 42 } } ) ) ) ) ), Unpack
         ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True" ) [] ) []
         ( Assign
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 43 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ StringT ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "malgo_print_string", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ) )
           [ Unboxed ( String "OK" ) ] )
          ( Cast
           ( SumT [ Con Tuple [] ] )
           ( Var
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 43 } } ) ) ) ) ] ) } ]
     ( Atom
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 44 } } ) ) ) )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 56 } } )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 48 } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 47 } }, typ = [ AnyT ] :-> AnyT, _object = Fun
         [ Meta
          { meta = AnyT, id = Id
           { name = "true1", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 46 } } ]
         ( Match
          ( Cast
           ( SumT
            [ Con
             ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [], Con
             ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ] )
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "true1", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 46 } } ) ) )
          [ Unpack
           ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.False1" ) [] ) []
           ( CallDirect
            ( Meta
             { meta = [] :-> AnyT, id = Id
              { name = "True", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ) [] ), Unpack
           ( Con ( Data "test/testcases/malgo/NestedMatch.mlg.True1" ) [] ) []
           ( CallDirect
            ( Meta
             { meta = [] :-> AnyT, id = Id
              { name = "False", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ) [] ) ] ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "fun", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 47 } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 54 } } )
       ( Assign
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 51 } } )
        ( Let
         [ LocalDef
          { _variable = Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "fun", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 50 } }, typ = [ AnyT ] :-> AnyT, _object = Fun
           [ Meta
            { meta = AnyT, id = Id
             { name = "true2", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 49 } } ]
           ( Match
            ( Cast
             ( SumT
              [ Con
               ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [], Con
               ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ] )
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "true2", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 49 } } ) ) )
            [ Unpack
             ( Con
              ( Data "test/testcases/malgo/NestedMatch.mlg.False2" ) [] ) []
             ( CallDirect
              ( Meta
               { meta = [] :-> AnyT, id = Id
                { name = "True1", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ) [] ), Unpack
             ( Con
              ( Data "test/testcases/malgo/NestedMatch.mlg.True2" ) [] ) []
             ( CallDirect
              ( Meta
               { meta = [] :-> AnyT, id = Id
                { name = "False1", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ) [] ) ] ) } ]
         ( Atom
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 50 } } ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 52 } } )
         ( CallDirect
          ( Meta
           { meta = [] :-> AnyT, id = Id
            { name = "True2", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ) [] )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 53 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 51 } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 52 } } ) ] )
          ( Cast AnyT
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 53 } } ) ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 55 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 48 } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 54 } } ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 55 } } ) ) ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 57 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 45 } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 56 } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 57 } } ) ) ) ) ) ) ], extFuns =
  [
   ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ),
   ( "malgo_exit_failure", [ SumT [ Con Tuple [] ] ] :-> AnyT ) ] }
DsState
 { _nameEnv = fromList
  [
   ( Id
    { name = "$_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 29 }, Meta
    { meta = SumT
     [ Con Tuple [] ], id = Id
     { name = "$_", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 38 } } ),
   ( Id
    { name = "True2", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True2", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ),
   ( Id
    { name = "malgo_print_string", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ),
   ( Id
    { name = "malgo_exit_failure", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
     { name = "malgo_exit_failure", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ),
   ( Id
    { name = "False2", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False2", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ),
   ( Id
    { name = "False", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ),
   ( Id
    { name = "main", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ),
   ( Id
    { name = "True", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ),
   ( Id
    { name = "True1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ),
   ( Id
    { name = "False1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False1", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } } ) ], _signatureMap = fromList
  [
   ( Id
    { name = "$_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 29 }, Forall []
    ( TyTuple 0 ) ),
   ( Id
    { name = "True2", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
    ( TyCon
     ( Id
      { name = "Bool2", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ),
   ( Id
    { name = "malgo_print_string", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
    ( TyArr ( TyPrim StringT ) ( TyTuple 0 ) ) ),
   ( Id
    { name = "malgo_exit_failure", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall
    [ Id
     { name = "a", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 2 } ]
    ( TyArr
     ( TyTuple 0 )
     ( TyVar
      ( Id
       { name = "a", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 2 } ) ) ) ),
   ( Id
    { name = "False2", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
    ( TyCon
     ( Id
      { name = "Bool2", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ),
   ( Id
    { name = "False", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
    ( TyCon
     ( Id
      { name = "Bool", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ),
   ( Id
    { name = "main", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
    ( TyArr ( TyTuple 0 ) ( TyTuple 0 ) ) ),
   ( Id
    { name = "True", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
    ( TyCon
     ( Id
      { name = "Bool", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ),
   ( Id
    { name = "True1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
    ( TyCon
     ( Id
      { name = "Bool1", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ),
   ( Id
    { name = "False1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
    ( TyCon
     ( Id
      { name = "Bool1", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ) ], _typeDefMap = fromList
  [
   ( Id
    { name = "Bool1", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, TypeDef
    { _typeConstructor = TyCon
     ( Id
      { name = "Bool1", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ), _typeParameters = [], _valueConstructors =
     [
      ( Id
       { name = "False1", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
       ( TyCon
        ( Id
         { name = "Bool1", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ),
      ( Id
       { name = "True1", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
       ( TyCon
        ( Id
         { name = "Bool1", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ) ] } ),
   ( Id
    { name = "Double#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim DoubleT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Int32#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim Int32T, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Ptr#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPtr, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Char#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim CharT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Bool", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, TypeDef
    { _typeConstructor = TyCon
     ( Id
      { name = "Bool", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ), _typeParameters = [], _valueConstructors =
     [
      ( Id
       { name = "False", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
       ( TyCon
        ( Id
         { name = "Bool", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ),
      ( Id
       { name = "True", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
       ( TyCon
        ( Id
         { name = "Bool", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ) ] } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 0 }, TypeDef
    { _typeConstructor = TyVar
     ( Id
      { name = "a", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 2 } ), _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Bool2", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, TypeDef
    { _typeConstructor = TyCon
     ( Id
      { name = "Bool2", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ), _typeParameters = [], _valueConstructors =
     [
      ( Id
       { name = "False2", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
       ( TyCon
        ( Id
         { name = "Bool2", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ),
      ( Id
       { name = "True2", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External }, Forall []
       ( TyCon
        ( Id
         { name = "Bool2", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = External } ) ) ) ] } ),
   ( Id
    { name = "Int64#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim Int64T, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "String#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim StringT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Float#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim FloatT, _typeParameters = [], _valueConstructors = [] } ) ], _kindCtx = fromList
  [
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 10 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 9 } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 8 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 7 } ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 12 }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 11 } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 14 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 13 } ) ),
   ( Id
    { name = "Double#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "Int32#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 6 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 5 } ) ),
   ( Id
    { name = "Ptr#", moduleName = ModuleName "Builtin", sort = External }, TyArr TYPE TYPE ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 2 }, TyMeta
    ( Id
     { name = "ka", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 1 } ) ),
   ( Id
    { name = "Char#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 4 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 3 } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 26 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 25 } ) ),
   ( Id
    { name = "Int64#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 24 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 23 } ) ),
   ( Id
    { name = "String#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 28 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 27 } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 18 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 17 } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 16 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 15 } ) ),
   ( Id
    { name = "Float#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 22 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 21 } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Internal 20 }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/NestedMatch.mlg" ), sort = Temporal 19 } ) ) ], _globalDefs = [], globalClosures = fromList [] }