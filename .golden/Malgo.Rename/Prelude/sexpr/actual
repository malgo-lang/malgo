(module
   "runtime/malgo/Prelude.mlg"
   ((((def
         |>
         (fn
            ((clause
                (#Prelude.x_78 #Prelude.f_79)
                (seq (do (apply #Prelude.f_79 #Prelude.x_78))))))))
       ((def
           tail
           (fn
              ((clause
                  ((con Cons (#Prelude.__25 #Prelude.xs_26)))
                  (seq (do #Prelude.xs_26)))
                 (clause (#Prelude.__27) (seq (do (apply exitFailure (tuple)))))))))
       ((def
           snd
           (fn
              ((clause
                  ((tuple #Prelude.a_16 #Prelude.b_17))
                  (seq (do #Prelude.b_17)))))))
       ((def
           putStrLn
           (fn
              ((clause
                  (#Prelude.str_100)
                  (seq
                     (do (apply printString #Prelude.str_100))
                     (do (apply newline (tuple)))))))))
       ((def
           putStr
           (fn
              ((clause
                  (#Prelude.str_99)
                  (seq (do (apply printString #Prelude.str_99))))))))
       ((def
           punctuate
           (fn
              ((clause (#Prelude.__63 (con Nil ())) (seq (do Nil)))
                 (clause
                    (#Prelude.__64 (con Cons (#Prelude.x_65 (con Nil ()))))
                    (seq (do (apply (apply Cons #Prelude.x_65) Nil))))
                 (clause
                    (#Prelude.sep_66 (con Cons (#Prelude.x_67 #Prelude.xs_68)))
                    (seq
                       (do
                          (apply
                             (apply Cons #Prelude.x_67)
                             (parens
                                (apply
                                   (apply Cons #Prelude.sep_66)
                                   (parens
                                      (apply
                                         (apply punctuate #Prelude.sep_66)
                                         #Prelude.xs_68))))))))))))
       ((def
           printInt64
           (fn
              ((clause
                  (#Prelude.i_102)
                  (seq
                     (do
                        (apply
                           printString
                           (parens (apply toStringInt64 #Prelude.i_102))))))))))
       ((def
           printInt32
           (fn
              ((clause
                  (#Prelude.i_101)
                  (seq
                     (do
                        (apply
                           printString
                           (parens (apply toStringInt32 #Prelude.i_101))))))))))
       ((def
           print
           (fn
              ((clause
                  (#Prelude.x_104)
                  (seq (do (apply malgo_print #Prelude.x_104))))))))
       ((def
           mapList
           (fn
              ((clause (#Prelude.__38 (con Nil ())) (seq (do Nil)))
                 (clause
                    (#Prelude.f_39 (con Cons (#Prelude.x_40 #Prelude.xs_41)))
                    (seq
                       (do
                          (apply
                             (apply
                                Cons
                                (parens (apply #Prelude.f_39 #Prelude.x_40)))
                             (parens
                                (apply
                                   (apply mapList #Prelude.f_39)
                                   #Prelude.xs_41))))))))))
       ((def
           listToString
           (fn
              ((clause ((con Nil ())) (seq (do (apply String# (string "")))))
                 (clause
                    ((con Cons (#Prelude.c_42 #Prelude.cs_43)))
                    (seq
                       (do
                          (apply
                             (apply consString #Prelude.c_42)
                             (parens (apply listToString #Prelude.cs_43))))))))))
       ((def
           isWhiteSpace
           (fn
              ((clause ((con Char# ((unboxed (char ' '))))) (seq (do True)))
                 (clause ((con Char# ((unboxed (char '\n'))))) (seq (do True)))
                 (clause ((con Char# ((unboxed (char '\r'))))) (seq (do True)))
                 (clause ((con Char# ((unboxed (char '\t'))))) (seq (do True)))
                 (clause (#Prelude.__69) (seq (do False)))))))
       ((def
           if
           (fn
              ((clause
                  ((con True ()) #Prelude.t_85 #Prelude.__86)
                  (seq (do (apply #Prelude.t_85 (tuple)))))
                 (clause
                    ((con False ()) #Prelude.__87 #Prelude.f_88)
                    (seq (do (apply #Prelude.f_88 (tuple)))))))))
       ((def
           tailString
           (fn
              ((clause
                  (#Prelude.str_47)
                  (seq
                     (do
                        (apply
                           (apply
                              (apply
                                 if
                                 (parens
                                    (apply
                                       (apply eqString #Prelude.str_47)
                                       (apply String# (string "")))))
                              (fn
                                 ((clause
                                     (#Prelude.__48)
                                     (seq (do #Prelude.str_47))))))
                           (fn
                              ((clause
                                  (#Prelude.__49)
                                  (seq
                                     (do
                                        (apply
                                           (apply
                                              (apply substring #Prelude.str_47)
                                              (apply Int64# (int64 1)))
                                           (parens
                                              (apply lengthString #Prelude.str_47))))))))))))))))
       ((def
           unless
           (fn
              ((clause
                  (#Prelude.c_90 #Prelude.tValue_91 #Prelude.f_92)
                  (seq
                     (do
                        (apply
                           (apply
                              (apply if #Prelude.c_90)
                              (fn
                                 ((clause
                                     (#Prelude.__93)
                                     (seq (do #Prelude.tValue_91))))))
                           #Prelude.f_92))))))))
       ((def identity (fn ((clause (#Prelude.x_1) (seq (do #Prelude.x_1)))))))
       ((def
           headString
           (fn
              ((clause
                  (#Prelude.str_44)
                  (seq
                     (do
                        (apply
                           (apply
                              (apply
                                 if
                                 (parens
                                    (apply
                                       (apply eqString #Prelude.str_44)
                                       (apply String# (string "")))))
                              (fn ((clause (#Prelude.__45) (seq (do Nothing))))))
                           (fn
                              ((clause
                                  (#Prelude.__46)
                                  (seq
                                     (do
                                        (apply
                                           Just
                                           (parens
                                              (apply
                                                 (apply
                                                    atString
                                                    (apply Int64# (int64 0)))
                                                 #Prelude.str_44))))))))))))))))
       ((def
           head
           (fn
              ((clause
                  ((con Cons (#Prelude.x_21 #Prelude.__22)))
                  (seq (do #Prelude.x_21)))
                 (clause (#Prelude.__23) (seq (do (apply exitFailure (tuple)))))))))
       ((def
           fst
           (fn
              ((clause
                  ((tuple #Prelude.a_12 #Prelude.b_13))
                  (seq (do #Prelude.a_12)))))))
       ((def
           foldl
           (fn
              ((clause
                  (#Prelude.__30 #Prelude.z_31 (con Nil ()))
                  (seq (do #Prelude.z_31)))
                 (clause
                    (#Prelude.f_32
                       #Prelude.z_33
                       (con Cons (#Prelude.x_34 #Prelude.xs_35)))
                    (seq
                       (do
                          (apply
                             (apply
                                (apply foldl #Prelude.f_32)
                                (parens
                                   (apply
                                      (apply #Prelude.f_32 #Prelude.z_33)
                                      #Prelude.x_34)))
                             #Prelude.xs_35))))))))
       ((def
           const
           (fn ((clause (#Prelude.a_4 #Prelude.__5) (seq (do #Prelude.a_4)))))))
       ((def
           cond
           (fn
              ((clause
                  ((con Nil ()))
                  (seq (do (apply panic (apply String# (string "no branch"))))))
                 (clause
                    ((con
                        Cons
                        ((tuple (con True ()) #Prelude.x_95) #Prelude.__96)))
                    (seq (do (apply #Prelude.x_95 (tuple)))))
                 (clause
                    ((con
                        Cons
                        ((tuple (con False ()) #Prelude.__97) #Prelude.xs_98)))
                    (seq (do (apply cond #Prelude.xs_98))))))))
       ((def
           concatString
           (fn
              ((clause ((con Nil ())) (seq (do (apply String# (string "")))))
                 (clause
                    ((con Cons (#Prelude.x_60 #Prelude.xs_61)))
                    (seq
                       (do
                          (apply
                             (apply appendString #Prelude.x_60)
                             (parens (apply concatString #Prelude.xs_61))))))))))
       ((def
           case
           (fn
              ((clause
                  (#Prelude.x_8 #Prelude.f_9)
                  (seq (do (apply #Prelude.f_9 #Prelude.x_8))))))))
       ((def
           dropWhileString
           (fn
              ((clause
                  (#Prelude.pred_55 #Prelude.str_56)
                  (seq
                     (do
                        (apply
                           (apply
                              case
                              (parens (apply headString #Prelude.str_56)))
                           (fn
                              ((clause
                                  ((con Nothing ()))
                                  (seq (do #Prelude.str_56)))
                                 (clause
                                    ((con Just (#Prelude.c_57)))
                                    (seq
                                       (do
                                          (apply
                                             (apply
                                                (apply
                                                   if
                                                   (parens
                                                      (apply
                                                         #Prelude.pred_55
                                                         #Prelude.c_57)))
                                                (fn
                                                   ((clause
                                                       (#Prelude.__58)
                                                       (seq
                                                          (do
                                                             (apply
                                                                (apply
                                                                   dropWhileString
                                                                   #Prelude.pred_55)
                                                                (parens
                                                                   (apply
                                                                      tailString
                                                                      #Prelude.str_56)))))))))
                                             (fn
                                                ((clause
                                                    (#Prelude.__59)
                                                    (seq (do #Prelude.str_56)))))))))))))))))))
       ((def
           takeWhileString
           (fn
              ((clause
                  (#Prelude.pred_50 #Prelude.str_51)
                  (seq
                     (do
                        (apply
                           (apply
                              case
                              (parens (apply headString #Prelude.str_51)))
                           (fn
                              ((clause
                                  ((con Nothing ()))
                                  (seq (do #Prelude.str_51)))
                                 (clause
                                    ((con Just (#Prelude.c_52)))
                                    (seq
                                       (do
                                          (apply
                                             (apply
                                                (apply
                                                   if
                                                   (parens
                                                      (apply
                                                         #Prelude.pred_50
                                                         #Prelude.c_52)))
                                                (fn
                                                   ((clause
                                                       (#Prelude.__53)
                                                       (seq
                                                          (do
                                                             (apply
                                                                (apply
                                                                   consString
                                                                   #Prelude.c_52)
                                                                (parens
                                                                   (apply
                                                                      (apply
                                                                         takeWhileString
                                                                         #Prelude.pred_50)
                                                                      (parens
                                                                         (apply
                                                                            tailString
                                                                            #Prelude.str_51)))))))))))
                                             (fn
                                                ((clause
                                                    (#Prelude.__54)
                                                    (seq
                                                       (do
                                                          (apply
                                                             String#
                                                             (string "")))))))))))))))))))))
       ((def
           <|
           (fn
              ((clause
                  (#Prelude.f_82 #Prelude.x_83)
                  (seq (do (apply #Prelude.f_82 #Prelude.x_83))))))))
       ((def
           <<
           (fn
              ((clause
                  (#Prelude.f_73 #Prelude.g_74)
                  (seq
                     (do
                        (fn
                           ((clause
                               (#Prelude.x_75)
                               (seq
                                  (do
                                     (apply
                                        #Prelude.f_73
                                        (parens
                                           (apply #Prelude.g_74 #Prelude.x_75))))))))))))))))
      ((sig identity (-> #Prelude.a_0 #Prelude.a_0))
         (sig const (-> #Prelude.a_2 (-> #Prelude.b_3 #Prelude.a_2)))
         (sig
            case
            (-> #Prelude.a_6 (-> (-> #Prelude.a_6 #Prelude.b_7) #Prelude.b_7)))
         (sig fst (-> (tuple #Prelude.a_10 #Prelude.b_11) #Prelude.a_10))
         (sig snd (-> (tuple #Prelude.a_14 #Prelude.b_15) #Prelude.b_15))
         (sig head (-> (app List (#Prelude.a_20)) #Prelude.a_20))
         (sig tail (-> (app List (#Prelude.a_24)) (app List (#Prelude.a_24))))
         (sig
            foldl
            (->
               (-> #Prelude.a_28 (-> #Prelude.b_29 #Prelude.a_28))
               (-> #Prelude.a_28 (-> (app List (#Prelude.b_29)) #Prelude.a_28))))
         (sig
            mapList
            (->
               (-> #Prelude.a_36 #Prelude.b_37)
               (-> (app List (#Prelude.a_36)) (app List (#Prelude.b_37)))))
         (sig listToString (-> (app List (Char)) String))
         (sig headString (-> String (app Maybe (Char))))
         (sig tailString (-> String String))
         (sig concatString (-> (app List (String)) String))
         (sig
            punctuate
            (->
               #Prelude.a_62
               (-> (app List (#Prelude.a_62)) (app List (#Prelude.a_62)))))
         (sig isWhiteSpace (-> Char Bool))
         (sig
            <<
            (->
               (-> #Prelude.b_71 #Prelude.c_72)
               (->
                  (-> #Prelude.a_70 #Prelude.b_71)
                  (-> #Prelude.a_70 #Prelude.c_72))))
         (sig
            |>
            (-> #Prelude.a_76 (-> (-> #Prelude.a_76 #Prelude.b_77) #Prelude.b_77)))
         (sig
            <|
            (-> (-> #Prelude.a_80 #Prelude.b_81) (-> #Prelude.a_80 #Prelude.b_81)))
         (sig
            if
            (->
               Bool
               (->
                  (-> (tuple) #Prelude.a_84)
                  (-> (-> (tuple) #Prelude.a_84) #Prelude.a_84))))
         (sig
            unless
            (->
               Bool
               (-> #Prelude.a_89 (-> (-> (tuple) #Prelude.a_89) #Prelude.a_89))))
         (sig
            cond
            (->
               (app List ((tuple Bool (-> (tuple) #Prelude.a_94))))
               #Prelude.a_94))
         (sig putStr (-> String (tuple)))
         (sig putStrLn (-> String (tuple)))
         (sig printInt32 (-> Int32 (tuple)))
         (sig printInt64 (-> Int64 (tuple)))
         (sig print (-> #Prelude.a_103 (tuple))))
      ((data Maybe (#Prelude.a_18) ((Nothing ()) (Just (#Prelude.a_18))))
         (data
            List
            (#Prelude.a_19)
            ((Nil ()) (Cons (#Prelude.a_19 (app List (#Prelude.a_19)))))))
      ()
      ()
      ((import Builtin all))))