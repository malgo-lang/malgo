(module
   "test/testcases/malgo/Eventually.mlg"
   ((((def
         step
         (fn
            ((clause
                ((con Done (#Eventually.value_12)))
                (seq (do (apply Done #Eventually.value_12))))
               (clause
                  ((con NotYetDone (#Eventually.work_13)))
                  (seq (do (parens (apply #Eventually.work_13 (tuple))))))))))
       ((def
           return
           (fn
              ((clause
                  ((record (bind #Eventually.__20) (return #Eventually.x_21)))
                  (seq (do #Eventually.x_21)))))))
       ((def
           eventuallyBind
           (fn
              ((clause
                  ((con Done (#Eventually.value_7)) #Eventually.k_8)
                  (seq (do (apply #Eventually.k_8 #Eventually.value_7))))
                 (clause
                    ((con NotYetDone (#Eventually.work_9)) #Eventually.k_10)
                    (seq
                       (do
                          (apply
                             NotYetDone
                             (fn
                                ((clause
                                    (#Eventually.__11)
                                    (seq
                                       (do
                                          (apply
                                             (apply
                                                eventuallyBind
                                                (parens
                                                   (apply
                                                      #Eventually.work_9
                                                      (tuple))))
                                             #Eventually.k_10))))))))))))))
       ((def eventually (record (bind eventuallyBind) (return Done))))
       ((def
           bind
           (fn
              ((clause
                  ((record (bind #Eventually.x_16) (return #Eventually.__17)))
                  (seq (do #Eventually.x_16)))))))
       ((def
           comp
           (apply
              (apply
                 (apply bind eventually)
                 (parens
                    (apply
                       NotYetDone
                       (fn
                          ((clause
                              (#Eventually.__22)
                              (seq
                                 (do
                                    (apply
                                       Done
                                       (parens
                                          (apply
                                             printString
                                             (apply String# (string "1")))))))))))))
              (fn
                 ((clause
                     (#Eventually.__23)
                     (seq
                        (do
                           (apply
                              (apply
                                 (apply bind eventually)
                                 (parens
                                    (apply
                                       NotYetDone
                                       (fn
                                          ((clause
                                              (#Eventually.__24)
                                              (seq
                                                 (do
                                                    (apply
                                                       Done
                                                       (parens
                                                          (apply
                                                             printString
                                                             (apply
                                                                String#
                                                                (string "2")))))))))))))
                              (fn
                                 ((clause
                                     (#Eventually.__25)
                                     (seq
                                        (do
                                           (apply
                                              (apply return eventually)
                                              (apply Int32# (int32 3)))))))))))))))))
       ((def
           main
           (fn
              ((clause
                  (#Eventually.__26)
                  (seq
                     (do (opapp |> comp step))
                     (do
                        (opapp
                           |>
                           (opapp |> (opapp |> (opapp |> comp step) step) step)
                           (fn
                              ((clause
                                  ((con Done (#Eventually.x_27)))
                                  (seq
                                     (do
                                        (apply
                                           printString
                                           (parens
                                              (apply
                                                 toStringInt32
                                                 #Eventually.x_27))))))
                                 (clause
                                    ((con NotYetDone (#Eventually.__28)))
                                    (seq
                                       (do
                                          (apply
                                             printString
                                             (apply String# (string "not yet")))))))))))))))))
      ((sig eventually (app EventuallyBuilder (#Eventually.a_3 #Eventually.b_4)))
         (sig
            eventuallyBind
            (->
               (app Eventually (#Eventually.a_5))
               (->
                  (-> #Eventually.a_5 (app Eventually (#Eventually.b_6)))
                  (app Eventually (#Eventually.b_6)))))
         (sig
            bind
            (->
               (app EventuallyBuilder (#Eventually.a_14 #Eventually.b_15))
               (->
                  (app Eventually (#Eventually.a_14))
                  (->
                     (-> #Eventually.a_14 (app Eventually (#Eventually.b_15)))
                     (app Eventually (#Eventually.b_15))))))
         (sig
            return
            (->
               (app EventuallyBuilder (#Eventually.a_18 #Eventually.b_19))
               (-> #Eventually.a_18 (app Eventually (#Eventually.a_18)))))
         (sig comp (app Eventually (Int32)))
         (sig main (-> (tuple) (tuple))))
      ((data
          Eventually
          (#Eventually.a_0)
          ((Done (#Eventually.a_0))
             (NotYetDone ((-> (tuple) (app Eventually (#Eventually.a_0))))))))
      ((type
          EventuallyBuilder
          (#Eventually.a_1 #Eventually.b_2)
          (record
             (bind
                (->
                   (app Eventually (#Eventually.a_1))
                   (->
                      (-> #Eventually.a_1 (app Eventually (#Eventually.b_2)))
                      (app Eventually (#Eventually.b_2)))))
             (return (-> #Eventually.a_1 (app Eventually (#Eventually.a_1)))))))
      ()
      ((import "runtime/malgo/Builtin.mlg" all)
         (import "runtime/malgo/Prelude.mlg" all))))