(module
   "test/testcases/malgo/Show.mlg"
   ((((def
         showInt32
         (record
            (show
               (fn
                  ((clause
                      (#Show.x_xxx)
                      (seq (do (apply toStringInt32 #Show.x_xxx))))))))))
       ((def
           show
           (fn
              ((clause ((record (show #Show.show_xxx))) (seq (do #Show.show_xxx)))))))
       ((def
           print
           (fn
              ((clause
                  (#Show.showDict_xxx #Show.x_xxx)
                  (seq
                     (do
                        (apply
                           printString
                           (seq
                              (do
                                 (apply
                                    (apply show #Show.showDict_xxx)
                                    #Show.x_xxx)))))))))))
       ((def
           <>
           (fn
              ((clause
                  (#Show.x_xxx #Show.y_xxx)
                  (seq (do (apply (apply appendString #Show.x_xxx) #Show.y_xxx))))))))
       ((def
           showTuple2
           (fn
              ((clause
                  (#Show.showDictA_xxx #Show.showDictB_xxx)
                  (seq
                     (do
                        (record
                           (show
                              (fn
                                 ((clause
                                     ((tuple #Show.a_xxx #Show.b_xxx))
                                     (seq
                                        (do
                                           (opapp
                                              <>
                                              (apply String# (string "("))
                                              (opapp
                                                 <>
                                                 (apply
                                                    (apply
                                                       show
                                                       #Show.showDictA_xxx)
                                                    #Show.a_xxx)
                                                 (opapp
                                                    <>
                                                    (apply String# (string ", "))
                                                    (opapp
                                                       <>
                                                       (apply
                                                          (apply
                                                             show
                                                             #Show.showDictB_xxx)
                                                          #Show.b_xxx)
                                                       (apply
                                                          String#
                                                          (string ")"))))))))))))))))))))
       ((def
           main
           (fn
              ((clause
                  (#Show.$__xxx)
                  (seq
                     (do
                        (apply
                           (apply
                              print
                              (seq
                                 (do
                                    (apply (apply showTuple2 showInt32) showInt32))))
                           (tuple
                              (apply Int32# (int32 1))
                              (apply Int32# (int32 2))))))))))))
      ((sig <> (-> String (-> String String)))
         (sig showInt32 (app Show (Int32)))
         (sig show (-> (app Show (#Show.a_xxx)) (-> #Show.a_xxx String)))
         (sig
            showTuple2
            (->
               (app Show (#Show.a_xxx))
               (->
                  (app Show (#Show.b_xxx))
                  (app Show ((tuple #Show.a_xxx #Show.b_xxx))))))
         (sig print (-> (app Show (#Show.a_xxx)) (-> #Show.a_xxx (tuple)))))
      ()
      ((type Show (#Show.a_xxx) (record (show (-> #Show.a_xxx String)))))
      ()
      ((import "runtime/malgo/Builtin.mlg" all)
         (import "runtime/malgo/Prelude.mlg" all))))