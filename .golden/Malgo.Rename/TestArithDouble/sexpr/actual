(module
   "test/testcases/malgo/TestArithDouble.mlg"
   ((((def
         show
         (fn
            ((clause
                (#TestArithDouble.x_xxx)
                (seq
                   (do
                      (apply
                         String#
                         (seq (do (apply toStringDouble# #TestArithDouble.x_xxx)))))))))))
       ((def
           traceShowId
           (fn
              ((clause
                  (#TestArithDouble.x_xxx)
                  (seq
                     (do
                        (apply
                           putStrLn
                           (seq (do (apply show #TestArithDouble.x_xxx)))))
                     (do #TestArithDouble.x_xxx)))))))
       ((def
           neg
           (fn
              ((clause
                  (#TestArithDouble.x_xxx)
                  (seq
                     (do
                        (apply
                           (apply subDouble# (double 0.0_f64))
                           #TestArithDouble.x_xxx))))))))
       ((def
           mul
           (fn
              ((clause
                  (#TestArithDouble.x_xxx #TestArithDouble.y_xxx)
                  (seq
                     (do
                        (apply
                           (apply mulDouble# #TestArithDouble.x_xxx)
                           #TestArithDouble.y_xxx))))))))
       ((def
           add
           (fn
              ((clause
                  (#TestArithDouble.x_xxx #TestArithDouble.y_xxx)
                  (seq
                     (do
                        (apply
                           (apply addDouble# #TestArithDouble.x_xxx)
                           #TestArithDouble.y_xxx))))))))
       ((def
           +
           (fn
              ((clause
                  (#TestArithDouble.x_xxx #TestArithDouble.y_xxx)
                  (seq
                     (do
                        (apply
                           (apply addDouble# #TestArithDouble.x_xxx)
                           #TestArithDouble.y_xxx))))))))
       ((def
           *
           (fn
              ((clause
                  (#TestArithDouble.x_xxx #TestArithDouble.y_xxx)
                  (seq
                     (do
                        (apply
                           (apply mulDouble# #TestArithDouble.x_xxx)
                           #TestArithDouble.y_xxx))))))))
       ((def
           f
           (fn
              ((clause
                  (#TestArithDouble.x_xxx)
                  (seq
                     (do
                        (opapp
                           *
                           (seq
                              (do
                                 (opapp + #TestArithDouble.x_xxx (double 0.0_f64))))
                           #TestArithDouble.x_xxx))))))))
       ((def
           main
           (fn
              ((clause
                  (#TestArithDouble.$__xxx)
                  (seq
                     (do
                        (apply
                           putStrLn
                           (seq
                              (do
                                 (apply
                                    show
                                    (seq (do (apply f (double 0.5_f64))))))))))))))))
      ((sig f (-> Double# Double#)))
      ()
      ()
      ()
      ((import "runtime/malgo/Builtin.mlg" all)
         (import "runtime/malgo/Prelude.mlg" all))))