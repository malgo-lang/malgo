(module
   "test/testcases/malgo/TypeSynonym.mlg"
   ((((def idOverS (fn ((clause (#TypeSynonym.x_1) (seq (do #TypeSynonym.x_1)))))))
       ((def
           hello
           (tuple
              (apply String# (string "hello"))
              (apply String# (string "world")))))
       ((def
           main
           (fn
              ((clause
                  (#TypeSynonym.__2)
                  (seq
                     (do
                        (opapp
                           |>
                           hello
                           (fn
                              ((clause
                                  ((tuple #TypeSynonym.h_3 #TypeSynonym.w_4))
                                  (seq
                                     (do (apply putStr #TypeSynonym.h_3))
                                     (do
                                        (apply
                                           putStr
                                           (apply String# (string " "))))
                                     (do (apply putStrLn #TypeSynonym.w_4)))))))))))))))
      ((sig hello (app MyTuple (MyString)))
         (sig idOverS (-> S T))
         (sig main (-> (tuple) (tuple))))
      ((data T () ((TCon ()))))
      ((type MyTuple (#TypeSynonym.a_0) (tuple #TypeSynonym.a_0 #TypeSynonym.a_0))
         (type MyString () String)
         (type S () T))
      ()
      ((import "runtime/malgo/Builtin.mlg" all)
         (import "runtime/malgo/Prelude.mlg" all))))