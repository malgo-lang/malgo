(module
   "test/testcases/malgo/ToplevelVariableNoImport.mlg"
   ((data Int32 () ((Int32# (Int32#))))
      (data String () ((String# (String#))))
      (foreign malgo_add_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig addInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         addInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_add_int32_t x) y)))))))
      (sig addInt32 (-> Int32 (-> Int32 Int32)))
      (def
         addInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply Int32# (parens (apply (apply addInt32# x) y)))))))))
      (foreign malgo_print_string (-> String# (tuple)))
      (sig printString# (-> String# (tuple)))
      (def
         printString#
         (fn ((clause (x) (seq (do (apply malgo_print_string x)))))))
      (sig printString (-> String (tuple)))
      (def
         printString
         (fn ((clause ((con String# (x))) (seq (do (apply printString# x)))))))
      (sig identity (-> a a))
      (def identity (fn ((clause (x) (seq (do x))))))
      (sig const (-> a (-> b a)))
      (def const (fn ((clause (a _) (seq (do a))))))
      (data Maybe (a) ((Nothing ()) (Just (a))))
      (sig printInt32 (-> Int32 (tuple)))
      (def
         printInt32
         (fn
            ((clause
                (i)
                (seq (do (apply printString (parens (apply toStringInt32 i)))))))))
      (foreign malgo_int32_t_to_string (-> Int32# String#))
      (sig toStringInt32# (-> Int32# String#))
      (def
         toStringInt32#
         (fn ((clause (x) (seq (do (apply malgo_int32_t_to_string x)))))))
      (sig toStringInt32 (-> Int32 String))
      (def
         toStringInt32
         (fn
            ((clause
                ((con Int32# (x)))
                (seq (do (apply String# (parens (apply toStringInt32# x)))))))))
      (def one (int32 1))
      (def addOne (apply addInt32 one))
      (def constId (apply const identity))
      (sig comp (app Maybe (a)))
      (def
         comp
         (apply
            (fn
               ((clause (Nothing) (seq (do Nothing)))
                  (clause ((con Just (x))) (seq (do Nothing)))))
            (parens (apply Just (tuple)))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (do
                      (apply
                         (fn
                            ((clause
                                (Nothing)
                                (seq (do (apply printString (string "OK")))))
                               (clause ((con Just (_))) (seq (do (tuple))))))
                         comp))
                   (do
                      (apply
                         printInt32
                         (parens
                            (apply
                               (apply constId const)
                               (parens (apply addOne one)))))))))))))