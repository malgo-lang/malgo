(module
   "test/testcases/malgo/NewSyntax.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (infix neutral 4 ==)
      (def == (fn ((clause (x y) (seq (do (apply (apply eqInt32 x) y)))))))
      (infix left 6 -)
      (def - (fn ((clause (x y) (seq (do (apply (apply subInt32 x) y)))))))
      (infix left 6 +)
      (def + (fn ((clause (x y) (seq (do (apply (apply addInt32 x) y)))))))
      (infix left 7 *)
      (def * (fn ((clause (x y) (seq (do (apply (apply mulInt32 x) y)))))))
      (def
         fact
         (fn ((clause (n) (seq (do (apply (apply factAcc n) (int32 1))))))))
      (def
         factAcc
         (fn
            ((clause
                (n acc)
                (seq
                   (do
                      (apply
                         (apply
                            (apply if (opapp == n (int32 0)))
                            (fn ((clause () (seq (do (seq (do acc))))))))
                         (fn
                            ((clause
                                ()
                                (seq
                                   (do
                                      (seq
                                         (do
                                            (apply
                                               (apply
                                                  factAcc
                                                  (opapp - n (int32 1)))
                                               (opapp * n acc))))))))))))))))
      (def
         fibonacci
         (fn
            ((clause ((boxed (int32 0))) (seq (do (int32 0))))
               (clause ((boxed (int32 1))) (seq (do (int32 1))))
               (clause
                  (n)
                  (seq
                     (do
                        (opapp
                           +
                           (apply fibonacci (opapp - n (int32 1)))
                           (apply fibonacci (opapp - n (int32 2))))))))))
      (def
         listLength
         (fn
            ((clause (Nil) (seq (do (int32 0))))
               (clause
                  ((apply (apply Cons _) tail))
                  (seq (do (opapp + (int32 1) (apply listLength tail))))))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (do
                      (seq
                         (do
                            (opapp
                               |>
                               (opapp |> (apply fact (int32 5)) toStringInt32)
                               putStrLn))
                         (do
                            (opapp
                               |>
                               (opapp
                                  |>
                                  (apply fibonacci (int32 10))
                                  toStringInt32)
                               putStrLn)))))))))))