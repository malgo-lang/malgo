(module
   "test/testcases/malgo/NewSyntax.mlg"
   ((import ../../../runtime/malgo/Builtin.mlg all)
      (import ../../../runtime/malgo/Prelude.mlg all)
      (infix neutral 4 ==)
      (def == (fn ((clause (x y) (seq (do (apply (apply eqInt64 x) y)))))))
      (infix left 6 -)
      (def - (fn ((clause (x y) (seq (do (apply (apply subInt64 x) y)))))))
      (infix left 7 *)
      (def * (fn ((clause (x y) (seq (do (apply (apply mulInt64 x) y)))))))
      (def
         fact
         (fn ((clause (n) (seq (do (apply (apply factAcc n) (int64 1))))))))
      (def
         factAcc
         (fn
            ((clause
                (n acc)
                (seq
                   (do
                      (apply
                         (apply
                            (apply if (opapp == n (int64 0)))
                            (fn ((clause () (seq (do acc))))))
                         (fn
                            ((clause
                                ()
                                (seq
                                   (do
                                      (apply
                                         (apply factAcc (opapp - n (int64 1)))
                                         (opapp * n acc))))))))))))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (do
                      (opapp
                         |>
                         (opapp |> (apply fact (int64 5)) toStringInt64)
                         putStrLn)))))))))