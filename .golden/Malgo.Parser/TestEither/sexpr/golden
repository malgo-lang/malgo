(module
   "test/testcases/malgo/TestEither.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (data Either (a b) ((Left (a)) (Right (b))))
      (def id (fn ((clause (x) (seq (do x))))))
      (def
         andThen
         (fn
            ((clause (_ (con Left (x))) (seq (do (apply Left x))))
               (clause (f (con Right (x))) (seq (do (apply f x)))))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (do
                      (opapp
                         |>
                         (apply Right (int32 1))
                         (fn
                            ((clause
                                ((con Right ()) x)
                                (seq
                                   (do
                                      (apply
                                         putStr
                                         (seq (do (apply toStringInt32 x)))))))
                               (clause
                                  (_)
                                  (seq
                                     (do (apply putStrLn (string "unreachable")))))))))
                   (let x (apply Right (int32 1)))
                   (do
                      (opapp
                         |>
                         (opapp
                            |>
                            x
                            (apply
                               andThen
                               (fn
                                  ((clause
                                      (x)
                                      (seq
                                         (do
                                            (apply
                                               Right
                                               (seq
                                                  (do
                                                     (apply
                                                        (apply addInt32 x)
                                                        (int32 1))))))))))))
                         (apply
                            andThen
                            (fn
                               ((clause
                                   (y)
                                   (seq
                                      (do
                                         (opapp
                                            |>
                                            (opapp
                                               |>
                                               (opapp |> y toStringInt32)
                                               putStr)
                                            Right)))))))))
                   (do
                      (opapp
                         |>
                         (opapp
                            |>
                            (opapp
                               |>
                               x
                               (apply
                                  andThen
                                  (fn
                                     ((clause
                                         (_)
                                         (seq (do (apply Left (string "error")))))))))
                            (apply
                               andThen
                               (fn
                                  ((clause
                                      (x)
                                      (seq
                                         (do
                                            (apply
                                               Right
                                               (seq
                                                  (do
                                                     (apply
                                                        (apply addInt32 x)
                                                        (int32 1))))))))))))
                         (fn
                            ((clause
                                ((con Left ()) err)
                                (seq (do (apply putStrLn err))))
                               (clause
                                  ((con Right ()) x)
                                  (seq
                                     (do
                                        (opapp
                                           |>
                                           (opapp |> x toStringInt32)
                                           putStrLn)))))))))))))))