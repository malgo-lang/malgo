(module
   "test/testcases/malgo/RightAssoc.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (infix right 2 <|>)
      (sig <|> (-> a (-> (app List (a)) (app List (a)))))
      (def <|> Cons)
      (def
         f
         (fn
            ((clause
                (n)
                (seq
                   (let
                      x
                      (opapp
                         <|>
                         (tuple True (fn ((clause () (seq (do (int32 1)))))))
                         (seq
                            (do
                               (opapp
                                  <|>
                                  (tuple
                                     True
                                     (fn ((clause () (seq (do (int32 2)))))))
                                  (seq
                                     (do
                                        (opapp
                                           <|>
                                           (tuple
                                              True
                                              (fn
                                                 ((clause () (seq (do (int32 3)))))))
                                           (seq
                                              (do
                                                 (opapp
                                                    <|>
                                                    (tuple
                                                       True
                                                       (fn
                                                          ((clause
                                                              ()
                                                              (seq (do (int32 4)))))))
                                                    Nil)))))))))))
                   (let
                      y
                      (opapp
                         <|>
                         (opapp
                            <|>
                            (opapp
                               <|>
                               (opapp
                                  <|>
                                  (tuple
                                     True
                                     (fn ((clause () (seq (do (int32 1)))))))
                                  (tuple
                                     True
                                     (fn ((clause () (seq (do (int32 2))))))))
                               (tuple
                                  True
                                  (fn ((clause () (seq (do (int32 3))))))))
                            (tuple True (fn ((clause () (seq (do (int32 4))))))))
                         Nil))
                   (do y))))))
      (sig main (block (tuple)))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (let x (apply f (int32 4)))
                   (do (apply printString (string "OK"))))))))))