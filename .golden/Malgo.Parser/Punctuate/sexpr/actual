(module
   "test/testcases/malgo/Punctuate.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (infix right 6 <>)
      (sig <> (-> String (-> String String)))
      (def <> appendString)
      (data
         SExpr
         ()
         ((Symbol (String)) (SInt (Int32)) (SList ((app List (SExpr))))))
      (sig show (-> SExpr String))
      (def
         show
         (fn
            ((clause
                ((con Symbol (str)))
                (seq (do (opapp <> (string "Symbol ") str))))
               (clause
                  ((con SInt (int)))
                  (seq (do (opapp <> (string "SInt ") (apply toStringInt32 int)))))
               (clause
                  ((con SList (ss)))
                  (seq
                     (do
                        (opapp
                           <>
                           (opapp
                              <>
                              (string "SList [")
                              (apply
                                 concatString
                                 (parens
                                    (apply
                                       (apply punctuate (string ", "))
                                       (parens (apply (apply mapList show) ss))))))
                           (string "]"))))))))
      (def
         main
         (fn
            ((clause
                (_)
                (seq
                   (let
                      x
                      (apply
                         SList
                         (list
                            (apply Symbol (string "x"))
                            (apply
                               SList
                               (list
                                  (apply Symbol (string "y"))
                                  (apply SList (list (apply Symbol (string "z")))))))))
                   (do (apply putStrLn (parens (apply show x)))))))))))