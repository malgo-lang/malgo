(module
   "test/testcases/malgo/TypeSynonym.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (type MyTuple (a) (tuple a a))
      (type MyString () String)
      (sig hello (app MyTuple (MyString)))
      (def hello (tuple (string "hello") (string "world")))
      (data T () ((TCon ())))
      (type S () T)
      (sig idOverS (-> S T))
      (def idOverS (fn ((clause (x) (seq (do x))))))
      (sig main (block (tuple)))
      (def
         main
         (fn
            ((clause
                (_)
                (seq
                   (do
                      (opapp
                         |>
                         hello
                         (fn
                            ((clause
                                ((tuple h w))
                                (seq
                                   (do (apply putStr h))
                                   (do (apply putStr (string " ")))
                                   (do (apply putStrLn w)))))))))))))))