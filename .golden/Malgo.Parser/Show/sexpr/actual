(module
   "test/testcases/malgo/Show.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (infix right 5 <>)
      (sig <> (-> String (-> String String)))
      (def <> (fn ((clause (x y) (seq (do (apply (apply appendString x) y)))))))
      (type Show (a) (record (show (-> a String))))
      (sig showInt32 (app Show (Int32)))
      (def
         showInt32
         (record (show (fn ((clause (x) (seq (do (apply toStringInt32 x)))))))))
      (sig show (-> (app Show (a)) (-> a String)))
      (def show (fn ((clause ((record (show show))) (seq (do show))))))
      (sig
         showTuple2
         (-> (app Show (a)) (-> (app Show (b)) (app Show ((tuple a b))))))
      (def
         showTuple2
         (fn
            ((clause
                (showDictA showDictB)
                (seq
                   (do
                      (record
                         (show
                            (fn
                               ((clause
                                   ((tuple a b))
                                   (seq
                                      (do
                                         (opapp
                                            <>
                                            (opapp
                                               <>
                                               (opapp
                                                  <>
                                                  (opapp
                                                     <>
                                                     (string "(")
                                                     (apply
                                                        (apply show showDictA)
                                                        a))
                                                  (string ", "))
                                               (apply (apply show showDictB) b))
                                            (string ")")))))))))))))))
      (sig print (-> (app Show (a)) (-> a (tuple))))
      (def
         print
         (fn
            ((clause
                (showDict x)
                (seq
                   (do
                      (apply
                         printString
                         (seq (do (apply (apply show showDict) x))))))))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (do
                      (apply
                         (apply
                            print
                            (seq
                               (do (apply (apply showTuple2 showInt32) showInt32))))
                         (tuple (int32 1) (int32 2)))))))))))