(module
   "runtime/malgo/Builtin.mlg"
   ((data Int32 () ((Int32# (Int32#))))
      (data Int64 () ((Int64# (Int64#))))
      (data Float () ((Float# (Float#))))
      (data Double () ((Double# (Double#))))
      (data Char () ((Char# (Char#))))
      (data String () ((String# (String#))))
      (data Bool () ((False ()) (True ())))
      (sig int32# (-> Int32# Int32))
      (def int32# (fn ((clause (x) (seq (do (apply Int32# x)))))))
      (sig int64# (-> Int64# Int64))
      (def int64# (fn ((clause (x) (seq (do (apply Int64# x)))))))
      (sig float# (-> Float# Float))
      (def float# (fn ((clause (x) (seq (do (apply Float# x)))))))
      (sig double# (-> Double# Double))
      (def double# (fn ((clause (x) (seq (do (apply Double# x)))))))
      (sig char# (-> Char# Char))
      (def char# (fn ((clause (x) (seq (do (apply Char# x)))))))
      (sig string# (-> String# String))
      (def string# (fn ((clause (x) (seq (do (apply String# x)))))))
      (foreign malgo_panic (-> String# a))
      (sig panic (-> String a))
      (def
         panic
         (fn
            ((clause
                ((con String# (message)))
                (seq (do (apply malgo_panic message)))))))
      (foreign malgo_unsafe_cast (-> a b))
      (sig undefined a)
      (def undefined (apply malgo_unsafe_cast (tuple)))
      (foreign malgo_add_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig addInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         addInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_add_int32_t x) y)))))))
      (sig addInt32 (-> Int32 (-> Int32 Int32)))
      (def
         addInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply Int32# (parens (apply (apply addInt32# x) y)))))))))
      (foreign malgo_sub_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig subInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         subInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_sub_int32_t x) y)))))))
      (sig subInt32 (-> Int32 (-> Int32 Int32)))
      (def
         subInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply Int32# (parens (apply (apply subInt32# x) y)))))))))
      (foreign malgo_mul_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig mulInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         mulInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_mul_int32_t x) y)))))))
      (sig mulInt32 (-> Int32 (-> Int32 Int32)))
      (def
         mulInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply Int32# (parens (apply (apply mulInt32# x) y)))))))))
      (foreign malgo_div_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig divInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         divInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_div_int32_t x) y)))))))
      (sig divInt32 (-> Int32 (-> Int32 Int32)))
      (def
         divInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply Int32# (parens (apply (apply divInt32# x) y)))))))))
      (foreign malgo_add_int64_t (-> Int64# (-> Int64# Int64#)))
      (sig addInt64# (-> Int64# (-> Int64# Int64#)))
      (def
         addInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_add_int64_t x) y)))))))
      (sig addInt64 (-> Int64 (-> Int64 Int64)))
      (def
         addInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply Int64# (parens (apply (apply addInt64# x) y)))))))))
      (foreign malgo_sub_int64_t (-> Int64# (-> Int64# Int64#)))
      (sig subInt64# (-> Int64# (-> Int64# Int64#)))
      (def
         subInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_sub_int64_t x) y)))))))
      (sig subInt64 (-> Int64 (-> Int64 Int64)))
      (def
         subInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply Int64# (parens (apply (apply subInt64# x) y)))))))))
      (foreign malgo_mul_int64_t (-> Int64# (-> Int64# Int64#)))
      (sig mulInt64# (-> Int64# (-> Int64# Int64#)))
      (def
         mulInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_mul_int64_t x) y)))))))
      (sig mulInt64 (-> Int64 (-> Int64 Int64)))
      (def
         mulInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply Int64# (parens (apply (apply mulInt64# x) y)))))))))
      (foreign malgo_div_int64_t (-> Int64# (-> Int64# Int64#)))
      (sig divInt64# (-> Int64# (-> Int64# Int64#)))
      (def
         divInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_div_int64_t x) y)))))))
      (sig divInt64 (-> Int64 (-> Int64 Int64)))
      (def
         divInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply Int64# (parens (apply (apply divInt64# x) y)))))))))
      (foreign malgo_add_float (-> Float# (-> Float# Float#)))
      (sig addFloat# (-> Float# (-> Float# Float#)))
      (def
         addFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_add_float x) y)))))))
      (sig addFloat (-> Float (-> Float Float)))
      (def
         addFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply Float# (parens (apply (apply addFloat# x) y)))))))))
      (foreign malgo_sub_float (-> Float# (-> Float# Float#)))
      (sig subFloat# (-> Float# (-> Float# Float#)))
      (def
         subFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_sub_float x) y)))))))
      (sig subFloat (-> Float (-> Float Float)))
      (def
         subFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply Float# (parens (apply (apply subFloat# x) y)))))))))
      (foreign malgo_mul_float (-> Float# (-> Float# Float#)))
      (sig mulFloat# (-> Float# (-> Float# Float#)))
      (def
         mulFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_mul_float x) y)))))))
      (sig mulFloat (-> Float (-> Float Float)))
      (def
         mulFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply Float# (parens (apply (apply mulFloat# x) y)))))))))
      (foreign malgo_div_float (-> Float# (-> Float# Float#)))
      (sig divFloat# (-> Float# (-> Float# Float#)))
      (def
         divFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_div_float x) y)))))))
      (sig divFloat (-> Float (-> Float Float)))
      (def
         divFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply Float# (parens (apply (apply divFloat# x) y)))))))))
      (foreign malgo_add_double (-> Double# (-> Double# Double#)))
      (sig addDouble# (-> Double# (-> Double# Double#)))
      (def
         addDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_add_double x) y)))))))
      (sig addDouble (-> Double (-> Double Double)))
      (def
         addDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply Double# (parens (apply (apply addDouble# x) y)))))))))
      (foreign malgo_sub_double (-> Double# (-> Double# Double#)))
      (sig subDouble# (-> Double# (-> Double# Double#)))
      (def
         subDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_sub_double x) y)))))))
      (sig subDouble (-> Double (-> Double Double)))
      (def
         subDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply Double# (parens (apply (apply subDouble# x) y)))))))))
      (foreign malgo_mul_double (-> Double# (-> Double# Double#)))
      (sig mulDouble# (-> Double# (-> Double# Double#)))
      (def
         mulDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_mul_double x) y)))))))
      (sig mulDouble (-> Double (-> Double Double)))
      (def
         mulDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply Double# (parens (apply (apply mulDouble# x) y)))))))))
      (foreign malgo_div_double (-> Double# (-> Double# Double#)))
      (sig divDouble# (-> Double# (-> Double# Double#)))
      (def
         divDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_div_double x) y)))))))
      (sig divDouble (-> Double (-> Double Double)))
      (def
         divDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply Double# (parens (apply (apply divDouble# x) y)))))))))
      (foreign sqrtf (-> Float# Float#))
      (sig sqrtFloat# (-> Float# Float#))
      (def sqrtFloat# (fn ((clause (x) (seq (do (apply sqrtf x)))))))
      (sig sqrtFloat (-> Float Float))
      (def
         sqrtFloat
         (fn
            ((clause
                ((con Float# (x)))
                (seq (do (apply Float# (parens (apply sqrtFloat# x)))))))))
      (foreign sqrt (-> Double# Double#))
      (sig sqrtDouble# (-> Double# Double#))
      (def sqrtDouble# (fn ((clause (x) (seq (do (apply sqrt x)))))))
      (sig sqrtDouble (-> Double Double))
      (def
         sqrtDouble
         (fn
            ((clause
                ((con Double# (x)))
                (seq (do (apply Double# (parens (apply sqrtDouble# x)))))))))
      (sig isTrue# (-> Int32# Bool))
      (def
         isTrue#
         (fn
            ((clause ((unboxed (int32 1))) (seq (do True)))
               (clause (_) (seq (do False))))))
      (sig not (-> Bool Bool))
      (def
         not
         (fn ((clause (True) (seq (do False))) (clause (False) (seq (do True))))))
      (foreign malgo_eq_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig eqInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         eqInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_eq_int32_t x) y)))))))
      (sig eqInt32 (-> Int32 (-> Int32 Bool)))
      (def
         eqInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply isTrue# (parens (apply (apply eqInt32# x) y)))))))))
      (foreign malgo_ne_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig neInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         neInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ne_int32_t x) y)))))))
      (sig neInt32 (-> Int32 (-> Int32 Bool)))
      (def
         neInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply isTrue# (parens (apply (apply neInt32# x) y)))))))))
      (foreign malgo_lt_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig ltInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         ltInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_lt_int32_t x) y)))))))
      (sig ltInt32 (-> Int32 (-> Int32 Bool)))
      (def
         ltInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply isTrue# (parens (apply (apply ltInt32# x) y)))))))))
      (foreign malgo_gt_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig gtInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         gtInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_gt_int32_t x) y)))))))
      (sig gtInt32 (-> Int32 (-> Int32 Bool)))
      (def
         gtInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply isTrue# (parens (apply (apply gtInt32# x) y)))))))))
      (foreign malgo_le_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig leInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         leInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_le_int32_t x) y)))))))
      (sig leInt32 (-> Int32 (-> Int32 Bool)))
      (def
         leInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply isTrue# (parens (apply (apply leInt32# x) y)))))))))
      (foreign malgo_ge_int32_t (-> Int32# (-> Int32# Int32#)))
      (sig geInt32# (-> Int32# (-> Int32# Int32#)))
      (def
         geInt32#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ge_int32_t x) y)))))))
      (sig geInt32 (-> Int32 (-> Int32 Bool)))
      (def
         geInt32
         (fn
            ((clause
                ((con Int32# (x)) (con Int32# (y)))
                (seq (do (apply isTrue# (parens (apply (apply geInt32# x) y)))))))))
      (foreign malgo_eq_int64_t (-> Int64# (-> Int64# Int32#)))
      (sig eqInt64# (-> Int64# (-> Int64# Int32#)))
      (def
         eqInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_eq_int64_t x) y)))))))
      (sig eqInt64 (-> Int64 (-> Int64 Bool)))
      (def
         eqInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply isTrue# (parens (apply (apply eqInt64# x) y)))))))))
      (foreign malgo_ne_int64_t (-> Int64# (-> Int64# Int32#)))
      (sig neInt64# (-> Int64# (-> Int64# Int32#)))
      (def
         neInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ne_int64_t x) y)))))))
      (sig neInt64 (-> Int64 (-> Int64 Bool)))
      (def
         neInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply isTrue# (parens (apply (apply neInt64# x) y)))))))))
      (foreign malgo_lt_int64_t (-> Int64# (-> Int64# Int32#)))
      (sig ltInt64# (-> Int64# (-> Int64# Int32#)))
      (def
         ltInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_lt_int64_t x) y)))))))
      (sig ltInt64 (-> Int64 (-> Int64 Bool)))
      (def
         ltInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply isTrue# (parens (apply (apply ltInt64# x) y)))))))))
      (foreign malgo_gt_int64_t (-> Int64# (-> Int64# Int32#)))
      (sig gtInt64# (-> Int64# (-> Int64# Int32#)))
      (def
         gtInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_gt_int64_t x) y)))))))
      (sig gtInt64 (-> Int64 (-> Int64 Bool)))
      (def
         gtInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply isTrue# (parens (apply (apply gtInt64# x) y)))))))))
      (foreign malgo_le_int64_t (-> Int64# (-> Int64# Int32#)))
      (sig leInt64# (-> Int64# (-> Int64# Int32#)))
      (def
         leInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_le_int64_t x) y)))))))
      (sig leInt64 (-> Int64 (-> Int64 Bool)))
      (def
         leInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply isTrue# (parens (apply (apply leInt64# x) y)))))))))
      (foreign malgo_ge_int64_t (-> Int64# (-> Int64# Int32#)))
      (sig geInt64# (-> Int64# (-> Int64# Int32#)))
      (def
         geInt64#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ge_int64_t x) y)))))))
      (sig geInt64 (-> Int64 (-> Int64 Bool)))
      (def
         geInt64
         (fn
            ((clause
                ((con Int64# (x)) (con Int64# (y)))
                (seq (do (apply isTrue# (parens (apply (apply geInt64# x) y)))))))))
      (foreign malgo_eq_float (-> Float# (-> Float# Int32#)))
      (sig eqFloat# (-> Float# (-> Float# Int32#)))
      (def
         eqFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_eq_float x) y)))))))
      (sig eqFloat (-> Float (-> Float Bool)))
      (def
         eqFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply isTrue# (parens (apply (apply eqFloat# x) y)))))))))
      (foreign malgo_ne_float (-> Float# (-> Float# Int32#)))
      (sig neFloat# (-> Float# (-> Float# Int32#)))
      (def
         neFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ne_float x) y)))))))
      (sig neFloat (-> Float (-> Float Bool)))
      (def
         neFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply isTrue# (parens (apply (apply neFloat# x) y)))))))))
      (foreign malgo_lt_float (-> Float# (-> Float# Int32#)))
      (sig ltFloat# (-> Float# (-> Float# Int32#)))
      (def
         ltFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_lt_float x) y)))))))
      (sig ltFloat (-> Float (-> Float Bool)))
      (def
         ltFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply isTrue# (parens (apply (apply ltFloat# x) y)))))))))
      (foreign malgo_gt_float (-> Float# (-> Float# Int32#)))
      (sig gtFloat# (-> Float# (-> Float# Int32#)))
      (def
         gtFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_gt_float x) y)))))))
      (sig gtFloat (-> Float (-> Float Bool)))
      (def
         gtFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply isTrue# (parens (apply (apply gtFloat# x) y)))))))))
      (foreign malgo_le_float (-> Float# (-> Float# Int32#)))
      (sig leFloat# (-> Float# (-> Float# Int32#)))
      (def
         leFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_le_float x) y)))))))
      (sig leFloat (-> Float (-> Float Bool)))
      (def
         leFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply isTrue# (parens (apply (apply leFloat# x) y)))))))))
      (foreign malgo_ge_float (-> Float# (-> Float# Int32#)))
      (sig geFloat# (-> Float# (-> Float# Int32#)))
      (def
         geFloat#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ge_float x) y)))))))
      (sig geFloat (-> Float (-> Float Bool)))
      (def
         geFloat
         (fn
            ((clause
                ((con Float# (x)) (con Float# (y)))
                (seq (do (apply isTrue# (parens (apply (apply geFloat# x) y)))))))))
      (foreign malgo_eq_double (-> Double# (-> Double# Int32#)))
      (sig eqDouble# (-> Double# (-> Double# Int32#)))
      (def
         eqDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_eq_double x) y)))))))
      (sig eqDouble (-> Double (-> Double Bool)))
      (def
         eqDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply isTrue# (parens (apply (apply eqDouble# x) y)))))))))
      (foreign malgo_ne_double (-> Double# (-> Double# Int32#)))
      (sig neDouble# (-> Double# (-> Double# Int32#)))
      (def
         neDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ne_double x) y)))))))
      (sig neDouble (-> Double (-> Double Bool)))
      (def
         neDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply isTrue# (parens (apply (apply neDouble# x) y)))))))))
      (foreign malgo_lt_double (-> Double# (-> Double# Int32#)))
      (sig ltDouble# (-> Double# (-> Double# Int32#)))
      (def
         ltDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_lt_double x) y)))))))
      (sig ltDouble (-> Double (-> Double Bool)))
      (def
         ltDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply isTrue# (parens (apply (apply ltDouble# x) y)))))))))
      (foreign malgo_gt_double (-> Double# (-> Double# Int32#)))
      (sig gtDouble# (-> Double# (-> Double# Int32#)))
      (def
         gtDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_gt_double x) y)))))))
      (sig gtDouble (-> Double (-> Double Bool)))
      (def
         gtDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply isTrue# (parens (apply (apply gtDouble# x) y)))))))))
      (foreign malgo_le_double (-> Double# (-> Double# Int32#)))
      (sig leDouble# (-> Double# (-> Double# Int32#)))
      (def
         leDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_le_double x) y)))))))
      (sig leDouble (-> Double (-> Double Bool)))
      (def
         leDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply isTrue# (parens (apply (apply leDouble# x) y)))))))))
      (foreign malgo_ge_double (-> Double# (-> Double# Int32#)))
      (sig geDouble# (-> Double# (-> Double# Int32#)))
      (def
         geDouble#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ge_double x) y)))))))
      (sig geDouble (-> Double (-> Double Bool)))
      (def
         geDouble
         (fn
            ((clause
                ((con Double# (x)) (con Double# (y)))
                (seq (do (apply isTrue# (parens (apply (apply geDouble# x) y)))))))))
      (foreign malgo_eq_char (-> Char# (-> Char# Int32#)))
      (sig eqChar# (-> Char# (-> Char# Int32#)))
      (def
         eqChar#
         (fn ((clause (x y) (seq (do (apply (apply malgo_eq_char x) y)))))))
      (sig eqChar (-> Char (-> Char Bool)))
      (def
         eqChar
         (fn
            ((clause
                ((con Char# (x)) (con Char# (y)))
                (seq (do (apply isTrue# (parens (apply (apply eqChar# x) y)))))))))
      (foreign malgo_ne_char (-> Char# (-> Char# Int32#)))
      (sig neChar# (-> Char# (-> Char# Int32#)))
      (def
         neChar#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ne_char x) y)))))))
      (sig neChar (-> Char (-> Char Bool)))
      (def
         neChar
         (fn
            ((clause
                ((con Char# (x)) (con Char# (y)))
                (seq (do (apply isTrue# (parens (apply (apply neChar# x) y)))))))))
      (foreign malgo_lt_char (-> Char# (-> Char# Int32#)))
      (sig ltChar# (-> Char# (-> Char# Int32#)))
      (def
         ltChar#
         (fn ((clause (x y) (seq (do (apply (apply malgo_lt_char x) y)))))))
      (sig ltChar (-> Char (-> Char Bool)))
      (def
         ltChar
         (fn
            ((clause
                ((con Char# (x)) (con Char# (y)))
                (seq (do (apply isTrue# (parens (apply (apply ltChar# x) y)))))))))
      (foreign malgo_gt_char (-> Char# (-> Char# Int32#)))
      (sig gtChar# (-> Char# (-> Char# Int32#)))
      (def
         gtChar#
         (fn ((clause (x y) (seq (do (apply (apply malgo_gt_char x) y)))))))
      (sig gtChar (-> Char (-> Char Bool)))
      (def
         gtChar
         (fn
            ((clause
                ((con Char# (x)) (con Char# (y)))
                (seq (do (apply isTrue# (parens (apply (apply gtChar# x) y)))))))))
      (foreign malgo_le_char (-> Char# (-> Char# Int32#)))
      (sig leChar# (-> Char# (-> Char# Int32#)))
      (def
         leChar#
         (fn ((clause (x y) (seq (do (apply (apply malgo_le_char x) y)))))))
      (sig leChar (-> Char (-> Char Bool)))
      (def
         leChar
         (fn
            ((clause
                ((con Char# (x)) (con Char# (y)))
                (seq (do (apply isTrue# (parens (apply (apply leChar# x) y)))))))))
      (foreign malgo_ge_char (-> Char# (-> Char# Int32#)))
      (sig geChar# (-> Char# (-> Char# Int32#)))
      (def
         geChar#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ge_char x) y)))))))
      (sig geChar (-> Char (-> Char Bool)))
      (def
         geChar
         (fn
            ((clause
                ((con Char# (x)) (con Char# (y)))
                (seq (do (apply isTrue# (parens (apply (apply geChar# x) y)))))))))
      (foreign malgo_eq_string (-> String# (-> String# Int32#)))
      (sig eqString# (-> String# (-> String# Int32#)))
      (def
         eqString#
         (fn ((clause (x y) (seq (do (apply (apply malgo_eq_string x) y)))))))
      (sig eqString (-> String (-> String Bool)))
      (def
         eqString
         (fn
            ((clause
                ((con String# (x)) (con String# (y)))
                (seq (do (apply isTrue# (parens (apply (apply eqString# x) y)))))))))
      (foreign malgo_ne_string (-> String# (-> String# Int32#)))
      (sig neString# (-> String# (-> String# Int32#)))
      (def
         neString#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ne_string x) y)))))))
      (sig neString (-> String (-> String Bool)))
      (def
         neString
         (fn
            ((clause
                ((con String# (x)) (con String# (y)))
                (seq (do (apply isTrue# (parens (apply (apply neString# x) y)))))))))
      (foreign malgo_lt_string (-> String# (-> String# Int32#)))
      (sig ltString# (-> String# (-> String# Int32#)))
      (def
         ltString#
         (fn ((clause (x y) (seq (do (apply (apply malgo_lt_string x) y)))))))
      (sig ltString (-> String (-> String Bool)))
      (def
         ltString
         (fn
            ((clause
                ((con String# (x)) (con String# (y)))
                (seq (do (apply isTrue# (parens (apply (apply ltString# x) y)))))))))
      (foreign malgo_gt_string (-> String# (-> String# Int32#)))
      (sig gtString# (-> String# (-> String# Int32#)))
      (def
         gtString#
         (fn ((clause (x y) (seq (do (apply (apply malgo_gt_string x) y)))))))
      (sig gtString (-> String (-> String Bool)))
      (def
         gtString
         (fn
            ((clause
                ((con String# (x)) (con String# (y)))
                (seq (do (apply isTrue# (parens (apply (apply gtString# x) y)))))))))
      (foreign malgo_le_string (-> String# (-> String# Int32#)))
      (sig leString# (-> String# (-> String# Int32#)))
      (def
         leString#
         (fn ((clause (x y) (seq (do (apply (apply malgo_le_string x) y)))))))
      (sig leString (-> String (-> String Bool)))
      (def
         leString
         (fn
            ((clause
                ((con String# (x)) (con String# (y)))
                (seq (do (apply isTrue# (parens (apply (apply leString# x) y)))))))))
      (foreign malgo_ge_string (-> String# (-> String# Int32#)))
      (sig geString# (-> String# (-> String# Int32#)))
      (def
         geString#
         (fn ((clause (x y) (seq (do (apply (apply malgo_ge_string x) y)))))))
      (sig geString (-> String (-> String Bool)))
      (def
         geString
         (fn
            ((clause
                ((con String# (x)) (con String# (y)))
                (seq (do (apply isTrue# (parens (apply (apply geString# x) y)))))))))
      (foreign malgo_char_ord (-> Char# Int32#))
      (sig ordChar# (-> Char# Int32#))
      (def ordChar# (fn ((clause (x) (seq (do (apply malgo_char_ord x)))))))
      (sig ordChar (-> Char Int32))
      (def
         ordChar
         (fn
            ((clause
                ((con Char# (chr)))
                (seq (do (apply Int32# (parens (apply ordChar# chr)))))))))
      (foreign malgo_is_digit (-> Char# Int32#))
      (sig isDigit# (-> Char# Int32#))
      (def isDigit# (fn ((clause (x) (seq (do (apply malgo_is_digit x)))))))
      (sig isDigit (-> Char Bool))
      (def
         isDigit
         (fn
            ((clause
                ((con Char# (x)))
                (seq (do (apply isTrue# (parens (apply isDigit# x)))))))))
      (foreign malgo_is_lower (-> Char# Int32#))
      (sig isLower# (-> Char# Int32#))
      (def isLower# (fn ((clause (x) (seq (do (apply malgo_is_lower x)))))))
      (sig isLower (-> Char Bool))
      (def
         isLower
         (fn
            ((clause
                ((con Char# (x)))
                (seq (do (apply isTrue# (parens (apply isLower# x)))))))))
      (foreign malgo_is_upper (-> Char# Int32#))
      (sig isUpper# (-> Char# Int32#))
      (def isUpper# (fn ((clause (x) (seq (do (apply malgo_is_upper x)))))))
      (sig isUpper (-> Char Bool))
      (def
         isUpper
         (fn
            ((clause
                ((con Char# (x)))
                (seq (do (apply isTrue# (parens (apply isUpper# x)))))))))
      (foreign malgo_is_alphanum (-> Char# Int32#))
      (sig isAlphanum# (-> Char# Int32#))
      (def isAlphanum# (fn ((clause (x) (seq (do (apply malgo_is_alphanum x)))))))
      (sig isAlphanum (-> Char Bool))
      (def
         isAlphanum
         (fn
            ((clause
                ((con Char# (x)))
                (seq (do (apply isTrue# (parens (apply isAlphanum# x)))))))))
      (foreign malgo_string_length (-> String# Int64#))
      (sig lengthString# (-> String# Int64#))
      (def
         lengthString#
         (fn ((clause (x) (seq (do (apply malgo_string_length x)))))))
      (sig lengthString (-> String Int64))
      (def
         lengthString
         (fn
            ((clause
                ((con String# (str)))
                (seq (do (apply Int64# (parens (apply lengthString# str)))))))))
      (foreign malgo_string_at (-> Int64# (-> String# Char#)))
      (sig atString# (-> Int64# (-> String# Char#)))
      (def
         atString#
         (fn ((clause (i x) (seq (do (apply (apply malgo_string_at i) x)))))))
      (sig atString (-> Int64 (-> String Char)))
      (def
         atString
         (fn
            ((clause
                ((con Int64# (i)) (con String# (x)))
                (seq (do (apply Char# (parens (apply (apply atString# i) x)))))))))
      (foreign malgo_string_cons (-> Char# (-> String# String#)))
      (sig consString# (-> Char# (-> String# String#)))
      (def
         consString#
         (fn ((clause (c cs) (seq (do (apply (apply malgo_string_cons c) cs)))))))
      (sig consString (-> Char (-> String String)))
      (def
         consString
         (fn
            ((clause
                ((con Char# (c)) (con String# (cs)))
                (seq
                   (do (apply String# (parens (apply (apply consString# c) cs)))))))))
      (foreign malgo_string_append (-> String# (-> String# String#)))
      (sig appendString# (-> String# (-> String# String#)))
      (def
         appendString#
         (fn ((clause (x y) (seq (do (apply (apply malgo_string_append x) y)))))))
      (sig appendString (-> String (-> String String)))
      (def
         appendString
         (fn
            ((clause
                ((con String# (x)) (con String# (y)))
                (seq
                   (do (apply String# (parens (apply (apply appendString# x) y)))))))))
      (foreign malgo_substring (-> String# (-> Int64# (-> Int64# String#))))
      (sig substring# (-> String# (-> Int64# (-> Int64# String#))))
      (def
         substring#
         (fn
            ((clause
                (str start end)
                (seq (do (apply (apply (apply malgo_substring str) start) end)))))))
      (sig substring (-> String (-> Int64 (-> Int64 String))))
      (def
         substring
         (fn
            ((clause
                ((con String# (str)) (con Int64# (start)) (con Int64# (end)))
                (seq
                   (do
                      (apply
                         String#
                         (parens (apply (apply (apply substring# str) start) end)))))))))
      (foreign malgo_int32_t_to_string (-> Int32# String#))
      (sig toStringInt32# (-> Int32# String#))
      (def
         toStringInt32#
         (fn ((clause (x) (seq (do (apply malgo_int32_t_to_string x)))))))
      (sig toStringInt32 (-> Int32 String))
      (def
         toStringInt32
         (fn
            ((clause
                ((con Int32# (x)))
                (seq (do (apply String# (parens (apply toStringInt32# x)))))))))
      (foreign malgo_int64_t_to_string (-> Int64# String#))
      (sig toStringInt64# (-> Int64# String#))
      (def
         toStringInt64#
         (fn ((clause (x) (seq (do (apply malgo_int64_t_to_string x)))))))
      (sig toStringInt64 (-> Int64 String))
      (def
         toStringInt64
         (fn
            ((clause
                ((con Int64# (x)))
                (seq (do (apply String# (parens (apply toStringInt64# x)))))))))
      (foreign malgo_float_to_string (-> Float# String#))
      (sig toStringFloat# (-> Float# String#))
      (def
         toStringFloat#
         (fn ((clause (x) (seq (do (apply malgo_float_to_string x)))))))
      (sig toStringFloat (-> Float String))
      (def
         toStringFloat
         (fn
            ((clause
                ((con Float# (x)))
                (seq (do (apply String# (parens (apply toStringFloat# x)))))))))
      (foreign malgo_double_to_string (-> Double# String#))
      (sig toStringDouble# (-> Double# String#))
      (def
         toStringDouble#
         (fn ((clause (x) (seq (do (apply malgo_double_to_string x)))))))
      (sig toStringDouble (-> Double String))
      (def
         toStringDouble
         (fn
            ((clause
                ((con Double# (x)))
                (seq (do (apply String# (parens (apply toStringDouble# x)))))))))
      (foreign malgo_char_to_string (-> Char# String#))
      (sig toStringChar# (-> Char# String#))
      (def
         toStringChar#
         (fn ((clause (x) (seq (do (apply malgo_char_to_string x)))))))
      (sig toStringChar (-> Char String))
      (def
         toStringChar
         (fn
            ((clause
                ((con Char# (x)))
                (seq (do (apply String# (parens (apply toStringChar# x)))))))))
      (foreign malgo_exit_failure (-> (tuple) a))
      (sig exitFailure (-> (tuple) a))
      (def
         exitFailure
         (fn ((clause (_) (seq (do (apply malgo_exit_failure (tuple))))))))
      (foreign malgo_newline (-> (tuple) (tuple)))
      (def newline (fn ((clause (_) (seq (do (apply malgo_newline (tuple))))))))
      (foreign malgo_print_char (-> Char# (tuple)))
      (sig printChar# (-> Char# (tuple)))
      (def printChar# (fn ((clause (x) (seq (do (apply malgo_print_char x)))))))
      (sig printChar (-> Char (tuple)))
      (def
         printChar
         (fn ((clause ((con Char# (x))) (seq (do (apply printChar# x)))))))
      (foreign malgo_print_string (-> String# (tuple)))
      (sig printString# (-> String# (tuple)))
      (def
         printString#
         (fn ((clause (x) (seq (do (apply malgo_print_string x)))))))
      (sig printString (-> String (tuple)))
      (def
         printString
         (fn ((clause ((con String# (x))) (seq (do (apply printString# x)))))))
      (foreign malgo_print (-> a (tuple)))
      (foreign malgo_flush (-> (tuple) (tuple)))
      (def flush (fn ((clause (_) (seq (do (apply malgo_flush (tuple))))))))
      (foreign malgo_get_char (-> (tuple) Char#))
      (def
         getChar
         (fn
            ((clause
                (_)
                (seq (do (apply Char# (parens (apply malgo_get_char (tuple))))))))))
      (foreign malgo_get_contents (-> (tuple) String#))
      (def
         getContents
         (fn
            ((clause
                (_)
                (seq
                   (do
                      (apply String# (parens (apply malgo_get_contents (tuple))))))))))))