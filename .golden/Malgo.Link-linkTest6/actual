Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "R", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 30 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test6.mlg.R" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
         ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
         ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 30 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "G", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 31 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test6.mlg.G" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
         ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
         ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 31 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "B", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 32 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
        ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
         ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
         ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 32 } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
     { name = "malgo_exit_failure", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 33 } } ],
    [ SumT [ Con Tuple [] ] ] :-> AnyT, RawCall "malgo_exit_failure"
    ( [ SumT [ Con Tuple [] ] ] :-> AnyT )
    [ Var
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 33 } } ) ] ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 34 } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 34 } } ) ] ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "rtob", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "r", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 35 } } ], [ AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = SumT
      [ Con
       ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
      { name = "scrutinee", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 49 } } )
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
       ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "r", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 35 } } ) ) )
    ( Switch
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
         ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
         ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
        { name = "scrutinee", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 49 } } ) )
     [
      ( Data "test/testcases/malgo/Test6.mlg.R", Destruct
       ( Var
        ( Meta
         { meta = SumT
          [ Con
           ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
           ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
           ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
          { name = "scrutinee", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 49 } } ) )
       ( Con ( Data "test/testcases/malgo/Test6.mlg.R" ) [] ) []
       ( CallDirect
        ( Meta
         { meta = [] :-> AnyT, id = Id
          { name = "B", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } } ) [] ) ),
      ( Data "test/testcases/malgo/Test6.mlg.G", Destruct
       ( Var
        ( Meta
         { meta = SumT
          [ Con
           ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
           ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
           ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
          { name = "scrutinee", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 49 } } ) )
       ( Con ( Data "test/testcases/malgo/Test6.mlg.G" ) [] ) []
       ( Let
        [ LocalDef
         { _variable = Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 36 } }, typ = SumT
          [ Con Tuple [] ], _object = Pack
          ( SumT [ Con Tuple [] ] )
          ( Con Tuple [] ) [] } ]
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 38 } } )
         ( Call
          ( Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "malgo_exit_failure", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "let", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 36 } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 38 } } ) ) ) ) ) ),
      ( Data "test/testcases/malgo/Test6.mlg.B", Destruct
       ( Var
        ( Meta
         { meta = SumT
          [ Con
           ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
           ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
           ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
          { name = "scrutinee", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 49 } } ) )
       ( Con ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ) []
       ( Let
        [ LocalDef
         { _variable = Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 36 } }, typ = SumT
          [ Con Tuple [] ], _object = Pack
          ( SumT [ Con Tuple [] ] )
          ( Con Tuple [] ) [] } ]
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 38 } } )
         ( Call
          ( Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "malgo_exit_failure", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "let", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 36 } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 38 } } ) ) ) ) ) ) ] ( Error AnyT ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath
       { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath
        { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 39 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "fun", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 43 } }, typ = [ AnyT ] :-> SumT
      [ Con Tuple [] ], _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "b", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 40 } } ]
      ( Assign
       ( Meta
        { meta = SumT
         [ Con
          ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
          ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
          ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
         { name = "scrutinee", moduleName = Artifact
          ( ArtifactPath
           { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 50 } } )
       ( Cast
        ( SumT
         [ Con
          ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
          ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
          ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ] )
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "b", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 40 } } ) ) )
       ( Switch
        ( Var
         ( Meta
          { meta = SumT
           [ Con
            ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
            ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
            ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
           { name = "scrutinee", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 50 } } ) )
        [
         ( Data "test/testcases/malgo/Test6.mlg.R", Destruct
          ( Var
           ( Meta
            { meta = SumT
             [ Con
              ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
              ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
              ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
             { name = "scrutinee", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 50 } } ) )
          ( Con ( Data "test/testcases/malgo/Test6.mlg.R" ) [] ) []
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 41 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ StringT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "malgo_print_string", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } } ) )
            [ Unboxed ( String "WRONG" ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 41 } } ) ) ) ) ),
         ( Data "test/testcases/malgo/Test6.mlg.G", Destruct
          ( Var
           ( Meta
            { meta = SumT
             [ Con
              ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
              ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
              ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
             { name = "scrutinee", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 50 } } ) )
          ( Con ( Data "test/testcases/malgo/Test6.mlg.G" ) [] ) []
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 41 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ StringT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "malgo_print_string", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } } ) )
            [ Unboxed ( String "WRONG" ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 41 } } ) ) ) ) ),
         ( Data "test/testcases/malgo/Test6.mlg.B", Destruct
          ( Var
           ( Meta
            { meta = SumT
             [ Con
              ( Data "test/testcases/malgo/Test6.mlg.R" ) [], Con
              ( Data "test/testcases/malgo/Test6.mlg.G" ) [], Con
              ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ], id = Id
             { name = "scrutinee", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 50 } } ) )
          ( Con ( Data "test/testcases/malgo/Test6.mlg.B" ) [] ) []
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath
               { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 42 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ StringT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "malgo_print_string", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } } ) )
            [ Unboxed ( String "OK" ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath
                 { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 42 } } ) ) ) ) ) ]
        ( Error ( SumT [ Con Tuple [] ] ) ) ) ) } ]
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath
         { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 45 } } )
     ( CallDirect
      ( Meta
       { meta = [] :-> AnyT, id = Id
        { name = "R", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } } ) [] )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath
          { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 46 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "rtob", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 45 } } ) ] )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath
           { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 47 } } )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath
             { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 46 } } ) ) )
       ( Assign
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath
            { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 48 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> SumT
            [ Con Tuple [] ], id = Id
            { name = "fun", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 43 } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 47 } } ) ] )
        ( Cast
         ( SumT [ Con Tuple [] ] )
         ( Var
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath
              { rawPath = "./test/testcases/malgo/Test6.mlg", originPath = "/workspaces/malgo/test/testcases/malgo/Test6.mlg", relPath = "test/testcases/malgo/Test6.mlg", targetPath = "/workspaces/malgo/.malgo-work/test/testcases/malgo/Test6.mlg" } ), sort = Temporal 48 } } ) ) ) ) ) ) ) ) ], extFuns =
  [
   ( "malgo_exit_failure", [ SumT [ Con Tuple [] ] ] :-> AnyT ),
   ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ) ] }