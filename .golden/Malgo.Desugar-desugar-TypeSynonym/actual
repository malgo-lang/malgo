Program
 { topVars =
  [
   ( Meta
    { meta = SumT
     [ Con Tuple [ AnyT, AnyT ] ], id = Id
     { name = "hello", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = External } }, SumT
    [ Con Tuple [ AnyT, AnyT ] ], Assign
    ( Meta
     { meta = SumT
      [ Con Tuple [ AnyT, AnyT ] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 37 } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 33 } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 32 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ StringT ] :-> AnyT, id = Id
          { name = "String#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( String "hello" ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 32 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 35 } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 34 } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ StringT ] :-> AnyT, id = Id
           { name = "String#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( String "world" ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 34 } } ) ) ) )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = SumT
          [ Con Tuple [ AnyT, AnyT ] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 36 } }, typ = SumT
         [ Con Tuple [ AnyT, AnyT ] ], _object = Pack
         ( SumT [ Con Tuple [ AnyT, AnyT ] ] )
         ( Con Tuple [ AnyT, AnyT ] )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 33 } } ), Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 35 } } ) ] } ]
       ( Atom
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [ AnyT, AnyT ] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 36 } } ) ) ) ) ) )
    ( Atom
     ( Var
      ( Meta
       { meta = SumT
        [ Con Tuple [ AnyT, AnyT ] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 37 } } ) ) ) ) ], topFuns =
  [
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "TCon", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con ( Data "test/testcases/malgo/TypeSynonym.mlg.TCon" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 30 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/TypeSynonym.mlg.TCon" ) [] ], _object = Pack
      ( SumT [ Con ( Data "test/testcases/malgo/TypeSynonym.mlg.TCon" ) [] ] )
      ( Con ( Data "test/testcases/malgo/TypeSynonym.mlg.TCon" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/TypeSynonym.mlg.TCon" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 30 } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "idOverS", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 31 } } ], [ AnyT ] :-> AnyT, Atom
    ( Var
     ( Meta
      { meta = AnyT, id = Id
       { name = "x", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 31 } } ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 38 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [
       [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
       [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 41 } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "cast", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 39 } } )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = SumT
         [ Con Tuple [ AnyT, AnyT ] ], id = Id
         { name = "hello", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = External } } ) ) )
     ( Assign
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 40 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :->
          ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
          { name = "|>", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "cast", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 39 } } ) ] )
      ( Cast
       (
        [
         [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
         [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 40 } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta =
       [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 53 } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta =
         [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 52 } }, typ =
        [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = SumT
          [ Con Tuple [ AnyT, AnyT ] ], id = Id
          { name = "tuple", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 42 } } ]
        ( Match
         ( Atom
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple [ AnyT, AnyT ] ], id = Id
             { name = "tuple", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 42 } } ) ) )
         [ Unpack
          ( Con Tuple [ AnyT, AnyT ] )
          [ Meta
           { meta = AnyT, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 43 } }, Meta
           { meta = AnyT, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 44 } } ]
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 46 } } )
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 45 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ AnyT ] :-> SumT
                [ Con Tuple [] ], id = Id
                { name = "putStr", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "p", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 43 } } ) ] )
            ( Cast
             ( SumT [ Con Tuple [] ] )
             ( Var
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 45 } } ) ) ) )
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 50 } } )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 48 } } )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 47 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ StringT ] :-> AnyT, id = Id
                  { name = "String#", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
               [ Unboxed ( String " " ) ] )
              ( Cast AnyT
               ( Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 47 } } ) ) ) )
             ( Assign
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 49 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ AnyT ] :-> SumT
                  [ Con Tuple [] ], id = Id
                  { name = "putStr", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 48 } } ) ] )
              ( Cast
               ( SumT [ Con Tuple [] ] )
               ( Var
                ( Meta
                 { meta = SumT
                  [ Con Tuple [] ], id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 49 } } ) ) ) ) )
            ( Assign
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 51 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "putStrLn", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "p", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 44 } } ) ] )
             ( Cast
              ( SumT [ Con Tuple [] ] )
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 51 } } ) ) ) ) ) ) ] ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 52 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 54 } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [
           [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
           [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 41 } } ) )
       [ Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 53 } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeSynonym.mlg" ), sort = Temporal 54 } } ) ) ) ) ) ) ], extFuns = [] }