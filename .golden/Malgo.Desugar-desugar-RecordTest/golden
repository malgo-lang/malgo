Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ RecordT
      ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, id = Id
     { name = "B", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = External } },
    [ Meta
     { meta = RecordT
      ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ],
    [ RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/RecordTest.mlg.B" )
        [ RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/RecordTest.mlg.B" )
       [ RecordT
        ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/RecordTest.mlg.B" )
        [ RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] ] )
      ( Con
       ( Data "test/testcases/malgo/RecordTest.mlg.B" )
       [ RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] )
      [ Var
       ( Meta
        { meta = RecordT
         ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/RecordTest.mlg.B" )
         [ RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "g", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "b", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/RecordTest.mlg.B" )
       [ RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "b", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) )
    [ Unpack
     ( Con
      ( Data "test/testcases/malgo/RecordTest.mlg.B" )
      [ RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] )
     [ Meta
      { meta = RecordT
       ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ]
     ( Match
      ( Atom
       ( Var
        ( Meta
         { meta = RecordT
          ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) )
      [ OpenRecord
       ( fromList
        [
         ( "a", Meta
          { meta = AnyT, id = Id
           { name = "p", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ),
         ( "b", Meta
          { meta = AnyT, id = Id
           { name = "p", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
       ( Atom
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "p", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ] ) ] ),
   ( Meta
    { meta =
     [ RecordT
      ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, id = Id
     { name = "f", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = External } },
    [ Meta
     { meta = RecordT
      ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
      { name = "record", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ],
    [ RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, Match
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
        { name = "record", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) )
    [ OpenRecord
     ( fromList
      [
       ( "a", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ),
       ( "b", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
     ( Atom
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Match
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ Int32T ] :-> AnyT, id = Id
          { name = "Int32#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( Int32 32 ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ Int32T ] :-> AnyT, id = Id
           { name = "Int32#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( Int32 10 ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = RecordT
          ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
          { name = "record", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } }, typ = RecordT
         ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), _object = Record
         ( fromList
          [
           ( "a", Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ),
           ( "b", Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ] ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta = RecordT
           ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
           { name = "record", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ) ) )
    [ Bind
     ( Meta
      { meta = RecordT
       ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
       { name = "let_test/testcases/malgo/RecordTest.mlg.#x_5", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
     ( RecordT ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta =
              [ RecordT
               ( fromList
                [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, id = Id
              { name = "f", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = RecordT
              ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
              { name = "let_test/testcases/malgo/RecordTest.mlg.#x_5", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
          ( Cast AnyT
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) )
         ( Assign
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ AnyT ] :-> AnyT ), id = Id
              { name = "addInt32", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( [ AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta =
            [ RecordT
             ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
          ( Let
           [ LocalDef
            { _variable = Meta
             { meta =
              [ RecordT
               ( fromList
                [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } }, typ =
             [ RecordT
              ( fromList
               [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, _object = Fun
             [ Meta
              { meta = RecordT
               ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
               { name = "record", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ]
             ( Match
              ( Atom
               ( Var
                ( Meta
                 { meta = RecordT
                  ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
                  { name = "record", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) )
              [ OpenRecord
               ( fromList
                [
                 ( "a", Meta
                  { meta = AnyT, id = Id
                   { name = "p", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ),
                 ( "b", Meta
                  { meta = AnyT, id = Id
                   { name = "p", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
               ( Atom
                ( Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "p", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ] ) } ]
           ( Atom
            ( Var
             ( Meta
              { meta =
               [ RecordT
                ( fromList
                 [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, id = Id
               { name = "fun", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta =
               [ RecordT
                ( fromList
                 [ ( "a", AnyT ), ( "b", AnyT ) ] ) ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) )
            [ Var
             ( Meta
              { meta = RecordT
               ( fromList [ ( "a", AnyT ), ( "b", AnyT ) ] ), id = Id
               { name = "let_test/testcases/malgo/RecordTest.mlg.#x_5", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
          ( Cast AnyT
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "toStringInt32", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "printString", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RecordTest.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) ], extFuns = [] }