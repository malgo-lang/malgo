Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [ StringT ] :-> AnyT, id = Id
     { name = "String#", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ], [ StringT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] ] )
      ( Con
       ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] )
      [ Var
       ( Meta
        { meta = StringT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_newline", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_newline"
    ( [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ] ),
   ( Meta
    { meta = [ StringT ] :-> AnyT, id = Id
     { name = "string#", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ], [ StringT ] :-> AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } )
    ( Call
     ( Var
      ( Meta
       { meta = [ StringT ] :-> AnyT, id = Id
        { name = "String#", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } } ) )
     [ Var
      ( Meta
       { meta = StringT, id = Id
        { name = "x", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ] )
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "putStrLn", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "string#", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ], [ AnyT ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = SumT
      [ Con
       ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] ], id = Id
      { name = "scrutinee", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } )
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "string#", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ) )
    ( Switch
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] ], id = Id
        { name = "scrutinee", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) )
     [
      ( Data "test/testcases/malgo/HelloBoxed.mlg.String#", Destruct
       ( Var
        ( Meta
         { meta = SumT
          [ Con
           ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] ], id = Id
          { name = "scrutinee", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) )
       ( Con
        ( Data "test/testcases/malgo/HelloBoxed.mlg.String#" ) [ StringT ] )
       [ Meta
        { meta = StringT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ]
       ( Assign
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ StringT ] :-> SumT
            [ Con Tuple [] ], id = Id
            { name = "malgo_print_string", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = StringT, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ] )
        ( Assign
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } )
         ( Cast
          ( SumT [ Con Tuple [] ] )
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ) )
         ( Let
          [ LocalDef
           { _variable = Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "let", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } }, typ = SumT
            [ Con Tuple [] ], _object = Pack
            ( SumT [ Con Tuple [] ] )
            ( Con Tuple [] ) [] } ]
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta =
               [ SumT [ Con Tuple [] ] ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "malgo_newline", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "let", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ) ) ) ) ) ) ) ]
     ( Error ( SumT [ Con Tuple [] ] ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } )
    ( Call
     ( Var
      ( Meta
       { meta = [ StringT ] :-> AnyT, id = Id
        { name = "String#", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } } ) )
     [ Unboxed ( String "Hello, world" ) ] )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "putStrLn", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/HelloBoxed.mlg" ), sort = Temporal } } ) ) ) ) ) ) ], extFuns =
  [
   ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ),
   ( "malgo_newline", [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ) ] }