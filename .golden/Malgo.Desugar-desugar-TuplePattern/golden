Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "A", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ] )
      ( Con ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "B", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ] )
      ( Con ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "C", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
       ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
        ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ] )
      ( Con ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
         ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [
       [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
       [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [ AnyT, AnyT ] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
      ( CallDirect
       ( Meta
        { meta = [] :-> AnyT, id = Id
         { name = "A", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = External } } ) [] )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
       ( CallDirect
        ( Meta
         { meta = [] :-> AnyT, id = Id
          { name = "B", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = External } } ) [] )
       ( Let
        [ LocalDef
         { _variable = Meta
          { meta = SumT
           [ Con Tuple [ AnyT, AnyT ] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } }, typ = SumT
          [ Con Tuple [ AnyT, AnyT ] ], _object = Pack
          ( SumT [ Con Tuple [ AnyT, AnyT ] ] )
          ( Con Tuple [ AnyT, AnyT ] )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ), Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ] } ]
        ( Atom
         ( Var
          ( Meta
           { meta = SumT
            [ Con Tuple [ AnyT, AnyT ] ], id = Id
            { name = "let", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "cast", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [ AnyT, AnyT ] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) )
      ( Assign
       ( Meta
        { meta =
         [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :->
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
           { name = "|>", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "cast", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        (
         [
          [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
          [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta =
           [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ) ) )
    ( Assign
     ( Meta
      { meta =
       [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta =
         [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } }, typ =
        [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = SumT
          [ Con Tuple [ AnyT, AnyT ] ], id = Id
          { name = "tuple", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ]
        ( Match
         ( Atom
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple [ AnyT, AnyT ] ], id = Id
             { name = "tuple", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) )
         [ Unpack
          ( Con Tuple [ AnyT, AnyT ] )
          [ Meta
           { meta = AnyT, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } }, Meta
           { meta = AnyT, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ]
          ( Match
           ( Cast
            ( SumT
             [ Con
              ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [], Con
              ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [], Con
              ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ] )
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "p", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) )
           [ Unpack
            ( Con ( Data "test/testcases/malgo/TuplePattern.mlg.A" ) [] ) []
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ StringT ] :-> AnyT, id = Id
                  { name = "String#", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
               [ Unboxed ( String "A" ) ] )
              ( Cast AnyT
               ( Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) )
             ( Assign
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ AnyT ] :-> SumT
                  [ Con Tuple [] ], id = Id
                  { name = "printString", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ] )
              ( Cast
               ( SumT [ Con Tuple [] ] )
               ( Var
                ( Meta
                 { meta = SumT
                  [ Con Tuple [] ], id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ) ), Unpack
            ( Con ( Data "test/testcases/malgo/TuplePattern.mlg.B" ) [] ) []
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "let", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } }, typ = SumT
               [ Con Tuple [] ], _object = Pack
               ( SumT [ Con Tuple [] ] )
               ( Con Tuple [] ) [] } ]
             ( Atom
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "let", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ), Unpack
            ( Con ( Data "test/testcases/malgo/TuplePattern.mlg.C" ) [] ) []
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "let", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } }, typ = SumT
               [ Con Tuple [] ], _object = Pack
               ( SumT [ Con Tuple [] ] )
               ( Con Tuple [] ) [] } ]
             ( Atom
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "let", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ) ] ) ] ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [
           [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
           [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [ AnyT, AnyT ] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TuplePattern.mlg" ), sort = Temporal } } ) ) ) ) ) ) ], extFuns = [] }