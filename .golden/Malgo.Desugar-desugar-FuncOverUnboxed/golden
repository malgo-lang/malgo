Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [ Int64T ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "f", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = External } },
    [ Meta
     { meta = Int64T, id = Id
      { name = "unboxed", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ], [ Int64T ] :-> SumT
    [ Con Tuple [] ], Match
    ( Atom
     ( Var
      ( Meta
       { meta = Int64T, id = Id
        { name = "unboxed", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ) )
    [ Exact
     ( Int64 0 )
     ( Assign
      ( Meta
       { meta = StringT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = StringT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ Int64T ] :-> StringT, id = Id
           { name = "toStringInt64#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( Int64 1 ) ] )
       ( Cast StringT
        ( Var
         ( Meta
          { meta = StringT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ StringT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "printString#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = StringT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ) ) ) ), Exact
     ( Int64 1 )
     ( Assign
      ( Meta
       { meta = StringT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = StringT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ Int64T ] :-> StringT, id = Id
           { name = "toStringInt64#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( Int64 1 ) ] )
       ( Cast StringT
        ( Var
         ( Meta
          { meta = StringT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ StringT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "printString#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = StringT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ) ) ) ), Bind
     ( Meta
      { meta = Int64T, id = Id
       { name = "_", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) Int64T
     ( Assign
      ( Meta
       { meta = StringT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = StringT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ Int64T ] :-> StringT, id = Id
           { name = "toStringInt64#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( Int64 0 ) ] )
       ( Cast StringT
        ( Var
         ( Meta
          { meta = StringT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ StringT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "printString#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = StringT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ) ) ) ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } )
    ( Call
     ( Var
      ( Meta
       { meta = [ Int64T ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = External } } ) )
     [ Unboxed ( Int64 0 ) ] )
    ( Cast
     ( SumT [ Con Tuple [] ] )
     ( Var
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FuncOverUnboxed.mlg" ), sort = Temporal } } ) ) ) ) ], extFuns = [] }