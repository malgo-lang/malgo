Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [ AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "<|>", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "eta", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 86 } } ], [ AnyT ] :->
    ( [ AnyT ] :-> AnyT ), Call
    ( Var
     ( Meta
      { meta = [ AnyT ] :->
       ( [ AnyT ] :-> AnyT ), id = Id
       { name = "Cons", moduleName = Artifact
        ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
    [ Var
     ( Meta
      { meta = AnyT, id = Id
       { name = "eta", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 86 } } ) ] ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "f", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "n", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 87 } } ], [ AnyT ] :-> AnyT, Match
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 97 } } )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 94 } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 88 } } )
       ( CallDirect
        ( Meta
         { meta = [] :-> AnyT, id = Id
          { name = "True", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] )
       ( Assign
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 92 } } )
        ( Let
         [ LocalDef
          { _variable = Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
            { name = "fun", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 91 } }, typ =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
           [ Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "$_", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 89 } } ]
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 90 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ Int32T ] :-> AnyT, id = Id
                { name = "Int32#", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
             [ Unboxed ( Int32 1 ) ] )
            ( Cast AnyT
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 90 } } ) ) ) ) } ]
         ( Atom
          ( Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 91 } } ) ) ) )
        ( Let
         [ LocalDef
          { _variable = Meta
           { meta = SumT
            [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
            { name = "let", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 93 } }, typ = SumT
           [ Con Tuple
            [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
           ( SumT [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
           ( Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 88 } } ), Var
            ( Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 92 } } ) ] } ]
         ( Atom
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple
              [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
             { name = "let", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 93 } } ) ) ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "cast", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 95 } } )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 94 } } ) ) )
       ( Assign
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 96 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :->
            ( [ AnyT ] :-> AnyT ), id = Id
            { name = "<|>", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "cast", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 95 } } ) ] )
        ( Cast
         ( [ AnyT ] :-> AnyT )
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 96 } } ) ) ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 134 } } )
      ( Assign
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 107 } } )
       ( Assign
        ( Meta
         { meta = SumT
          [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 104 } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 98 } } )
         ( CallDirect
          ( Meta
           { meta = [] :-> AnyT, id = Id
            { name = "True", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] )
         ( Assign
          ( Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 102 } } )
          ( Let
           [ LocalDef
            { _variable = Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 101 } }, typ =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
             [ Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "$_", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 99 } } ]
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 100 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ Int32T ] :-> AnyT, id = Id
                  { name = "Int32#", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
               [ Unboxed ( Int32 2 ) ] )
              ( Cast AnyT
               ( Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 100 } } ) ) ) ) } ]
           ( Atom
            ( Var
             ( Meta
              { meta =
               [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
               { name = "fun", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 101 } } ) ) ) )
          ( Let
           [ LocalDef
            { _variable = Meta
             { meta = SumT
              [ Con Tuple
               [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
              { name = "let", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 103 } }, typ = SumT
             [ Con Tuple
              [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
             ( SumT
              [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
             ( Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 98 } } ), Var
              ( Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 102 } } ) ] } ]
           ( Atom
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple
                [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
               { name = "let", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 103 } } ) ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "cast", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 105 } } )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple
              [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 104 } } ) ) )
         ( Assign
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 106 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ AnyT ] :-> AnyT ), id = Id
              { name = "<|>", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "cast", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 105 } } ) ] )
          ( Cast
           ( [ AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 106 } } ) ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 132 } } )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 117 } } )
         ( Assign
          ( Meta
           { meta = SumT
            [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 114 } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 108 } } )
           ( CallDirect
            ( Meta
             { meta = [] :-> AnyT, id = Id
              { name = "True", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] )
           ( Assign
            ( Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 112 } } )
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "fun", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 111 } }, typ =
               [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
               [ Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "$_", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 109 } } ]
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 110 } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta = [ Int32T ] :-> AnyT, id = Id
                    { name = "Int32#", moduleName = Artifact
                     ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                 [ Unboxed ( Int32 3 ) ] )
                ( Cast AnyT
                 ( Var
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 110 } } ) ) ) ) } ]
             ( Atom
              ( Var
               ( Meta
                { meta =
                 [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                 { name = "fun", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 111 } } ) ) ) )
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta = SumT
                [ Con Tuple
                 [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                { name = "let", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 113 } }, typ = SumT
               [ Con Tuple
                [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
               ( SumT
                [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
               ( Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 108 } } ), Var
                ( Meta
                 { meta =
                  [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 112 } } ) ] } ]
             ( Atom
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple
                  [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                 { name = "let", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 113 } } ) ) ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "cast", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 115 } } )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple
                [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 114 } } ) ) )
           ( Assign
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 116 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ AnyT ] :->
                ( [ AnyT ] :-> AnyT ), id = Id
                { name = "<|>", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "cast", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 115 } } ) ] )
            ( Cast
             ( [ AnyT ] :-> AnyT )
             ( Var
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 116 } } ) ) ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 130 } } )
          ( Assign
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 127 } } )
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple
               [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 124 } } )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 118 } } )
             ( CallDirect
              ( Meta
               { meta = [] :-> AnyT, id = Id
                { name = "True", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] )
             ( Assign
              ( Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 122 } } )
              ( Let
               [ LocalDef
                { _variable = Meta
                 { meta =
                  [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                  { name = "fun", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 121 } }, typ =
                 [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
                 [ Meta
                  { meta = SumT
                   [ Con Tuple [] ], id = Id
                   { name = "$_", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 119 } } ]
                 ( Assign
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 120 } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta = [ Int32T ] :-> AnyT, id = Id
                      { name = "Int32#", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                   [ Unboxed ( Int32 4 ) ] )
                  ( Cast AnyT
                   ( Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 120 } } ) ) ) ) } ]
               ( Atom
                ( Var
                 ( Meta
                  { meta =
                   [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                   { name = "fun", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 121 } } ) ) ) )
              ( Let
               [ LocalDef
                { _variable = Meta
                 { meta = SumT
                  [ Con Tuple
                   [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                  { name = "let", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 123 } }, typ = SumT
                 [ Con Tuple
                  [ AnyT,
                   [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
                 ( SumT
                  [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
                 ( Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
                 [ Var
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 118 } } ), Var
                  ( Meta
                   { meta =
                    [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 122 } } ) ] } ]
               ( Atom
                ( Var
                 ( Meta
                  { meta = SumT
                   [ Con Tuple
                    [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                   { name = "let", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 123 } } ) ) ) ) ) )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "cast", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 125 } } )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple
                  [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 124 } } ) ) )
             ( Assign
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 126 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ AnyT ] :->
                  ( [ AnyT ] :-> AnyT ), id = Id
                  { name = "<|>", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "cast", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 125 } } ) ] )
              ( Cast
               ( [ AnyT ] :-> AnyT )
               ( Var
                ( Meta
                 { meta = [ AnyT ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 126 } } ) ) ) ) ) )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 128 } } )
            ( CallDirect
             ( Meta
              { meta = [] :-> AnyT, id = Id
               { name = "Nil", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) [] )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 129 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 127 } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 128 } } ) ] )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 129 } } ) ) ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 131 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 117 } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 130 } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 131 } } ) ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 133 } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 107 } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 132 } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 133 } } ) ) ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 135 } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 97 } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 134 } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 135 } } ) ) ) ) ) )
    [ Bind
     ( Meta
      { meta = AnyT, id = Id
       { name = "let_test/testcases/malgo/RightAssoc.mlg.#x_2", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 136 } } ) AnyT
     ( Match
      ( Assign
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 146 } } )
       ( Assign
        ( Meta
         { meta = SumT
          [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 143 } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 137 } } )
         ( CallDirect
          ( Meta
           { meta = [] :-> AnyT, id = Id
            { name = "True", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] )
         ( Assign
          ( Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 141 } } )
          ( Let
           [ LocalDef
            { _variable = Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 140 } }, typ =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
             [ Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "$_", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 138 } } ]
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 139 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ Int32T ] :-> AnyT, id = Id
                  { name = "Int32#", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
               [ Unboxed ( Int32 1 ) ] )
              ( Cast AnyT
               ( Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 139 } } ) ) ) ) } ]
           ( Atom
            ( Var
             ( Meta
              { meta =
               [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
               { name = "fun", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 140 } } ) ) ) )
          ( Let
           [ LocalDef
            { _variable = Meta
             { meta = SumT
              [ Con Tuple
               [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
              { name = "let", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 142 } }, typ = SumT
             [ Con Tuple
              [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
             ( SumT
              [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
             ( Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 137 } } ), Var
              ( Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 141 } } ) ] } ]
           ( Atom
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple
                [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
               { name = "let", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 142 } } ) ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "cast", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 144 } } )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple
              [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 143 } } ) ) )
         ( Assign
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 145 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ AnyT ] :-> AnyT ), id = Id
              { name = "<|>", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "cast", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 144 } } ) ] )
          ( Cast
           ( [ AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 145 } } ) ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 183 } } )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 156 } } )
         ( Assign
          ( Meta
           { meta = SumT
            [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 153 } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 147 } } )
           ( CallDirect
            ( Meta
             { meta = [] :-> AnyT, id = Id
              { name = "True", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] )
           ( Assign
            ( Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 151 } } )
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "fun", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 150 } }, typ =
               [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
               [ Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "$_", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 148 } } ]
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 149 } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta = [ Int32T ] :-> AnyT, id = Id
                    { name = "Int32#", moduleName = Artifact
                     ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                 [ Unboxed ( Int32 2 ) ] )
                ( Cast AnyT
                 ( Var
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 149 } } ) ) ) ) } ]
             ( Atom
              ( Var
               ( Meta
                { meta =
                 [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                 { name = "fun", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 150 } } ) ) ) )
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta = SumT
                [ Con Tuple
                 [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                { name = "let", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 152 } }, typ = SumT
               [ Con Tuple
                [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
               ( SumT
                [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
               ( Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 147 } } ), Var
                ( Meta
                 { meta =
                  [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 151 } } ) ] } ]
             ( Atom
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple
                  [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                 { name = "let", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 152 } } ) ) ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "cast", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 154 } } )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple
                [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 153 } } ) ) )
           ( Assign
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 155 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ AnyT ] :->
                ( [ AnyT ] :-> AnyT ), id = Id
                { name = "<|>", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "cast", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 154 } } ) ] )
            ( Cast
             ( [ AnyT ] :-> AnyT )
             ( Var
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 155 } } ) ) ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 181 } } )
          ( Assign
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 166 } } )
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple
               [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 163 } } )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 157 } } )
             ( CallDirect
              ( Meta
               { meta = [] :-> AnyT, id = Id
                { name = "True", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] )
             ( Assign
              ( Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 161 } } )
              ( Let
               [ LocalDef
                { _variable = Meta
                 { meta =
                  [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                  { name = "fun", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 160 } }, typ =
                 [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
                 [ Meta
                  { meta = SumT
                   [ Con Tuple [] ], id = Id
                   { name = "$_", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 158 } } ]
                 ( Assign
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 159 } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta = [ Int32T ] :-> AnyT, id = Id
                      { name = "Int32#", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                   [ Unboxed ( Int32 3 ) ] )
                  ( Cast AnyT
                   ( Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 159 } } ) ) ) ) } ]
               ( Atom
                ( Var
                 ( Meta
                  { meta =
                   [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                   { name = "fun", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 160 } } ) ) ) )
              ( Let
               [ LocalDef
                { _variable = Meta
                 { meta = SumT
                  [ Con Tuple
                   [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                  { name = "let", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 162 } }, typ = SumT
                 [ Con Tuple
                  [ AnyT,
                   [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
                 ( SumT
                  [ Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
                 ( Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
                 [ Var
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 157 } } ), Var
                  ( Meta
                   { meta =
                    [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 161 } } ) ] } ]
               ( Atom
                ( Var
                 ( Meta
                  { meta = SumT
                   [ Con Tuple
                    [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                   { name = "let", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 162 } } ) ) ) ) ) )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "cast", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 164 } } )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple
                  [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 163 } } ) ) )
             ( Assign
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 165 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ AnyT ] :->
                  ( [ AnyT ] :-> AnyT ), id = Id
                  { name = "<|>", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "cast", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 164 } } ) ] )
              ( Cast
               ( [ AnyT ] :-> AnyT )
               ( Var
                ( Meta
                 { meta = [ AnyT ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 165 } } ) ) ) ) ) )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 179 } } )
            ( Assign
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 176 } } )
             ( Assign
              ( Meta
               { meta = SumT
                [ Con Tuple
                 [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 173 } } )
              ( Assign
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 167 } } )
               ( CallDirect
                ( Meta
                 { meta = [] :-> AnyT, id = Id
                  { name = "True", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] )
               ( Assign
                ( Meta
                 { meta =
                  [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 171 } } )
                ( Let
                 [ LocalDef
                  { _variable = Meta
                   { meta =
                    [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                    { name = "fun", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 170 } }, typ =
                   [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
                   [ Meta
                    { meta = SumT
                     [ Con Tuple [] ], id = Id
                     { name = "$_", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 168 } } ]
                   ( Assign
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 169 } } )
                    ( Call
                     ( Var
                      ( Meta
                       { meta = [ Int32T ] :-> AnyT, id = Id
                        { name = "Int32#", moduleName = Artifact
                         ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                     [ Unboxed ( Int32 4 ) ] )
                    ( Cast AnyT
                     ( Var
                      ( Meta
                       { meta = AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 169 } } ) ) ) ) } ]
                 ( Atom
                  ( Var
                   ( Meta
                    { meta =
                     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                     { name = "fun", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 170 } } ) ) ) )
                ( Let
                 [ LocalDef
                  { _variable = Meta
                   { meta = SumT
                    [ Con Tuple
                     [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                    { name = "let", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 172 } }, typ = SumT
                   [ Con Tuple
                    [ AnyT,
                     [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
                   ( SumT
                    [ Con Tuple
                     [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
                   ( Con Tuple [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
                   [ Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 167 } } ), Var
                    ( Meta
                     { meta =
                      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 171 } } ) ] } ]
                 ( Atom
                  ( Var
                   ( Meta
                    { meta = SumT
                     [ Con Tuple
                      [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                     { name = "let", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 172 } } ) ) ) ) ) )
              ( Assign
               ( Meta
                { meta = AnyT, id = Id
                 { name = "cast", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 174 } } )
               ( Cast AnyT
                ( Var
                 ( Meta
                  { meta = SumT
                   [ Con Tuple
                    [ AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 173 } } ) ) )
               ( Assign
                ( Meta
                 { meta = [ AnyT ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 175 } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT ), id = Id
                    { name = "<|>", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
                 [ Var
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "cast", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 174 } } ) ] )
                ( Cast
                 ( [ AnyT ] :-> AnyT )
                 ( Var
                  ( Meta
                   { meta = [ AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 175 } } ) ) ) ) ) )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 177 } } )
              ( CallDirect
               ( Meta
                { meta = [] :-> AnyT, id = Id
                 { name = "Nil", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) [] )
              ( Assign
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 178 } } )
               ( Call
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 176 } } ) )
                [ Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 177 } } ) ] )
               ( Cast AnyT
                ( Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 178 } } ) ) ) ) ) )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 180 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 166 } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 179 } } ) ] )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 180 } } ) ) ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 182 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 156 } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 181 } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 182 } } ) ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 184 } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 146 } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 183 } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 184 } } ) ) ) ) ) )
      [ Bind
       ( Meta
        { meta = AnyT, id = Id
         { name = "let_test/testcases/malgo/RightAssoc.mlg.#y_3", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 185 } } ) AnyT
       ( Atom
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "let_test/testcases/malgo/RightAssoc.mlg.#y_3", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 185 } } ) ) ) ] ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 186 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Match
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 188 } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 187 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ Int32T ] :-> AnyT, id = Id
          { name = "Int32#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( Int32 4 ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 187 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 189 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 188 } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 189 } } ) ) ) ) )
    [ Bind
     ( Meta
      { meta = AnyT, id = Id
       { name = "let_test/testcases/malgo/RightAssoc.mlg.#x_4", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 190 } } ) AnyT
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 192 } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 191 } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ StringT ] :-> AnyT, id = Id
           { name = "String#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( String "OK" ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 191 } } ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 193 } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "printString", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 192 } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/RightAssoc.mlg" ), sort = Temporal 193 } } ) ) ) ) ) ] ) ], extFuns = [] }