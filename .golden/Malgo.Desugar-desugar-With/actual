Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ [ AnyT ] :-> AnyT,
      [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
     { name = "finally_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } },
    [ Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "finalizer", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "k", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ],
    [ [ AnyT ] :-> AnyT, [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, Match
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "let", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ = SumT
        [ Con Tuple [] ], _object = Pack
        ( SumT [ Con Tuple [] ] )
        ( Con Tuple [] ) [] } ]
      ( Atom
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "k", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) )
    [ Bind
     ( Meta
      { meta = AnyT, id = Id
       { name = "let_test/testcases/malgo/With.mlg.#x_4", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) AnyT
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "finalizer", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "let_test/testcases/malgo/With.mlg.#x_4", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) ] ),
   ( Meta
    { meta =
     [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
     { name = "printAndReturn_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "str", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "k", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ],
    [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "printString", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "str", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
     ( Cast
      ( SumT [ Con Tuple [] ] )
      ( Var
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "k", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "str", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) ),
   ( Meta
    { meta =
     [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
     { name = "twice", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = External } },
    [ Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "k", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ],
    [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "let", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ = SumT
        [ Con Tuple [] ], _object = Pack
        ( SumT [ Con Tuple [] ] )
        ( Con Tuple [] ) [] } ]
      ( Atom
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "k", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "let", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ = SumT
        [ Con Tuple [] ], _object = Pack
        ( SumT [ Con Tuple [] ] )
        ( Con Tuple [] ) [] } ]
      ( Atom
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "k", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
     { name = "printAndReturn", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "str", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ], [ AnyT ] :->
    ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ =
      [ [ AnyT ] :-> AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "k", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "printAndReturn_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "str", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "k", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta =
     [ [ AnyT ] :-> AnyT ] :->
     ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
     { name = "finally", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = External } },
    [ Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "finalizer", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ],
    [ [ AnyT ] :-> AnyT ] :->
    ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ =
      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
        { name = "k", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ [ AnyT ] :-> AnyT,
          [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
         { name = "finally_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "finalizer", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "k", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta =
       [ SumT [ Con Tuple [] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ =
        [ SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "tuple", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ]
        ( Match
         ( Atom
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "tuple", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) )
         [ Unpack
          ( Con Tuple [] ) []
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ StringT ] :-> AnyT, id = Id
                { name = "String#", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
             [ Unboxed ( String "end" ) ] )
            ( Cast AnyT
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ AnyT ] :-> SumT
                [ Con Tuple [] ], id = Id
                { name = "printString", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
            ( Cast
             ( SumT [ Con Tuple [] ] )
             ( Var
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "cast", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
      ( Cast
       ( [ AnyT ] :-> AnyT )
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) )
      ( Assign
       ( Meta
        { meta =
         [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ [ AnyT ] :-> AnyT ] :->
           ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
           { name = "finally", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "cast", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        (
         [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) ) )
    ( Assign
     ( Meta
      { meta =
       [ SumT [ Con Tuple [] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ =
        [ SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "$_", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ]
        ( Assign
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
         ( Let
          [ LocalDef
           { _variable = Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ =
            [ SumT [ Con Tuple [] ] ] :-> SumT
            [ Con Tuple [] ], _object = Fun
            [ Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "$_", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ]
            ( Assign
             ( Meta
              { meta =
               [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
              ( Assign
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
               ( Call
                ( Var
                 ( Meta
                  { meta = [ StringT ] :-> AnyT, id = Id
                   { name = "String#", moduleName = Artifact
                    ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                [ Unboxed ( String "foo" ) ] )
               ( Cast AnyT
                ( Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
              ( Assign
               ( Meta
                { meta =
                 [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
               ( Call
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :->
                   ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                   { name = "printAndReturn", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = External } } ) )
                [ Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
               ( Cast
                (
                 [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
                 [ Con Tuple [] ] )
                ( Var
                 ( Meta
                  { meta =
                   [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) )
             ( Assign
              ( Meta
               { meta = [ AnyT ] :-> SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
              ( Let
               [ LocalDef
                { _variable = Meta
                 { meta = [ AnyT ] :-> SumT
                  [ Con Tuple [] ], id = Id
                  { name = "fun", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> SumT
                 [ Con Tuple [] ], _object = Fun
                 [ Meta
                  { meta = AnyT, id = Id
                   { name = "x", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ]
                 ( Assign
                  ( Meta
                   { meta = SumT
                    [ Con Tuple [] ], id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta = [ AnyT ] :-> SumT
                      [ Con Tuple [] ], id = Id
                      { name = "printString", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                   [ Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "x", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
                  ( Cast
                   ( SumT [ Con Tuple [] ] )
                   ( Var
                    ( Meta
                     { meta = SumT
                      [ Con Tuple [] ], id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) } ]
               ( Atom
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :-> SumT
                   [ Con Tuple [] ], id = Id
                   { name = "fun", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
              ( Assign
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
               ( Call
                ( Var
                 ( Meta
                  { meta =
                   [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
                   [ Con Tuple [] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) )
                [ Var
                 ( Meta
                  { meta = [ AnyT ] :-> SumT
                   [ Con Tuple [] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
               ( Cast
                ( SumT [ Con Tuple [] ] )
                ( Var
                 ( Meta
                  { meta = SumT
                   [ Con Tuple [] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) ) ) } ]
          ( Atom
           ( Var
            ( Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
         ( Assign
          ( Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
            { name = "cast", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
          ( Cast
           ( [ SumT [ Con Tuple [] ] ] :-> AnyT )
           ( Var
            ( Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta =
               [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
               { name = "twice", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta =
               [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
               { name = "cast", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) ) ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/With.mlg" ), sort = Temporal } } ) ) ) ) ) ) ], extFuns = [] }