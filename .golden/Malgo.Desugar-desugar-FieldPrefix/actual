Program
 { topVars =
  [
   ( Meta
    { meta = RecordT
     ( fromList [ ( "x", AnyT ), ( "y", AnyT ), ( "z", AnyT ) ] ), id = Id
     { name = "zero3D", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = External } }, RecordT
    ( fromList [ ( "x", AnyT ), ( "y", AnyT ), ( "z", AnyT ) ] ), Assign
    ( Meta
     { meta = RecordT
      ( fromList [ ( "x", AnyT ), ( "y", AnyT ), ( "z", AnyT ) ] ), id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ FloatT ] :-> AnyT, id = Id
          { name = "Float#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( Float 0.0 ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ FloatT ] :-> AnyT, id = Id
           { name = "Float#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( Float 0.0 ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ FloatT ] :-> AnyT, id = Id
            { name = "Float#", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
         [ Unboxed ( Float 0.0 ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) )
       ( Let
        [ LocalDef
         { _variable = Meta
          { meta = RecordT
           ( fromList
            [ ( "x", AnyT ), ( "y", AnyT ), ( "z", AnyT ) ] ), id = Id
           { name = "record", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } }, typ = RecordT
          ( fromList
           [ ( "x", AnyT ), ( "y", AnyT ), ( "z", AnyT ) ] ), _object = Record
          ( fromList
           [
            ( "x", Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ),
            ( "y", Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ),
            ( "z", Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ] ) } ]
        ( Atom
         ( Var
          ( Meta
           { meta = RecordT
            ( fromList
             [ ( "x", AnyT ), ( "y", AnyT ), ( "z", AnyT ) ] ), id = Id
            { name = "record", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ) ) ) )
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList [ ( "x", AnyT ), ( "y", AnyT ), ( "z", AnyT ) ] ), id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = RecordT
     ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
     { name = "zero2D", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = External } }, RecordT
    ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), Assign
    ( Meta
     { meta = RecordT
      ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ Int32T ] :-> AnyT, id = Id
          { name = "Int32#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( Int32 0 ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ Int32T ] :-> AnyT, id = Id
           { name = "Int32#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( Int32 0 ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = RecordT
          ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
          { name = "record", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } }, typ = RecordT
         ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), _object = Record
         ( fromList
          [
           ( "x", Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ),
           ( "y", Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ] ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta = RecordT
           ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
           { name = "record", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ) ) )
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ) ], topFuns =
  [
   ( Meta
    { meta =
     [ RecordT
      ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ) ] :-> AnyT, id = Id
     { name = "y2D", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = External } },
    [ Meta
     { meta = RecordT
      ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
      { name = "record", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ],
    [ RecordT ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ) ] :-> AnyT, Match
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
        { name = "record", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) )
    [ OpenRecord
     ( fromList
      [
       ( "x", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ),
       ( "y", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ] )
     ( Atom
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ] ),
   ( Meta
    { meta =
     [ RecordT
      ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ) ] :-> AnyT, id = Id
     { name = "x2D", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = External } },
    [ Meta
     { meta = RecordT
      ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
      { name = "record", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ],
    [ RecordT ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ) ] :-> AnyT, Match
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
        { name = "record", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) )
    [ OpenRecord
     ( fromList
      [
       ( "x", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ),
       ( "y", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ] )
     ( Atom
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ] ),
   ( Meta
    { meta =
     [ RecordT ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ) ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "print2D", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = External } },
    [ Meta
     { meta = RecordT
      ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
      { name = "record", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ],
    [ RecordT ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ) ] :-> SumT
    [ Con Tuple [] ], Match
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
        { name = "record", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) )
    [ OpenRecord
     ( fromList
      [
       ( "x", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ),
       ( "y", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ] )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "toStringInt32", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) )
       ( Assign
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> SumT
            [ Con Tuple [] ], id = Id
            { name = "printString", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ] )
        ( Cast
         ( SumT [ Con Tuple [] ] )
         ( Var
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ StringT ] :-> AnyT, id = Id
             { name = "String#", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
          [ Unboxed ( String ", " ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) )
        ( Assign
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "printString", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ] )
         ( Cast
          ( SumT [ Con Tuple [] ] )
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "toStringInt32", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "p", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) )
        ( Assign
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "printString", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ] )
         ( Cast
          ( SumT [ Con Tuple [] ] )
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ) ) ) ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } )
    ( Call
     ( Var
      ( Meta
       { meta =
        [ RecordT ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ) ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "print2D", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = External } } ) )
     [ Var
      ( Meta
       { meta = RecordT
        ( fromList [ ( "x", AnyT ), ( "y", AnyT ) ] ), id = Id
        { name = "zero2D", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = External } } ) ] )
    ( Cast
     ( SumT [ Con Tuple [] ] )
     ( Var
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/FieldPrefix.mlg" ), sort = Temporal } } ) ) ) ) ], extFuns = [] }