Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "even", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "int32#", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT [ Con ( Data "runtime/malgo/Builtin.mlg.Int32#" ) [ Int32T ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "int32#", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) )
    [ Unpack
     ( Con ( Data "runtime/malgo/Builtin.mlg.Int32#" ) [ Int32T ] )
     [ Meta
      { meta = Int32T, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ]
     ( Match
      ( Atom
       ( Var
        ( Meta
         { meta = Int32T, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) )
      [ Exact
       ( Int32 0 )
       ( CallDirect
        ( Meta
         { meta = [] :-> AnyT, id = Id
          { name = "True", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] ), Bind
       ( Meta
        { meta = Int32T, id = Id
         { name = "_", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) Int32T
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ AnyT ] :-> AnyT ), id = Id
              { name = "subInt32", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "int32#", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( [ AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ Int32T ] :-> AnyT, id = Id
               { name = "Int32#", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
            [ Unboxed ( Int32 1 ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "odd", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) ] ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "odd", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "int32#", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT [ Con ( Data "runtime/malgo/Builtin.mlg.Int32#" ) [ Int32T ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "int32#", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) )
    [ Unpack
     ( Con ( Data "runtime/malgo/Builtin.mlg.Int32#" ) [ Int32T ] )
     [ Meta
      { meta = Int32T, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ]
     ( Match
      ( Atom
       ( Var
        ( Meta
         { meta = Int32T, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) )
      [ Exact
       ( Int32 0 )
       ( CallDirect
        ( Meta
         { meta = [] :-> AnyT, id = Id
          { name = "False", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] ), Bind
       ( Meta
        { meta = Int32T, id = Id
         { name = "_", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) Int32T
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ AnyT ] :-> AnyT ), id = Id
              { name = "subInt32", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "int32#", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( [ AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ Int32T ] :-> AnyT, id = Id
               { name = "Int32#", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
            [ Unboxed ( Int32 1 ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "even", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = [ AnyT ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
    ( Let
     [ LocalDef
      { _variable = Meta
       { meta = [ AnyT ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "fun", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> SumT
       [ Con Tuple [] ], _object = Fun
       [ Meta
        { meta = AnyT, id = Id
         { name = "false", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ]
       ( Match
        ( Cast
         ( SumT
          [ Con
           ( Data "runtime/malgo/Builtin.mlg.False" ) [], Con
           ( Data "runtime/malgo/Builtin.mlg.True" ) [] ] )
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "false", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) )
        [ Unpack
         ( Con ( Data "runtime/malgo/Builtin.mlg.False" ) [] ) []
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ StringT ] :-> AnyT, id = Id
               { name = "String#", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
            [ Unboxed ( String "False" ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "putStrLn", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) ) ), Unpack
         ( Con ( Data "runtime/malgo/Builtin.mlg.True" ) [] ) []
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ StringT ] :-> AnyT, id = Id
               { name = "String#", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
            [ Unboxed ( String "True" ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "putStrLn", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) } ]
     ( Atom
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ Int32T ] :-> AnyT, id = Id
           { name = "Int32#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( Int32 10 ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "even", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/EvenOdd.mlg" ), sort = Temporal } } ) ) ) ) ) ) ], extFuns = [] }