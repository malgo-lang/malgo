Program
 { topVars =
  [
   ( Meta
    { meta = RecordT
     ( fromList
      [
       ( "return", [ AnyT ] :-> AnyT ),
       ( "bind", [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
     { name = "eventually", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } }, RecordT
    ( fromList
     [
      ( "return", [ AnyT ] :-> AnyT ),
      ( "bind", [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), Assign
    ( Meta
     { meta = RecordT
      ( fromList
       [
        ( "return", [ AnyT ] :-> AnyT ),
        ( "bind", [ AnyT ] :->
         ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 307 } } )
    ( Let
     [ LocalDef
      { _variable = Meta
       { meta = RecordT
        ( fromList
         [
          ( "return", [ AnyT ] :-> AnyT ),
          ( "bind", [ AnyT ] :->
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
        { name = "record", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 306 } }, typ = RecordT
       ( fromList
        [
         ( "return", [ AnyT ] :-> AnyT ),
         ( "bind", [ AnyT ] :->
          ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), _object = Record
       ( fromList
        [
         ( "return", Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "Done", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ),
         ( "bind", Var
          ( Meta
           { meta = [ AnyT ] :->
            ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
            { name = "eventuallyBind", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ) ] ) } ]
     ( Atom
      ( Var
       ( Meta
        { meta = RecordT
         ( fromList
          [
           ( "return", [ AnyT ] :-> AnyT ),
           ( "bind", [ AnyT ] :->
            ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
         { name = "record", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 306 } } ) ) ) )
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList
         [
          ( "return", [ AnyT ] :-> AnyT ),
          ( "bind", [ AnyT ] :->
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 307 } } ) ) ) ),
   ( Meta
    { meta = AnyT, id = Id
     { name = "comp", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } }, AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 354 } } )
    ( Assign
     ( Meta
      { meta =
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 325 } } )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :->
        ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 312 } } )
      ( Assign
       ( Meta
        { meta = [ AnyT ] :->
         ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 311 } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ RecordT
            ( fromList
             [
              ( "return", [ AnyT ] :-> AnyT ),
              ( "bind", [ AnyT ] :->
               ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ) ] :->
           ( [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ), id = Id
           { name = "bind", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = RecordT
           ( fromList
            [
             ( "return", [ AnyT ] :-> AnyT ),
             ( "bind", [ AnyT ] :->
              ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
           { name = "eventually", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
       ( Cast
        ( [ AnyT ] :-> ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) )
        ( Var
         ( Meta
          { meta = [ AnyT ] :->
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 311 } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 323 } } )
       ( Assign
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 321 } } )
        ( Let
         [ LocalDef
          { _variable = Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
            { name = "fun", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 320 } }, typ =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
           [ Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "$_", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 313 } } ]
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 317 } } )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 315 } } )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 314 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ StringT ] :-> AnyT, id = Id
                  { name = "String#", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
               [ Unboxed ( String "1" ) ] )
              ( Cast AnyT
               ( Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 314 } } ) ) ) )
             ( Assign
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 316 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ AnyT ] :-> SumT
                  [ Con Tuple [] ], id = Id
                  { name = "printString", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 315 } } ) ] )
              ( Cast
               ( SumT [ Con Tuple [] ] )
               ( Var
                ( Meta
                 { meta = SumT
                  [ Con Tuple [] ], id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 316 } } ) ) ) ) )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "cast", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 318 } } )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 317 } } ) ) )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 319 } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ AnyT ] :-> AnyT, id = Id
                  { name = "Done", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "cast", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 318 } } ) ] )
              ( Cast AnyT
               ( Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 319 } } ) ) ) ) ) ) } ]
         ( Atom
          ( Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 320 } } ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 322 } } )
         ( Call
          ( Var
           ( Meta
            { meta =
             [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
             { name = "NotYetDone", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 321 } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 322 } } ) ) ) ) )
       ( Assign
        ( Meta
         { meta =
          [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 324 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :->
            ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 312 } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 323 } } ) ] )
        ( Cast
         ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT )
         ( Var
          ( Meta
           { meta =
            [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 324 } } ) ) ) ) ) )
     ( Assign
      ( Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 352 } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 351 } }, typ =
         [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
         [ Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "_", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 326 } } ]
         ( Assign
          ( Meta
           { meta =
            [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 341 } } )
          ( Assign
           ( Meta
            { meta = [ AnyT ] :->
             ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 328 } } )
           ( Assign
            ( Meta
             { meta = [ AnyT ] :->
              ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 327 } } )
            ( Call
             ( Var
              ( Meta
               { meta =
                [ RecordT
                 ( fromList
                  [
                   ( "return", [ AnyT ] :-> AnyT ),
                   ( "bind", [ AnyT ] :->
                    ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ) ] :->
                ( [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ), id = Id
                { name = "bind", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = RecordT
                ( fromList
                 [
                  ( "return", [ AnyT ] :-> AnyT ),
                  ( "bind", [ AnyT ] :->
                   ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
                { name = "eventually", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
            ( Cast
             ( [ AnyT ] :->
              ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) )
             ( Var
              ( Meta
               { meta = [ AnyT ] :->
                ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 327 } } ) ) ) )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 339 } } )
            ( Assign
             ( Meta
              { meta =
               [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 337 } } )
             ( Let
              [ LocalDef
               { _variable = Meta
                { meta =
                 [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                 { name = "fun", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 336 } }, typ =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
                [ Meta
                 { meta = SumT
                  [ Con Tuple [] ], id = Id
                  { name = "$_", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 329 } } ]
                ( Assign
                 ( Meta
                  { meta = SumT
                   [ Con Tuple [] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 333 } } )
                 ( Assign
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 331 } } )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 330 } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ StringT ] :-> AnyT, id = Id
                       { name = "String#", moduleName = Artifact
                        ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                    [ Unboxed ( String "2" ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 330 } } ) ) ) )
                  ( Assign
                   ( Meta
                    { meta = SumT
                     [ Con Tuple [] ], id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 332 } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ AnyT ] :-> SumT
                       [ Con Tuple [] ], id = Id
                       { name = "printString", moduleName = Artifact
                        ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                    [ Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 331 } } ) ] )
                   ( Cast
                    ( SumT [ Con Tuple [] ] )
                    ( Var
                     ( Meta
                      { meta = SumT
                       [ Con Tuple [] ], id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 332 } } ) ) ) ) )
                 ( Assign
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "cast", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 334 } } )
                  ( Cast AnyT
                   ( Var
                    ( Meta
                     { meta = SumT
                      [ Con Tuple [] ], id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 333 } } ) ) )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 335 } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ AnyT ] :-> AnyT, id = Id
                       { name = "Done", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
                    [ Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "cast", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 334 } } ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 335 } } ) ) ) ) ) ) } ]
              ( Atom
               ( Var
                ( Meta
                 { meta =
                  [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                  { name = "fun", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 336 } } ) ) ) )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 338 } } )
              ( Call
               ( Var
                ( Meta
                 { meta =
                  [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                  { name = "NotYetDone", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
               [ Var
                ( Meta
                 { meta =
                  [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 337 } } ) ] )
              ( Cast AnyT
               ( Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 338 } } ) ) ) ) )
            ( Assign
             ( Meta
              { meta =
               [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 340 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :->
                 ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 328 } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 339 } } ) ] )
             ( Cast
              ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT )
              ( Var
               ( Meta
                { meta =
                 [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 340 } } ) ) ) ) ) )
          ( Assign
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 349 } } )
           ( Let
            [ LocalDef
             { _variable = Meta
              { meta =
               [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
               { name = "fun", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 348 } }, typ =
              [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
              [ Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "_", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 342 } } ]
              ( Assign
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 344 } } )
               ( Assign
                ( Meta
                 { meta = [ AnyT ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 343 } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta =
                    [ RecordT
                     ( fromList
                      [
                       ( "return", [ AnyT ] :-> AnyT ),
                       ( "bind", [ AnyT ] :->
                        ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ) ] :->
                    ( [ AnyT ] :-> AnyT ), id = Id
                    { name = "return", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
                 [ Var
                  ( Meta
                   { meta = RecordT
                    ( fromList
                     [
                      ( "return", [ AnyT ] :-> AnyT ),
                      ( "bind", [ AnyT ] :->
                       ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
                    { name = "eventually", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
                ( Cast
                 ( [ AnyT ] :-> AnyT )
                 ( Var
                  ( Meta
                   { meta = [ AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 343 } } ) ) ) )
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 346 } } )
                ( Assign
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 345 } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ Int32T ] :-> AnyT, id = Id
                     { name = "Int32#", moduleName = Artifact
                      ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                  [ Unboxed ( Int32 3 ) ] )
                 ( Cast AnyT
                  ( Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 345 } } ) ) ) )
                ( Assign
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 347 } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ AnyT ] :-> AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 344 } } ) )
                  [ Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 346 } } ) ] )
                 ( Cast AnyT
                  ( Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 347 } } ) ) ) ) ) ) } ]
            ( Atom
             ( Var
              ( Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "fun", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 348 } } ) ) ) )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 350 } } )
            ( Call
             ( Var
              ( Meta
               { meta =
                [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 341 } } ) )
             [ Var
              ( Meta
               { meta =
                [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 349 } } ) ] )
            ( Cast AnyT
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 350 } } ) ) ) ) ) ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "fun", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 351 } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 353 } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 325 } } ) )
        [ Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 352 } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 353 } } ) ) ) ) ) )
    ( Atom
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 354 } } ) ) ) ) ], topFuns =
  [
   ( Meta
    { meta =
     [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
     { name = "eventuallyBind_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 288 } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "done", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 289 } }, Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "k", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 290 } } ],
    [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
       ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "done", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 289 } } ) ) )
    [ Unpack
     ( Con ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ] )
     [ Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 291 } } ]
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 292 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "k", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 290 } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 291 } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 292 } } ) ) ) ), Unpack
     ( Con
      ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
     [ Meta
      { meta =
       [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 293 } } ]
     ( Assign
      ( Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 303 } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 294 } }, typ =
         [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
         [ Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "$_", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 295 } } ]
         ( Assign
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 301 } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 299 } } )
           ( Assign
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 297 } } )
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "let", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 296 } }, typ = SumT
               [ Con Tuple [] ], _object = Pack
               ( SumT [ Con Tuple [] ] )
               ( Con Tuple [] ) [] } ]
             ( Atom
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "let", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 296 } } ) ) ) )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 298 } } )
             ( Call
              ( Var
               ( Meta
                { meta =
                 [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                 { name = "p", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 293 } } ) )
              [ Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 297 } } ) ] )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 298 } } ) ) ) ) )
           ( Assign
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 300 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ AnyT ] :->
                ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                { name = "eventuallyBind", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 299 } } ) ] )
            ( Cast
             ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
             ( Var
              ( Meta
               { meta =
                [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 300 } } ) ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 302 } } )
           ( Call
            ( Var
             ( Meta
              { meta =
               [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 301 } } ) )
            [ Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "k", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 290 } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 302 } } ) ) ) ) ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "fun", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 294 } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 304 } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
           { name = "NotYetDone", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 303 } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 304 } } ) ) ) ) ) ] ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "Done", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 258 } } ], [ AnyT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
        ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
        [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 259 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
       ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
        ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
        [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ] )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 258 } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
         ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
         [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 259 } } ) ) ) ),
   ( Meta
    { meta =
     [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
     { name = "NotYetDone", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } },
    [ Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 260 } } ],
    [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
        ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
        [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 261 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
       ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
        ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
        [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
      ( Con
       ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
      [ Var
       ( Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 260 } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
         ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
         [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 261 } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "step", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "done", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 262 } } ], [ AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
       ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "done", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 262 } } ) ) )
    [ Unpack
     ( Con ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ] )
     [ Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 263 } } ]
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 264 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "Done", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 263 } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 264 } } ) ) ) ), Unpack
     ( Con
      ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
     [ Meta
      { meta =
       [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 265 } } ]
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 267 } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 266 } }, typ = SumT
         [ Con Tuple [] ], _object = Pack
         ( SumT [ Con Tuple [] ] )
         ( Con Tuple [] ) [] } ]
       ( Atom
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 266 } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 268 } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "p", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 265 } } ) )
        [ Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 267 } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 268 } } ) ) ) ) ) ] ),
   ( Meta
    { meta =
     [ RecordT
      ( fromList
       [
        ( "return", [ AnyT ] :-> AnyT ),
        ( "bind", [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ) ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "return", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } },
    [ Meta
     { meta = RecordT
      ( fromList
       [
        ( "return", [ AnyT ] :-> AnyT ),
        ( "bind", [ AnyT ] :->
         ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
      { name = "record", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 269 } } ],
    [ RecordT
     ( fromList
      [
       ( "return", [ AnyT ] :-> AnyT ),
       ( "bind", [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ) ] :->
    ( [ AnyT ] :-> AnyT ), Match
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList
         [
          ( "return", [ AnyT ] :-> AnyT ),
          ( "bind", [ AnyT ] :->
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
        { name = "record", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 269 } } ) ) )
    [ OpenRecord
     ( fromList
      [
       ( "return", Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 270 } } ),
       ( "bind", Meta
        { meta = [ AnyT ] :->
         ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 271 } } ) ] )
     ( Atom
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 270 } } ) ) ) ] ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
     { name = "eventuallyBind", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "done", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 272 } } ], [ AnyT ] :->
    ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 305 } }, typ =
      [ [ AnyT ] :-> AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "k", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 273 } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "eventuallyBind_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 288 } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "done", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 272 } } ), Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "k", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 273 } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 305 } } ) ) ) ),
   ( Meta
    { meta =
     [ RecordT
      ( fromList
       [
        ( "return", [ AnyT ] :-> AnyT ),
        ( "bind", [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ) ] :->
     ( [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ), id = Id
     { name = "bind", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } },
    [ Meta
     { meta = RecordT
      ( fromList
       [
        ( "return", [ AnyT ] :-> AnyT ),
        ( "bind", [ AnyT ] :->
         ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
      { name = "record", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 308 } } ],
    [ RecordT
     ( fromList
      [
       ( "return", [ AnyT ] :-> AnyT ),
       ( "bind", [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ) ] :->
    ( [ AnyT ] :-> ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ), Match
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList
         [
          ( "return", [ AnyT ] :-> AnyT ),
          ( "bind", [ AnyT ] :->
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT ) ) ] ), id = Id
        { name = "record", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 308 } } ) ) )
    [ OpenRecord
     ( fromList
      [
       ( "return", Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 309 } } ),
       ( "bind", Meta
        { meta = [ AnyT ] :->
         ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 310 } } ) ] )
     ( Atom
      ( Var
       ( Meta
        { meta = [ AnyT ] :->
         ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 310 } } ) ) ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 355 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 359 } } )
    ( Assign
     ( Meta
      { meta =
       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 357 } } )
     ( Assign
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 356 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :->
          ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
          { name = "|>", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "comp", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
      ( Cast
       ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 356 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 358 } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 357 } } ) )
       [ Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "step", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 358 } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta =
       [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 373 } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 371 } } )
      ( Assign
       ( Meta
        { meta =
         [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 369 } } )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 367 } } )
        ( Assign
         ( Meta
          { meta =
           [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 365 } } )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 363 } } )
          ( Assign
           ( Meta
            { meta =
             [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 361 } } )
           ( Assign
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 360 } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ AnyT ] :->
                ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                { name = "|>", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "comp", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
            ( Cast
             ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
             ( Var
              ( Meta
               { meta =
                [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 360 } } ) ) ) )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 362 } } )
            ( Call
             ( Var
              ( Meta
               { meta =
                [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 361 } } ) )
             [ Var
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "step", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
            ( Cast AnyT
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 362 } } ) ) ) ) )
          ( Assign
           ( Meta
            { meta =
             [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 364 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :->
               ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
               { name = "|>", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 363 } } ) ] )
           ( Cast
            ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
            ( Var
             ( Meta
              { meta =
               [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 364 } } ) ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 366 } } )
          ( Call
           ( Var
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 365 } } ) )
           [ Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "step", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
          ( Cast AnyT
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 366 } } ) ) ) ) )
        ( Assign
         ( Meta
          { meta =
           [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 368 } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ AnyT ] :->
             ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
             { name = "|>", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 367 } } ) ] )
         ( Cast
          ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
          ( Var
           ( Meta
            { meta =
             [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 368 } } ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 370 } } )
        ( Call
         ( Var
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 369 } } ) )
         [ Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "step", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = External } } ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 370 } } ) ) ) ) )
      ( Assign
       ( Meta
        { meta =
         [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 372 } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :->
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
           { name = "|>", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 371 } } ) ] )
       ( Cast
        ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta =
           [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 372 } } ) ) ) ) )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 384 } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 383 } }, typ = [ AnyT ] :-> SumT
         [ Con Tuple [] ], _object = Fun
         [ Meta
          { meta = AnyT, id = Id
           { name = "done", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 374 } } ]
         ( Match
          ( Cast
           ( SumT
            [ Con
             ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ], Con
             ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
             [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] ] )
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "done", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 374 } } ) ) )
          [ Unpack
           ( Con ( Data "test/testcases/malgo/Eventually.mlg.Done" ) [ AnyT ] )
           [ Meta
            { meta = AnyT, id = Id
             { name = "p", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 375 } } ]
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 377 } } )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 376 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "toStringInt32", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "p", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 375 } } ) ] )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 376 } } ) ) ) )
            ( Assign
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 378 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "printString", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 377 } } ) ] )
             ( Cast
              ( SumT [ Con Tuple [] ] )
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 378 } } ) ) ) ) ), Unpack
           ( Con
            ( Data "test/testcases/malgo/Eventually.mlg.NotYetDone" )
            [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] )
           [ Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "p", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 379 } } ]
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 381 } } )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 380 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ StringT ] :-> AnyT, id = Id
                 { name = "String#", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
              [ Unboxed ( String "not yet" ) ] )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 380 } } ) ) ) )
            ( Assign
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 382 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "printString", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 381 } } ) ] )
             ( Cast
              ( SumT [ Con Tuple [] ] )
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 382 } } ) ) ) ) ) ] ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "fun", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 383 } } ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 385 } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 373 } } ) )
        [ Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 384 } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Eventually.mlg" ), sort = Temporal 385 } } ) ) ) ) ) ) ) ], extFuns = [] }