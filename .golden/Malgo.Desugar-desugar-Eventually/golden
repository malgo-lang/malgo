Program
    { topVars =
        [
            ( Meta
                { meta = RecordT
                    ( fromList
                        [
                            ( "return"
                            , [ AnyT ] :-> AnyT
                            )
                        ,
                            ( "bind"
                            , [ AnyT ] :->
                                (
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                )
                            )
                        ]
                    )
                , id = Id
                    { name = "eventually"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            , RecordT
                ( fromList
                    [
                        ( "return"
                        , [ AnyT ] :-> AnyT
                        )
                    ,
                        ( "bind"
                        , [ AnyT ] :->
                            (
                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                            )
                        )
                    ]
                )
            , Assign
                ( Meta
                    { meta = RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    , id = Id
                        { name = "d"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 307
                        }
                    }
                )
                ( Let
                    [ LocalDef
                        { _variable = Meta
                            { meta = RecordT
                                ( fromList
                                    [
                                        ( "return"
                                        , [ AnyT ] :-> AnyT
                                        )
                                    ,
                                        ( "bind"
                                        , [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        )
                                    ]
                                )
                            , id = Id
                                { name = "record"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 306
                                }
                            }
                        , typ = RecordT
                            ( fromList
                                [
                                    ( "return"
                                    , [ AnyT ] :-> AnyT
                                    )
                                ,
                                    ( "bind"
                                    , [ AnyT ] :->
                                        (
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        )
                                    )
                                ]
                            )
                        , _object = Record
                            ( fromList
                                [
                                    ( "return"
                                    , Var
                                        ( Meta
                                            { meta = [ AnyT ] :-> AnyT
                                            , id = Id
                                                { name = "Done"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            }
                                        )
                                    )
                                ,
                                    ( "bind"
                                    , Var
                                        ( Meta
                                            { meta = [ AnyT ] :->
                                                (
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                )
                                            , id = Id
                                                { name = "eventuallyBind"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            }
                                        )
                                    )
                                ]
                            )
                        }
                    ]
                    ( Atom
                        ( Var
                            ( Meta
                                { meta = RecordT
                                    ( fromList
                                        [
                                            ( "return"
                                            , [ AnyT ] :-> AnyT
                                            )
                                        ,
                                            ( "bind"
                                            , [ AnyT ] :->
                                                (
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                )
                                            )
                                        ]
                                    )
                                , id = Id
                                    { name = "record"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 306
                                    }
                                }
                            )
                        )
                    )
                )
                ( Atom
                    ( Var
                        ( Meta
                            { meta = RecordT
                                ( fromList
                                    [
                                        ( "return"
                                        , [ AnyT ] :-> AnyT
                                        )
                                    ,
                                        ( "bind"
                                        , [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        )
                                    ]
                                )
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 307
                                }
                            }
                        )
                    )
                )
            )
        ,
            ( Meta
                { meta = AnyT
                , id = Id
                    { name = "comp"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            , AnyT
            , Assign
                ( Meta
                    { meta = AnyT
                    , id = Id
                        { name = "d"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 354
                        }
                    }
                )
                ( Assign
                    ( Meta
                        { meta =
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ] :-> AnyT
                        , id = Id
                            { name = "d"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 325
                            }
                        }
                    )
                    ( Assign
                        ( Meta
                            { meta = [ AnyT ] :->
                                (
                                    [
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    ] :-> AnyT
                                )
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 312
                                }
                            }
                        )
                        ( Assign
                            ( Meta
                                { meta = [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 311
                                    }
                                }
                            )
                            ( Call
                                ( Var
                                    ( Meta
                                        { meta =
                                            [ RecordT
                                                ( fromList
                                                    [
                                                        ( "return"
                                                        , [ AnyT ] :-> AnyT
                                                        )
                                                    ,
                                                        ( "bind"
                                                        , [ AnyT ] :->
                                                            (
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            )
                                                        )
                                                    ]
                                                )
                                            ] :->
                                            ( [ AnyT ] :->
                                                (
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                )
                                            )
                                        , id = Id
                                            { name = "bind"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        }
                                    )
                                )
                                [ Var
                                    ( Meta
                                        { meta = RecordT
                                            ( fromList
                                                [
                                                    ( "return"
                                                    , [ AnyT ] :-> AnyT
                                                    )
                                                ,
                                                    ( "bind"
                                                    , [ AnyT ] :->
                                                        (
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        )
                                                    )
                                                ]
                                            )
                                        , id = Id
                                            { name = "eventually"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        }
                                    )
                                ]
                            )
                            ( Cast
                                ( [ AnyT ] :->
                                    (
                                        [
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        ] :-> AnyT
                                    )
                                )
                                ( Var
                                    ( Meta
                                        { meta = [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 311
                                            }
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Meta
                                { meta = AnyT
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 323
                                    }
                                }
                            )
                            ( Assign
                                ( Meta
                                    { meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 321
                                        }
                                    }
                                )
                                ( Let
                                    [ LocalDef
                                        { _variable = Meta
                                            { meta =
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> AnyT
                                            , id = Id
                                                { name = "fun"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 320
                                                }
                                            }
                                        , typ =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , _object = Fun
                                            [ Meta
                                                { meta = SumT
                                                    [ Con Tuple [] ]
                                                , id = Id
                                                    { name = "$_"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 313
                                                    }
                                                }
                                            ]
                                            ( Assign
                                                ( Meta
                                                    { meta = SumT
                                                        [ Con Tuple [] ]
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 317
                                                        }
                                                    }
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 315
                                                            }
                                                        }
                                                    )
                                                    ( Assign
                                                        ( Meta
                                                            { meta = AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 314
                                                                }
                                                            }
                                                        )
                                                        ( Call
                                                            ( Var
                                                                ( Meta
                                                                    { meta = [ StringT ] :-> AnyT
                                                                    , id = Id
                                                                        { name = "String#"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Builtin" }
                                                                        , sort = External
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                            [ Unboxed
                                                                ( String "1" )
                                                            ]
                                                        )
                                                        ( Cast AnyT
                                                            ( Var
                                                                ( Meta
                                                                    { meta = AnyT
                                                                    , id = Id
                                                                        { name = "d"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 314
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                    ( Assign
                                                        ( Meta
                                                            { meta = SumT
                                                                [ Con Tuple [] ]
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 316
                                                                }
                                                            }
                                                        )
                                                        ( Call
                                                            ( Var
                                                                ( Meta
                                                                    { meta = [ AnyT ] :-> SumT
                                                                        [ Con Tuple [] ]
                                                                    , id = Id
                                                                        { name = "printString"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Builtin" }
                                                                        , sort = External
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                            [ Var
                                                                ( Meta
                                                                    { meta = AnyT
                                                                    , id = Id
                                                                        { name = "d"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 315
                                                                        }
                                                                    }
                                                                )
                                                            ]
                                                        )
                                                        ( Cast
                                                            ( SumT
                                                                [ Con Tuple [] ]
                                                            )
                                                            ( Var
                                                                ( Meta
                                                                    { meta = SumT
                                                                        [ Con Tuple [] ]
                                                                    , id = Id
                                                                        { name = "d"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 316
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "cast"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 318
                                                            }
                                                        }
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Meta
                                                                { meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 317
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                    ( Assign
                                                        ( Meta
                                                            { meta = AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 319
                                                                }
                                                            }
                                                        )
                                                        ( Call
                                                            ( Var
                                                                ( Meta
                                                                    { meta = [ AnyT ] :-> AnyT
                                                                    , id = Id
                                                                        { name = "Done"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = External
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                            [ Var
                                                                ( Meta
                                                                    { meta = AnyT
                                                                    , id = Id
                                                                        { name = "cast"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 318
                                                                        }
                                                                    }
                                                                )
                                                            ]
                                                        )
                                                        ( Cast AnyT
                                                            ( Var
                                                                ( Meta
                                                                    { meta = AnyT
                                                                    , id = Id
                                                                        { name = "d"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 319
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        }
                                    ]
                                    ( Atom
                                        ( Var
                                            ( Meta
                                                { meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                , id = Id
                                                    { name = "fun"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 320
                                                    }
                                                }
                                            )
                                        )
                                    )
                                )
                                ( Assign
                                    ( Meta
                                        { meta = AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 322
                                            }
                                        }
                                    )
                                    ( Call
                                        ( Var
                                            ( Meta
                                                { meta =
                                                    [
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> AnyT
                                                    ] :-> AnyT
                                                , id = Id
                                                    { name = "NotYetDone"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = External
                                                    }
                                                }
                                            )
                                        )
                                        [ Var
                                            ( Meta
                                                { meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 321
                                                    }
                                                }
                                            )
                                        ]
                                    )
                                    ( Cast AnyT
                                        ( Var
                                            ( Meta
                                                { meta = AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 322
                                                    }
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                            ( Assign
                                ( Meta
                                    { meta =
                                        [
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        ] :-> AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 324
                                        }
                                    }
                                )
                                ( Call
                                    ( Var
                                        ( Meta
                                            { meta = [ AnyT ] :->
                                                (
                                                    [
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> AnyT
                                                    ] :-> AnyT
                                                )
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 312
                                                }
                                            }
                                        )
                                    )
                                    [ Var
                                        ( Meta
                                            { meta = AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 323
                                                }
                                            }
                                        )
                                    ]
                                )
                                ( Cast
                                    (
                                        [
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        ] :-> AnyT
                                    )
                                    ( Var
                                        ( Meta
                                            { meta =
                                                [
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                ] :-> AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 324
                                                }
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    )
                    ( Assign
                        ( Meta
                            { meta =
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 352
                                }
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Meta
                                    { meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    , id = Id
                                        { name = "fun"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 351
                                        }
                                    }
                                , typ =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                , _object = Fun
                                    [ Meta
                                        { meta = SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "_"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 326
                                            }
                                        }
                                    ]
                                    ( Assign
                                        ( Meta
                                            { meta =
                                                [
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                ] :-> AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 341
                                                }
                                            }
                                        )
                                        ( Assign
                                            ( Meta
                                                { meta = [ AnyT ] :->
                                                    (
                                                        [
                                                            [ SumT
                                                                [ Con Tuple [] ]
                                                            ] :-> AnyT
                                                        ] :-> AnyT
                                                    )
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 328
                                                    }
                                                }
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta = [ AnyT ] :->
                                                        (
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        )
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 327
                                                        }
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Meta
                                                            { meta =
                                                                [ RecordT
                                                                    ( fromList
                                                                        [
                                                                            ( "return"
                                                                            , [ AnyT ] :-> AnyT
                                                                            )
                                                                        ,
                                                                            ( "bind"
                                                                            , [ AnyT ] :->
                                                                                (
                                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                                )
                                                                            )
                                                                        ]
                                                                    )
                                                                ] :->
                                                                ( [ AnyT ] :->
                                                                    (
                                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                    )
                                                                )
                                                            , id = Id
                                                                { name = "bind"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = External
                                                                }
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Meta
                                                            { meta = RecordT
                                                                ( fromList
                                                                    [
                                                                        ( "return"
                                                                        , [ AnyT ] :-> AnyT
                                                                        )
                                                                    ,
                                                                        ( "bind"
                                                                        , [ AnyT ] :->
                                                                            (
                                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                            )
                                                                        )
                                                                    ]
                                                                )
                                                            , id = Id
                                                                { name = "eventually"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = External
                                                                }
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast
                                                    ( [ AnyT ] :->
                                                        (
                                                            [
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            ] :-> AnyT
                                                        )
                                                    )
                                                    ( Var
                                                        ( Meta
                                                            { meta = [ AnyT ] :->
                                                                (
                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                )
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 327
                                                                }
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta = AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 339
                                                        }
                                                    }
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta =
                                                            [ SumT
                                                                [ Con Tuple [] ]
                                                            ] :-> AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 337
                                                            }
                                                        }
                                                    )
                                                    ( Let
                                                        [ LocalDef
                                                            { _variable = Meta
                                                                { meta =
                                                                    [ SumT
                                                                        [ Con Tuple [] ]
                                                                    ] :-> AnyT
                                                                , id = Id
                                                                    { name = "fun"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 336
                                                                    }
                                                                }
                                                            , typ =
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            , _object = Fun
                                                                [ Meta
                                                                    { meta = SumT
                                                                        [ Con Tuple [] ]
                                                                    , id = Id
                                                                        { name = "$_"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 329
                                                                        }
                                                                    }
                                                                ]
                                                                ( Assign
                                                                    ( Meta
                                                                        { meta = SumT
                                                                            [ Con Tuple [] ]
                                                                        , id = Id
                                                                            { name = "d"
                                                                            , moduleName = ModuleName
                                                                                { raw = "Eventually" }
                                                                            , sort = Temporal 333
                                                                            }
                                                                        }
                                                                    )
                                                                    ( Assign
                                                                        ( Meta
                                                                            { meta = AnyT
                                                                            , id = Id
                                                                                { name = "d"
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , sort = Temporal 331
                                                                                }
                                                                            }
                                                                        )
                                                                        ( Assign
                                                                            ( Meta
                                                                                { meta = AnyT
                                                                                , id = Id
                                                                                    { name = "d"
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Eventually" }
                                                                                    , sort = Temporal 330
                                                                                    }
                                                                                }
                                                                            )
                                                                            ( Call
                                                                                ( Var
                                                                                    ( Meta
                                                                                        { meta = [ StringT ] :-> AnyT
                                                                                        , id = Id
                                                                                            { name = "String#"
                                                                                            , moduleName = ModuleName
                                                                                                { raw = "Builtin" }
                                                                                            , sort = External
                                                                                            }
                                                                                        }
                                                                                    )
                                                                                )
                                                                                [ Unboxed
                                                                                    ( String "2" )
                                                                                ]
                                                                            )
                                                                            ( Cast AnyT
                                                                                ( Var
                                                                                    ( Meta
                                                                                        { meta = AnyT
                                                                                        , id = Id
                                                                                            { name = "d"
                                                                                            , moduleName = ModuleName
                                                                                                { raw = "Eventually" }
                                                                                            , sort = Temporal 330
                                                                                            }
                                                                                        }
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                        ( Assign
                                                                            ( Meta
                                                                                { meta = SumT
                                                                                    [ Con Tuple [] ]
                                                                                , id = Id
                                                                                    { name = "d"
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Eventually" }
                                                                                    , sort = Temporal 332
                                                                                    }
                                                                                }
                                                                            )
                                                                            ( Call
                                                                                ( Var
                                                                                    ( Meta
                                                                                        { meta = [ AnyT ] :-> SumT
                                                                                            [ Con Tuple [] ]
                                                                                        , id = Id
                                                                                            { name = "printString"
                                                                                            , moduleName = ModuleName
                                                                                                { raw = "Builtin" }
                                                                                            , sort = External
                                                                                            }
                                                                                        }
                                                                                    )
                                                                                )
                                                                                [ Var
                                                                                    ( Meta
                                                                                        { meta = AnyT
                                                                                        , id = Id
                                                                                            { name = "d"
                                                                                            , moduleName = ModuleName
                                                                                                { raw = "Eventually" }
                                                                                            , sort = Temporal 331
                                                                                            }
                                                                                        }
                                                                                    )
                                                                                ]
                                                                            )
                                                                            ( Cast
                                                                                ( SumT
                                                                                    [ Con Tuple [] ]
                                                                                )
                                                                                ( Var
                                                                                    ( Meta
                                                                                        { meta = SumT
                                                                                            [ Con Tuple [] ]
                                                                                        , id = Id
                                                                                            { name = "d"
                                                                                            , moduleName = ModuleName
                                                                                                { raw = "Eventually" }
                                                                                            , sort = Temporal 332
                                                                                            }
                                                                                        }
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( Assign
                                                                        ( Meta
                                                                            { meta = AnyT
                                                                            , id = Id
                                                                                { name = "cast"
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , sort = Temporal 334
                                                                                }
                                                                            }
                                                                        )
                                                                        ( Cast AnyT
                                                                            ( Var
                                                                                ( Meta
                                                                                    { meta = SumT
                                                                                        [ Con Tuple [] ]
                                                                                    , id = Id
                                                                                        { name = "d"
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Eventually" }
                                                                                        , sort = Temporal 333
                                                                                        }
                                                                                    }
                                                                                )
                                                                            )
                                                                        )
                                                                        ( Assign
                                                                            ( Meta
                                                                                { meta = AnyT
                                                                                , id = Id
                                                                                    { name = "d"
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Eventually" }
                                                                                    , sort = Temporal 335
                                                                                    }
                                                                                }
                                                                            )
                                                                            ( Call
                                                                                ( Var
                                                                                    ( Meta
                                                                                        { meta = [ AnyT ] :-> AnyT
                                                                                        , id = Id
                                                                                            { name = "Done"
                                                                                            , moduleName = ModuleName
                                                                                                { raw = "Eventually" }
                                                                                            , sort = External
                                                                                            }
                                                                                        }
                                                                                    )
                                                                                )
                                                                                [ Var
                                                                                    ( Meta
                                                                                        { meta = AnyT
                                                                                        , id = Id
                                                                                            { name = "cast"
                                                                                            , moduleName = ModuleName
                                                                                                { raw = "Eventually" }
                                                                                            , sort = Temporal 334
                                                                                            }
                                                                                        }
                                                                                    )
                                                                                ]
                                                                            )
                                                                            ( Cast AnyT
                                                                                ( Var
                                                                                    ( Meta
                                                                                        { meta = AnyT
                                                                                        , id = Id
                                                                                            { name = "d"
                                                                                            , moduleName = ModuleName
                                                                                                { raw = "Eventually" }
                                                                                            , sort = Temporal 335
                                                                                            }
                                                                                        }
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                        ]
                                                        ( Atom
                                                            ( Var
                                                                ( Meta
                                                                    { meta =
                                                                        [ SumT
                                                                            [ Con Tuple [] ]
                                                                        ] :-> AnyT
                                                                    , id = Id
                                                                        { name = "fun"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 336
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                    ( Assign
                                                        ( Meta
                                                            { meta = AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 338
                                                                }
                                                            }
                                                        )
                                                        ( Call
                                                            ( Var
                                                                ( Meta
                                                                    { meta =
                                                                        [
                                                                            [ SumT
                                                                                [ Con Tuple [] ]
                                                                            ] :-> AnyT
                                                                        ] :-> AnyT
                                                                    , id = Id
                                                                        { name = "NotYetDone"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = External
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                            [ Var
                                                                ( Meta
                                                                    { meta =
                                                                        [ SumT
                                                                            [ Con Tuple [] ]
                                                                        ] :-> AnyT
                                                                    , id = Id
                                                                        { name = "d"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 337
                                                                        }
                                                                    }
                                                                )
                                                            ]
                                                        )
                                                        ( Cast AnyT
                                                            ( Var
                                                                ( Meta
                                                                    { meta = AnyT
                                                                    , id = Id
                                                                        { name = "d"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 338
                                                                        }
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta =
                                                            [
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            ] :-> AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 340
                                                            }
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Meta
                                                                { meta = [ AnyT ] :->
                                                                    (
                                                                        [
                                                                            [ SumT
                                                                                [ Con Tuple [] ]
                                                                            ] :-> AnyT
                                                                        ] :-> AnyT
                                                                    )
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 328
                                                                    }
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Meta
                                                                { meta = AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 339
                                                                    }
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast
                                                        (
                                                            [
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            ] :-> AnyT
                                                        )
                                                        ( Var
                                                            ( Meta
                                                                { meta =
                                                                    [
                                                                        [ SumT
                                                                            [ Con Tuple [] ]
                                                                        ] :-> AnyT
                                                                    ] :-> AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 340
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ( Assign
                                            ( Meta
                                                { meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 349
                                                    }
                                                }
                                            )
                                            ( Let
                                                [ LocalDef
                                                    { _variable = Meta
                                                        { meta =
                                                            [ SumT
                                                                [ Con Tuple [] ]
                                                            ] :-> AnyT
                                                        , id = Id
                                                            { name = "fun"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 348
                                                            }
                                                        }
                                                    , typ =
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> AnyT
                                                    , _object = Fun
                                                        [ Meta
                                                            { meta = SumT
                                                                [ Con Tuple [] ]
                                                            , id = Id
                                                                { name = "_"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 342
                                                                }
                                                            }
                                                        ]
                                                        ( Assign
                                                            ( Meta
                                                                { meta = [ AnyT ] :-> AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 344
                                                                    }
                                                                }
                                                            )
                                                            ( Assign
                                                                ( Meta
                                                                    { meta = [ AnyT ] :-> AnyT
                                                                    , id = Id
                                                                        { name = "d"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 343
                                                                        }
                                                                    }
                                                                )
                                                                ( Call
                                                                    ( Var
                                                                        ( Meta
                                                                            { meta =
                                                                                [ RecordT
                                                                                    ( fromList
                                                                                        [
                                                                                            ( "return"
                                                                                            , [ AnyT ] :-> AnyT
                                                                                            )
                                                                                        ,
                                                                                            ( "bind"
                                                                                            , [ AnyT ] :->
                                                                                                (
                                                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                                                )
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ] :->
                                                                                ( [ AnyT ] :-> AnyT )
                                                                            , id = Id
                                                                                { name = "return"
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , sort = External
                                                                                }
                                                                            }
                                                                        )
                                                                    )
                                                                    [ Var
                                                                        ( Meta
                                                                            { meta = RecordT
                                                                                ( fromList
                                                                                    [
                                                                                        ( "return"
                                                                                        , [ AnyT ] :-> AnyT
                                                                                        )
                                                                                    ,
                                                                                        ( "bind"
                                                                                        , [ AnyT ] :->
                                                                                            (
                                                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                                            )
                                                                                        )
                                                                                    ]
                                                                                )
                                                                            , id = Id
                                                                                { name = "eventually"
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , sort = External
                                                                                }
                                                                            }
                                                                        )
                                                                    ]
                                                                )
                                                                ( Cast
                                                                    ( [ AnyT ] :-> AnyT )
                                                                    ( Var
                                                                        ( Meta
                                                                            { meta = [ AnyT ] :-> AnyT
                                                                            , id = Id
                                                                                { name = "d"
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , sort = Temporal 343
                                                                                }
                                                                            }
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                            ( Assign
                                                                ( Meta
                                                                    { meta = AnyT
                                                                    , id = Id
                                                                        { name = "d"
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , sort = Temporal 346
                                                                        }
                                                                    }
                                                                )
                                                                ( Assign
                                                                    ( Meta
                                                                        { meta = AnyT
                                                                        , id = Id
                                                                            { name = "d"
                                                                            , moduleName = ModuleName
                                                                                { raw = "Eventually" }
                                                                            , sort = Temporal 345
                                                                            }
                                                                        }
                                                                    )
                                                                    ( Call
                                                                        ( Var
                                                                            ( Meta
                                                                                { meta = [ Int32T ] :-> AnyT
                                                                                , id = Id
                                                                                    { name = "Int32#"
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Builtin" }
                                                                                    , sort = External
                                                                                    }
                                                                                }
                                                                            )
                                                                        )
                                                                        [ Unboxed
                                                                            ( Int32 3 )
                                                                        ]
                                                                    )
                                                                    ( Cast AnyT
                                                                        ( Var
                                                                            ( Meta
                                                                                { meta = AnyT
                                                                                , id = Id
                                                                                    { name = "d"
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Eventually" }
                                                                                    , sort = Temporal 345
                                                                                    }
                                                                                }
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                ( Assign
                                                                    ( Meta
                                                                        { meta = AnyT
                                                                        , id = Id
                                                                            { name = "d"
                                                                            , moduleName = ModuleName
                                                                                { raw = "Eventually" }
                                                                            , sort = Temporal 347
                                                                            }
                                                                        }
                                                                    )
                                                                    ( Call
                                                                        ( Var
                                                                            ( Meta
                                                                                { meta = [ AnyT ] :-> AnyT
                                                                                , id = Id
                                                                                    { name = "d"
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Eventually" }
                                                                                    , sort = Temporal 344
                                                                                    }
                                                                                }
                                                                            )
                                                                        )
                                                                        [ Var
                                                                            ( Meta
                                                                                { meta = AnyT
                                                                                , id = Id
                                                                                    { name = "d"
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Eventually" }
                                                                                    , sort = Temporal 346
                                                                                    }
                                                                                }
                                                                            )
                                                                        ]
                                                                    )
                                                                    ( Cast AnyT
                                                                        ( Var
                                                                            ( Meta
                                                                                { meta = AnyT
                                                                                , id = Id
                                                                                    { name = "d"
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Eventually" }
                                                                                    , sort = Temporal 347
                                                                                    }
                                                                                }
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    }
                                                ]
                                                ( Atom
                                                    ( Var
                                                        ( Meta
                                                            { meta =
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            , id = Id
                                                                { name = "fun"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 348
                                                                }
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta = AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 350
                                                        }
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Meta
                                                            { meta =
                                                                [
                                                                    [ SumT
                                                                        [ Con Tuple [] ]
                                                                    ] :-> AnyT
                                                                ] :-> AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 341
                                                                }
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Meta
                                                            { meta =
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 349
                                                                }
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast AnyT
                                                    ( Var
                                                        ( Meta
                                                            { meta = AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 350
                                                                }
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Meta
                                        { meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "fun"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 351
                                            }
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Meta
                                { meta = AnyT
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 353
                                    }
                                }
                            )
                            ( Call
                                ( Var
                                    ( Meta
                                        { meta =
                                            [
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> AnyT
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 325
                                            }
                                        }
                                    )
                                )
                                [ Var
                                    ( Meta
                                        { meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 352
                                            }
                                        }
                                    )
                                ]
                            )
                            ( Cast AnyT
                                ( Var
                                    ( Meta
                                        { meta = AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 353
                                            }
                                        }
                                    )
                                )
                            )
                        )
                    )
                )
                ( Atom
                    ( Var
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 354
                                }
                            }
                        )
                    )
                )
            )
        ]
    , topFuns =
        [
            ( Meta
                { meta =
                    [ AnyT
                    , [ AnyT ] :-> AnyT
                    ] :-> AnyT
                , id = Id
                    { name = "eventuallyBind_curry"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 288
                    }
                }
            ,
                [ Meta
                    { meta = AnyT
                    , id = Id
                        { name = "done"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 289
                        }
                    }
                , Meta
                    { meta = [ AnyT ] :-> AnyT
                    , id = Id
                        { name = "k"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 290
                        }
                    }
                ]
            ,
                [ AnyT
                , [ AnyT ] :-> AnyT
                ] :-> AnyT
            , Match
                ( Cast
                    ( SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    )
                    ( Var
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "done"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 289
                                }
                            }
                        )
                    )
                )
                [ Unpack
                    ( Con
                        ( Data "Eventually.Done" ) [ AnyT ]
                    )
                    [ Meta
                        { meta = AnyT
                        , id = Id
                            { name = "p"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 291
                            }
                        }
                    ]
                    ( Assign
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 292
                                }
                            }
                        )
                        ( Call
                            ( Var
                                ( Meta
                                    { meta = [ AnyT ] :-> AnyT
                                    , id = Id
                                        { name = "k"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 290
                                        }
                                    }
                                )
                            )
                            [ Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "p"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 291
                                        }
                                    }
                                )
                            ]
                        )
                        ( Cast AnyT
                            ( Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 292
                                        }
                                    }
                                )
                            )
                        )
                    )
                , Unpack
                    ( Con
                        ( Data "Eventually.NotYetDone" )
                        [
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        ]
                    )
                    [ Meta
                        { meta =
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        , id = Id
                            { name = "p"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 293
                            }
                        }
                    ]
                    ( Assign
                        ( Meta
                            { meta =
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 303
                                }
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Meta
                                    { meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    , id = Id
                                        { name = "fun"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 294
                                        }
                                    }
                                , typ =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                , _object = Fun
                                    [ Meta
                                        { meta = SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "$_"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 295
                                            }
                                        }
                                    ]
                                    ( Assign
                                        ( Meta
                                            { meta =
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 301
                                                }
                                            }
                                        )
                                        ( Assign
                                            ( Meta
                                                { meta = AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 299
                                                    }
                                                }
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta = SumT
                                                        [ Con Tuple [] ]
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 297
                                                        }
                                                    }
                                                )
                                                ( Let
                                                    [ LocalDef
                                                        { _variable = Meta
                                                            { meta = SumT
                                                                [ Con Tuple [] ]
                                                            , id = Id
                                                                { name = "let"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 296
                                                                }
                                                            }
                                                        , typ = SumT
                                                            [ Con Tuple [] ]
                                                        , _object = Pack
                                                            ( SumT
                                                                [ Con Tuple [] ]
                                                            )
                                                            ( Con Tuple [] ) []
                                                        }
                                                    ]
                                                    ( Atom
                                                        ( Var
                                                            ( Meta
                                                                { meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "let"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 296
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 298
                                                            }
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Meta
                                                                { meta =
                                                                    [ SumT
                                                                        [ Con Tuple [] ]
                                                                    ] :-> AnyT
                                                                , id = Id
                                                                    { name = "p"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 293
                                                                    }
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Meta
                                                                { meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 297
                                                                    }
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Meta
                                                                { meta = AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 298
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta =
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 300
                                                        }
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Meta
                                                            { meta = [ AnyT ] :->
                                                                (
                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                )
                                                            , id = Id
                                                                { name = "eventuallyBind"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = External
                                                                }
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Meta
                                                            { meta = AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 299
                                                                }
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast
                                                    (
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    )
                                                    ( Var
                                                        ( Meta
                                                            { meta =
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 300
                                                                }
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ( Assign
                                            ( Meta
                                                { meta = AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 302
                                                    }
                                                }
                                            )
                                            ( Call
                                                ( Var
                                                    ( Meta
                                                        { meta =
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 301
                                                            }
                                                        }
                                                    )
                                                )
                                                [ Var
                                                    ( Meta
                                                        { meta = [ AnyT ] :-> AnyT
                                                        , id = Id
                                                            { name = "k"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 290
                                                            }
                                                        }
                                                    )
                                                ]
                                            )
                                            ( Cast AnyT
                                                ( Var
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 302
                                                            }
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Meta
                                        { meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "fun"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 294
                                            }
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Meta
                                { meta = AnyT
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 304
                                    }
                                }
                            )
                            ( Call
                                ( Var
                                    ( Meta
                                        { meta =
                                            [
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> AnyT
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "NotYetDone"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        }
                                    )
                                )
                                [ Var
                                    ( Meta
                                        { meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 303
                                            }
                                        }
                                    )
                                ]
                            )
                            ( Cast AnyT
                                ( Var
                                    ( Meta
                                        { meta = AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 304
                                            }
                                        }
                                    )
                                )
                            )
                        )
                    )
                ]
            )
        ,
            ( Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "Done"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta = AnyT
                    , id = Id
                        { name = "p"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 258
                        }
                    }
                ]
            , [ AnyT ] :-> AnyT
            , Let
                [ LocalDef
                    { _variable = Meta
                        { meta = SumT
                            [ Con
                                ( Data "Eventually.Done" ) [ AnyT ]
                            , Con
                                ( Data "Eventually.NotYetDone" )
                                [
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                ]
                            ]
                        , id = Id
                            { name = "let"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 259
                            }
                        }
                    , typ = SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    , _object = Pack
                        ( SumT
                            [ Con
                                ( Data "Eventually.Done" ) [ AnyT ]
                            , Con
                                ( Data "Eventually.NotYetDone" )
                                [
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                ]
                            ]
                        )
                        ( Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        )
                        [ Var
                            ( Meta
                                { meta = AnyT
                                , id = Id
                                    { name = "p"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 258
                                    }
                                }
                            )
                        ]
                    }
                ]
                ( Cast AnyT
                    ( Var
                        ( Meta
                            { meta = SumT
                                [ Con
                                    ( Data "Eventually.Done" ) [ AnyT ]
                                , Con
                                    ( Data "Eventually.NotYetDone" )
                                    [
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    ]
                                ]
                            , id = Id
                                { name = "let"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 259
                                }
                            }
                        )
                    )
                )
            )
        ,
            ( Meta
                { meta =
                    [
                        [ SumT
                            [ Con Tuple [] ]
                        ] :-> AnyT
                    ] :-> AnyT
                , id = Id
                    { name = "NotYetDone"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta =
                        [ SumT
                            [ Con Tuple [] ]
                        ] :-> AnyT
                    , id = Id
                        { name = "p"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 260
                        }
                    }
                ]
            ,
                [
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                ] :-> AnyT
            , Let
                [ LocalDef
                    { _variable = Meta
                        { meta = SumT
                            [ Con
                                ( Data "Eventually.Done" ) [ AnyT ]
                            , Con
                                ( Data "Eventually.NotYetDone" )
                                [
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                ]
                            ]
                        , id = Id
                            { name = "let"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 261
                            }
                        }
                    , typ = SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    , _object = Pack
                        ( SumT
                            [ Con
                                ( Data "Eventually.Done" ) [ AnyT ]
                            , Con
                                ( Data "Eventually.NotYetDone" )
                                [
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                ]
                            ]
                        )
                        ( Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        )
                        [ Var
                            ( Meta
                                { meta =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                , id = Id
                                    { name = "p"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 260
                                    }
                                }
                            )
                        ]
                    }
                ]
                ( Cast AnyT
                    ( Var
                        ( Meta
                            { meta = SumT
                                [ Con
                                    ( Data "Eventually.Done" ) [ AnyT ]
                                , Con
                                    ( Data "Eventually.NotYetDone" )
                                    [
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    ]
                                ]
                            , id = Id
                                { name = "let"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 261
                                }
                            }
                        )
                    )
                )
            )
        ,
            ( Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "step"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta = AnyT
                    , id = Id
                        { name = "done"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 262
                        }
                    }
                ]
            , [ AnyT ] :-> AnyT
            , Match
                ( Cast
                    ( SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    )
                    ( Var
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "done"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 262
                                }
                            }
                        )
                    )
                )
                [ Unpack
                    ( Con
                        ( Data "Eventually.Done" ) [ AnyT ]
                    )
                    [ Meta
                        { meta = AnyT
                        , id = Id
                            { name = "p"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 263
                            }
                        }
                    ]
                    ( Assign
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 264
                                }
                            }
                        )
                        ( Call
                            ( Var
                                ( Meta
                                    { meta = [ AnyT ] :-> AnyT
                                    , id = Id
                                        { name = "Done"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = External
                                        }
                                    }
                                )
                            )
                            [ Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "p"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 263
                                        }
                                    }
                                )
                            ]
                        )
                        ( Cast AnyT
                            ( Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 264
                                        }
                                    }
                                )
                            )
                        )
                    )
                , Unpack
                    ( Con
                        ( Data "Eventually.NotYetDone" )
                        [
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        ]
                    )
                    [ Meta
                        { meta =
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        , id = Id
                            { name = "p"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 265
                            }
                        }
                    ]
                    ( Assign
                        ( Meta
                            { meta = SumT
                                [ Con Tuple [] ]
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 267
                                }
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Meta
                                    { meta = SumT
                                        [ Con Tuple [] ]
                                    , id = Id
                                        { name = "let"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 266
                                        }
                                    }
                                , typ = SumT
                                    [ Con Tuple [] ]
                                , _object = Pack
                                    ( SumT
                                        [ Con Tuple [] ]
                                    )
                                    ( Con Tuple [] ) []
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Meta
                                        { meta = SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "let"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 266
                                            }
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Meta
                                { meta = AnyT
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 268
                                    }
                                }
                            )
                            ( Call
                                ( Var
                                    ( Meta
                                        { meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "p"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 265
                                            }
                                        }
                                    )
                                )
                                [ Var
                                    ( Meta
                                        { meta = SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 267
                                            }
                                        }
                                    )
                                ]
                            )
                            ( Cast AnyT
                                ( Var
                                    ( Meta
                                        { meta = AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 268
                                            }
                                        }
                                    )
                                )
                            )
                        )
                    )
                ]
            )
        ,
            ( Meta
                { meta =
                    [ RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "return"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta = RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    , id = Id
                        { name = "record"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 269
                        }
                    }
                ]
            ,
                [ RecordT
                    ( fromList
                        [
                            ( "return"
                            , [ AnyT ] :-> AnyT
                            )
                        ,
                            ( "bind"
                            , [ AnyT ] :->
                                (
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                )
                            )
                        ]
                    )
                ] :->
                ( [ AnyT ] :-> AnyT )
            , Match
                ( Atom
                    ( Var
                        ( Meta
                            { meta = RecordT
                                ( fromList
                                    [
                                        ( "return"
                                        , [ AnyT ] :-> AnyT
                                        )
                                    ,
                                        ( "bind"
                                        , [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        )
                                    ]
                                )
                            , id = Id
                                { name = "record"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 269
                                }
                            }
                        )
                    )
                )
                [ OpenRecord
                    ( fromList
                        [
                            ( "return"
                            , Meta
                                { meta = [ AnyT ] :-> AnyT
                                , id = Id
                                    { name = "p"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 270
                                    }
                                }
                            )
                        ,
                            ( "bind"
                            , Meta
                                { meta = [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                , id = Id
                                    { name = "p"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 271
                                    }
                                }
                            )
                        ]
                    )
                    ( Atom
                        ( Var
                            ( Meta
                                { meta = [ AnyT ] :-> AnyT
                                , id = Id
                                    { name = "p"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 270
                                    }
                                }
                            )
                        )
                    )
                ]
            )
        ,
            ( Meta
                { meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , id = Id
                    { name = "eventuallyBind"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta = AnyT
                    , id = Id
                        { name = "done"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 272
                        }
                    }
                ]
            , [ AnyT ] :->
                (
                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                )
            , Let
                [ LocalDef
                    { _variable = Meta
                        { meta =
                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                        , id = Id
                            { name = "let"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 305
                            }
                        }
                    , typ =
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    , _object = Fun
                        [ Meta
                            { meta = [ AnyT ] :-> AnyT
                            , id = Id
                                { name = "k"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 273
                                }
                            }
                        ]
                        ( CallDirect
                            ( Meta
                                { meta =
                                    [ AnyT
                                    , [ AnyT ] :-> AnyT
                                    ] :-> AnyT
                                , id = Id
                                    { name = "eventuallyBind_curry"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 288
                                    }
                                }
                            )
                            [ Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "done"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 272
                                        }
                                    }
                                )
                            , Var
                                ( Meta
                                    { meta = [ AnyT ] :-> AnyT
                                    , id = Id
                                        { name = "k"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 273
                                        }
                                    }
                                )
                            ]
                        )
                    }
                ]
                ( Atom
                    ( Var
                        ( Meta
                            { meta =
                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                            , id = Id
                                { name = "let"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 305
                                }
                            }
                        )
                    )
                )
            )
        ,
            ( Meta
                { meta =
                    [ RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    ] :->
                    ( [ AnyT ] :->
                        (
                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                        )
                    )
                , id = Id
                    { name = "bind"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta = RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    , id = Id
                        { name = "record"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 308
                        }
                    }
                ]
            ,
                [ RecordT
                    ( fromList
                        [
                            ( "return"
                            , [ AnyT ] :-> AnyT
                            )
                        ,
                            ( "bind"
                            , [ AnyT ] :->
                                (
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                )
                            )
                        ]
                    )
                ] :->
                ( [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                )
            , Match
                ( Atom
                    ( Var
                        ( Meta
                            { meta = RecordT
                                ( fromList
                                    [
                                        ( "return"
                                        , [ AnyT ] :-> AnyT
                                        )
                                    ,
                                        ( "bind"
                                        , [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        )
                                    ]
                                )
                            , id = Id
                                { name = "record"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 308
                                }
                            }
                        )
                    )
                )
                [ OpenRecord
                    ( fromList
                        [
                            ( "return"
                            , Meta
                                { meta = [ AnyT ] :-> AnyT
                                , id = Id
                                    { name = "p"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 309
                                    }
                                }
                            )
                        ,
                            ( "bind"
                            , Meta
                                { meta = [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                , id = Id
                                    { name = "p"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 310
                                    }
                                }
                            )
                        ]
                    )
                    ( Atom
                        ( Var
                            ( Meta
                                { meta = [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                , id = Id
                                    { name = "p"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 310
                                    }
                                }
                            )
                        )
                    )
                ]
            )
        ,
            ( Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "main"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta = SumT
                        [ Con Tuple [] ]
                    , id = Id
                        { name = "$_"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 355
                        }
                    }
                ]
            ,
                [ SumT
                    [ Con Tuple [] ]
                ] :-> SumT
                [ Con Tuple [] ]
            , Assign
                ( Meta
                    { meta = AnyT
                    , id = Id
                        { name = "d"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Temporal 359
                        }
                    }
                )
                ( Assign
                    ( Meta
                        { meta =
                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                        , id = Id
                            { name = "d"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 357
                            }
                        }
                    )
                    ( Assign
                        ( Meta
                            { meta =
                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 356
                                }
                            }
                        )
                        ( Call
                            ( Var
                                ( Meta
                                    { meta = [ AnyT ] :->
                                        (
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        )
                                    , id = Id
                                        { name = "|>"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = External
                                        }
                                    }
                                )
                            )
                            [ Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "comp"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = External
                                        }
                                    }
                                )
                            ]
                        )
                        ( Cast
                            (
                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                            )
                            ( Var
                                ( Meta
                                    { meta =
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 356
                                        }
                                    }
                                )
                            )
                        )
                    )
                    ( Assign
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 358
                                }
                            }
                        )
                        ( Call
                            ( Var
                                ( Meta
                                    { meta =
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 357
                                        }
                                    }
                                )
                            )
                            [ Var
                                ( Meta
                                    { meta = [ AnyT ] :-> AnyT
                                    , id = Id
                                        { name = "step"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = External
                                        }
                                    }
                                )
                            ]
                        )
                        ( Cast AnyT
                            ( Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 358
                                        }
                                    }
                                )
                            )
                        )
                    )
                )
                ( Assign
                    ( Meta
                        { meta =
                            [ [ AnyT ] :-> SumT
                                [ Con Tuple [] ]
                            ] :-> SumT
                            [ Con Tuple [] ]
                        , id = Id
                            { name = "d"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 373
                            }
                        }
                    )
                    ( Assign
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 371
                                }
                            }
                        )
                        ( Assign
                            ( Meta
                                { meta =
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 369
                                    }
                                }
                            )
                            ( Assign
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 367
                                        }
                                    }
                                )
                                ( Assign
                                    ( Meta
                                        { meta =
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 365
                                            }
                                        }
                                    )
                                    ( Assign
                                        ( Meta
                                            { meta = AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 363
                                                }
                                            }
                                        )
                                        ( Assign
                                            ( Meta
                                                { meta =
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 361
                                                    }
                                                }
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta =
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 360
                                                        }
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Meta
                                                            { meta = [ AnyT ] :->
                                                                (
                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                )
                                                            , id = Id
                                                                { name = "|>"
                                                                , moduleName = ModuleName
                                                                    { raw = "Prelude" }
                                                                , sort = External
                                                                }
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Meta
                                                            { meta = AnyT
                                                            , id = Id
                                                                { name = "comp"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = External
                                                                }
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast
                                                    (
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    )
                                                    ( Var
                                                        ( Meta
                                                            { meta =
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 360
                                                                }
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta = AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 362
                                                        }
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Meta
                                                            { meta =
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 361
                                                                }
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Meta
                                                            { meta = [ AnyT ] :-> AnyT
                                                            , id = Id
                                                                { name = "step"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = External
                                                                }
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast AnyT
                                                    ( Var
                                                        ( Meta
                                                            { meta = AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 362
                                                                }
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ( Assign
                                            ( Meta
                                                { meta =
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 364
                                                    }
                                                }
                                            )
                                            ( Call
                                                ( Var
                                                    ( Meta
                                                        { meta = [ AnyT ] :->
                                                            (
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            )
                                                        , id = Id
                                                            { name = "|>"
                                                            , moduleName = ModuleName
                                                                { raw = "Prelude" }
                                                            , sort = External
                                                            }
                                                        }
                                                    )
                                                )
                                                [ Var
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 363
                                                            }
                                                        }
                                                    )
                                                ]
                                            )
                                            ( Cast
                                                (
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                )
                                                ( Var
                                                    ( Meta
                                                        { meta =
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 364
                                                            }
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                    ( Assign
                                        ( Meta
                                            { meta = AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 366
                                                }
                                            }
                                        )
                                        ( Call
                                            ( Var
                                                ( Meta
                                                    { meta =
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 365
                                                        }
                                                    }
                                                )
                                            )
                                            [ Var
                                                ( Meta
                                                    { meta = [ AnyT ] :-> AnyT
                                                    , id = Id
                                                        { name = "step"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = External
                                                        }
                                                    }
                                                )
                                            ]
                                        )
                                        ( Cast AnyT
                                            ( Var
                                                ( Meta
                                                    { meta = AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 366
                                                        }
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                                ( Assign
                                    ( Meta
                                        { meta =
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 368
                                            }
                                        }
                                    )
                                    ( Call
                                        ( Var
                                            ( Meta
                                                { meta = [ AnyT ] :->
                                                    (
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    )
                                                , id = Id
                                                    { name = "|>"
                                                    , moduleName = ModuleName
                                                        { raw = "Prelude" }
                                                    , sort = External
                                                    }
                                                }
                                            )
                                        )
                                        [ Var
                                            ( Meta
                                                { meta = AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 367
                                                    }
                                                }
                                            )
                                        ]
                                    )
                                    ( Cast
                                        (
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        )
                                        ( Var
                                            ( Meta
                                                { meta =
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 368
                                                    }
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                            ( Assign
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 370
                                        }
                                    }
                                )
                                ( Call
                                    ( Var
                                        ( Meta
                                            { meta =
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 369
                                                }
                                            }
                                        )
                                    )
                                    [ Var
                                        ( Meta
                                            { meta = [ AnyT ] :-> AnyT
                                            , id = Id
                                                { name = "step"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            }
                                        )
                                    ]
                                )
                                ( Cast AnyT
                                    ( Var
                                        ( Meta
                                            { meta = AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 370
                                                }
                                            }
                                        )
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Meta
                                { meta =
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 372
                                    }
                                }
                            )
                            ( Call
                                ( Var
                                    ( Meta
                                        { meta = [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        , id = Id
                                            { name = "|>"
                                            , moduleName = ModuleName
                                                { raw = "Prelude" }
                                            , sort = External
                                            }
                                        }
                                    )
                                )
                                [ Var
                                    ( Meta
                                        { meta = AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 371
                                            }
                                        }
                                    )
                                ]
                            )
                            ( Cast
                                (
                                    [ [ AnyT ] :-> SumT
                                        [ Con Tuple [] ]
                                    ] :-> SumT
                                    [ Con Tuple [] ]
                                )
                                ( Var
                                    ( Meta
                                        { meta =
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 372
                                            }
                                        }
                                    )
                                )
                            )
                        )
                    )
                    ( Assign
                        ( Meta
                            { meta = [ AnyT ] :-> SumT
                                [ Con Tuple [] ]
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 384
                                }
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Meta
                                    { meta = [ AnyT ] :-> SumT
                                        [ Con Tuple [] ]
                                    , id = Id
                                        { name = "fun"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 383
                                        }
                                    }
                                , typ = [ AnyT ] :-> SumT
                                    [ Con Tuple [] ]
                                , _object = Fun
                                    [ Meta
                                        { meta = AnyT
                                        , id = Id
                                            { name = "done"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 374
                                            }
                                        }
                                    ]
                                    ( Match
                                        ( Cast
                                            ( SumT
                                                [ Con
                                                    ( Data "Eventually.Done" ) [ AnyT ]
                                                , Con
                                                    ( Data "Eventually.NotYetDone" )
                                                    [
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> AnyT
                                                    ]
                                                ]
                                            )
                                            ( Var
                                                ( Meta
                                                    { meta = AnyT
                                                    , id = Id
                                                        { name = "done"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 374
                                                        }
                                                    }
                                                )
                                            )
                                        )
                                        [ Unpack
                                            ( Con
                                                ( Data "Eventually.Done" ) [ AnyT ]
                                            )
                                            [ Meta
                                                { meta = AnyT
                                                , id = Id
                                                    { name = "p"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 375
                                                    }
                                                }
                                            ]
                                            ( Assign
                                                ( Meta
                                                    { meta = AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 377
                                                        }
                                                    }
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 376
                                                            }
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Meta
                                                                { meta = [ AnyT ] :-> AnyT
                                                                , id = Id
                                                                    { name = "toStringInt32"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Builtin" }
                                                                    , sort = External
                                                                    }
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Meta
                                                                { meta = AnyT
                                                                , id = Id
                                                                    { name = "p"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 375
                                                                    }
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Meta
                                                                { meta = AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 376
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta = SumT
                                                            [ Con Tuple [] ]
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 378
                                                            }
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Meta
                                                                { meta = [ AnyT ] :-> SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "printString"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Builtin" }
                                                                    , sort = External
                                                                    }
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Meta
                                                                { meta = AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 377
                                                                    }
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast
                                                        ( SumT
                                                            [ Con Tuple [] ]
                                                        )
                                                        ( Var
                                                            ( Meta
                                                                { meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 378
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        , Unpack
                                            ( Con
                                                ( Data "Eventually.NotYetDone" )
                                                [
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                ]
                                            )
                                            [ Meta
                                                { meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                , id = Id
                                                    { name = "p"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 379
                                                    }
                                                }
                                            ]
                                            ( Assign
                                                ( Meta
                                                    { meta = AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 381
                                                        }
                                                    }
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 380
                                                            }
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Meta
                                                                { meta = [ StringT ] :-> AnyT
                                                                , id = Id
                                                                    { name = "String#"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Builtin" }
                                                                    , sort = External
                                                                    }
                                                                }
                                                            )
                                                        )
                                                        [ Unboxed
                                                            ( String "not yet" )
                                                        ]
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Meta
                                                                { meta = AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 380
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta = SumT
                                                            [ Con Tuple [] ]
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 382
                                                            }
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Meta
                                                                { meta = [ AnyT ] :-> SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "printString"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Builtin" }
                                                                    , sort = External
                                                                    }
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Meta
                                                                { meta = AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 381
                                                                    }
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast
                                                        ( SumT
                                                            [ Con Tuple [] ]
                                                        )
                                                        ( Var
                                                            ( Meta
                                                                { meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 382
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        ]
                                    )
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Meta
                                        { meta = [ AnyT ] :-> SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "fun"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 383
                                            }
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Meta
                                { meta = SumT
                                    [ Con Tuple [] ]
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 385
                                    }
                                }
                            )
                            ( Call
                                ( Var
                                    ( Meta
                                        { meta =
                                            [ [ AnyT ] :-> SumT
                                                [ Con Tuple [] ]
                                            ] :-> SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 373
                                            }
                                        }
                                    )
                                )
                                [ Var
                                    ( Meta
                                        { meta = [ AnyT ] :-> SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 384
                                            }
                                        }
                                    )
                                ]
                            )
                            ( Cast
                                ( SumT
                                    [ Con Tuple [] ]
                                )
                                ( Var
                                    ( Meta
                                        { meta = SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 385
                                            }
                                        }
                                    )
                                )
                            )
                        )
                    )
                )
            )
        ]
    , extFuns = []
    }
DsState
    { _nameEnv = fromList
        [
            ( Id
                { name = "tailString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "tailString"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isWhiteSpace"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "isWhiteSpace"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_div_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_div_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "printString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "printString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Cons"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "Cons"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mulFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , id = Id
                    { name = "mulFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "divInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "divInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "addInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "addInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_le_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_le_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :-> StringT
                , id = Id
                    { name = "toStringInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "ltChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "int64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :-> AnyT
                , id = Id
                    { name = "int64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "leInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 257
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "$_"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 355
                    }
                }
            )
        ,
            ( Id
                { name = "subDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , id = Id
                    { name = "subDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "leFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eventually"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta = RecordT
                    ( fromList
                        [
                            ( "return"
                            , [ AnyT ] :-> AnyT
                            )
                        ,
                            ( "bind"
                            , [ AnyT ] :->
                                (
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                )
                            )
                        ]
                    )
                , id = Id
                    { name = "eventually"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mulInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "mulInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "geInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "gtInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Int64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :-> AnyT
                , id = Id
                    { name = "Int64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ge_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_ge_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "gtChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "appendString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "appendString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "leChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "toStringFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mulInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , id = Id
                    { name = "mulInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "ltDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_eq_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "malgo_eq_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "substring"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :->
                        ( [ AnyT ] :-> AnyT )
                    )
                , id = Id
                    { name = "substring"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "leFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "work"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 9
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 276
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_add_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , id = Id
                    { name = "malgo_add_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_add_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , id = Id
                    { name = "malgo_add_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "gtFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isAlphanum#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "isAlphanum#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "putStr"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "putStr"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "toStringInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Just"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "Just"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_le_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "malgo_le_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_le_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "malgo_le_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_mul_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , id = Id
                    { name = "malgo_mul_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "neChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_char_ord"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "malgo_char_ord"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "value"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 11
                }
            , Meta
                { meta = AnyT
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 263
                    }
                }
            )
        ,
            ( Id
                { name = "subInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "subInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Nothing"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [] :-> AnyT
                , id = Id
                    { name = "Nothing"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_gt_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_gt_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "geChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "sqrt"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :-> DoubleT
                , id = Id
                    { name = "sqrt"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ordChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "ordChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "comp"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta = AnyT
                , id = Id
                    { name = "comp"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ge_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "malgo_ge_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_double_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :-> StringT
                , id = Id
                    { name = "malgo_double_to_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "|>"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , id = Id
                    { name = "|>"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_mul_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , id = Id
                    { name = "malgo_mul_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "geString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_is_lower"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "malgo_is_lower"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_print_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "malgo_print_char"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "work"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 12
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 265
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_char_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> StringT
                , id = Id
                    { name = "malgo_char_to_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "gtChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mulInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "mulInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "sqrtDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "sqrtDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "sqrtDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :-> DoubleT
                , id = Id
                    { name = "sqrtDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "ltString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "divDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "divDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isUpper#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "isUpper#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ne_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "malgo_ne_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 102
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "$_"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 277
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_div_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , id = Id
                    { name = "malgo_div_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_unsafe_cast"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "malgo_unsafe_cast"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "gtString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_get_contents"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> StringT
                , id = Id
                    { name = "malgo_get_contents"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "False"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [] :-> AnyT
                , id = Id
                    { name = "False"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_string_append"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> StringT )
                , id = Id
                    { name = "malgo_string_append"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "neString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "geInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mulFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "mulFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "ltInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "return"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta =
                    [ RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "return"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :-> StringT
                , id = Id
                    { name = "toStringInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "addFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , id = Id
                    { name = "addFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "eqDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Double#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :-> AnyT
                , id = Id
                    { name = "Double#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_eq_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "malgo_eq_char"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "int32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :-> AnyT
                , id = Id
                    { name = "int32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "sqrtf"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :-> FloatT
                , id = Id
                    { name = "sqrtf"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "leInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Int32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :-> AnyT
                , id = Id
                    { name = "Int32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "sqrtFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "sqrtFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "value"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 7
                }
            , Meta
                { meta = AnyT
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 274
                    }
                }
            )
        ,
            ( Id
                { name = "double#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :-> AnyT
                , id = Id
                    { name = "double#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :-> StringT
                , id = Id
                    { name = "toStringDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "eqString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isAlphanum"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "isAlphanum"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "printInt64"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "printInt64"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "leDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_lt_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "malgo_lt_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "const"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "const"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "gtDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "bind"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta =
                    [ RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    ] :->
                    ( [ AnyT ] :->
                        (
                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                        )
                    )
                , id = Id
                    { name = "bind"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "subInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "subInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "getChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "getChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_is_digit"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "malgo_is_digit"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_le_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "malgo_le_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "addDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , id = Id
                    { name = "addDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "addInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "addInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_gt_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "malgo_gt_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "True"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [] :-> AnyT
                , id = Id
                    { name = "True"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "neInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_le_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "malgo_le_char"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "dropWhileString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "dropWhileString"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "gtInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "ltFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "neChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "x"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 20
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 270
                    }
                }
            )
        ,
            ( Id
                { name = "toStringDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "toStringDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_string_cons"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ StringT ] :-> StringT )
                , id = Id
                    { name = "malgo_string_cons"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "eqInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ne_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "malgo_ne_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_lt_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "malgo_lt_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "atString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ StringT ] :-> CharT )
                , id = Id
                    { name = "atString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "subFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , id = Id
                    { name = "subFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "printChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "printChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "ltInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ge_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "malgo_ge_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_is_alphanum"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "malgo_is_alphanum"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "subInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , id = Id
                    { name = "subInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "eqFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "ltDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_int32_t_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :-> StringT
                , id = Id
                    { name = "malgo_int32_t_to_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_lt_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "malgo_lt_char"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "geString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "geDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 174
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "$_"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 329
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_gt_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "malgo_gt_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "printChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "printChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "consString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ StringT ] :-> StringT )
                , id = Id
                    { name = "consString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "panic"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "panic"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "snd"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple
                            [ AnyT
                            , AnyT
                            ]
                        ]
                    ] :-> AnyT
                , id = Id
                    { name = "snd"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_gt_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "malgo_gt_char"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "atString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "atString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "leDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "x"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 23
                }
            , Meta
                { meta = AnyT
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 375
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_add_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , id = Id
                    { name = "malgo_add_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "foldl"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta =
                    [ [ AnyT ] :->
                        ( [ AnyT ] :-> AnyT )
                    ] :->
                    ( [ AnyT ] :->
                        ( [ AnyT ] :-> AnyT )
                    )
                , id = Id
                    { name = "foldl"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "exitFailure"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , id = Id
                    { name = "exitFailure"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "addFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "addFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "toStringInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "divFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "divFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "printString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "printString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "headString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "headString"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_eq_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_eq_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "undefined"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = AnyT
                , id = Id
                    { name = "undefined"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "sqrtFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :-> FloatT
                , id = Id
                    { name = "sqrtFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "geFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "divFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , id = Id
                    { name = "divFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "substring#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ Int64T ] :->
                        ( [ Int64T ] :-> StringT )
                    )
                , id = Id
                    { name = "substring#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ne_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "malgo_ne_char"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "neInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "fst"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple
                            [ AnyT
                            , AnyT
                            ]
                        ]
                    ] :-> AnyT
                , id = Id
                    { name = "fst"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_mul_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_mul_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 22
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "_"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 342
                    }
                }
            )
        ,
            ( Id
                { name = "k"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 10
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "k"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 273
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_int64_t_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :-> StringT
                , id = Id
                    { name = "malgo_int64_t_to_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "consString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "consString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "divInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "divInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ge_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "malgo_ge_char"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "divInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "divInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 21
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "_"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 326
                    }
                }
            )
        ,
            ( Id
                { name = "appendString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> StringT )
                , id = Id
                    { name = "appendString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "geDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "geInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mapList"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "mapList"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "addInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "addInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "neDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_is_upper"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "malgo_is_upper"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "k"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 8
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "k"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 273
                    }
                }
            )
        ,
            ( Id
                { name = "punctuate"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "punctuate"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "eqChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mulInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "mulInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isLower"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "isLower"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isDigit"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "isDigit"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 147
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "$_"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 313
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_flush"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "malgo_flush"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ne_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "malgo_ne_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "leInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "getContents"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "getContents"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 19
                }
            , Meta
                { meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 271
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_gt_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "malgo_gt_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "eqString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_gt_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "malgo_gt_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "String#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :-> AnyT
                , id = Id
                    { name = "String#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "string#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :-> AnyT
                , id = Id
                    { name = "string#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "gtInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_float_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :-> StringT
                , id = Id
                    { name = "malgo_float_to_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "takeWhileString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "takeWhileString"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "listToString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "listToString"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "case"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , id = Id
                    { name = "case"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "gtFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_lt_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "malgo_lt_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "eqInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_sub_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_sub_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isDigit#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "isDigit#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mulDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , id = Id
                    { name = "mulDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "eqChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "newline"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "newline"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "divDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , id = Id
                    { name = "divDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_string_at"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ StringT ] :-> CharT )
                , id = Id
                    { name = "malgo_string_at"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "printInt32"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "printInt32"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "neInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "ltChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "neFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 16
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 309
                    }
                }
            )
        ,
            ( Id
                { name = "Nil"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [] :-> AnyT
                , id = Id
                    { name = "Nil"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "x"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 15
                }
            , Meta
                { meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 310
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_eq_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "malgo_eq_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ordChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "ordChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "leString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "putStrLn"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "putStrLn"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "leInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "addInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , id = Id
                    { name = "addInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_newline"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "malgo_newline"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "main"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "main"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "concatString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "concatString"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "if"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    (
                        [
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        ] :->
                        (
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ] :-> AnyT
                        )
                    )
                , id = Id
                    { name = "if"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "ltFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_sub_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , id = Id
                    { name = "malgo_sub_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "."
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :->
                        ( [ AnyT ] :-> AnyT )
                    )
                , id = Id
                    { name = "."
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "eqDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "geFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ge_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "malgo_ge_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_lt_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "malgo_lt_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "neFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> StringT
                , id = Id
                    { name = "toStringChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_get_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> CharT
                , id = Id
                    { name = "malgo_get_char"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isLower#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> Int32T
                , id = Id
                    { name = "isLower#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "flush"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "flush"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "lengthString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "lengthString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "geInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "float#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :-> AnyT
                , id = Id
                    { name = "float#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_sub_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , id = Id
                    { name = "malgo_sub_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Float#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :-> AnyT
                , id = Id
                    { name = "Float#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_substring"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ Int64T ] :->
                        ( [ Int64T ] :-> StringT )
                    )
                , id = Id
                    { name = "malgo_substring"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "ltInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isUpper"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "isUpper"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_mul_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , id = Id
                    { name = "malgo_mul_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , id = Id
                    { name = "neInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_panic"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :-> AnyT
                , id = Id
                    { name = "malgo_panic"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_le_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "malgo_le_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :-> StringT
                , id = Id
                    { name = "toStringFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "not"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "not"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "geChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , id = Id
                    { name = "geChar#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "toStringChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "toStringChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "isTrue#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :-> AnyT
                , id = Id
                    { name = "isTrue#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "mulDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "mulDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "<|"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "<|"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "subFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "subFloat"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_add_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_add_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "gtInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "eqInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eventuallyBind"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , id = Id
                    { name = "eventuallyBind"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Done"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "Done"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "unless"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :->
                        (
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ] :-> AnyT
                        )
                    )
                , id = Id
                    { name = "unless"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_exit_failure"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , id = Id
                    { name = "malgo_exit_failure"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "neDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ge_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "malgo_ge_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "neString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "neString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "char#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> AnyT
                , id = Id
                    { name = "char#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "NotYetDone"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta =
                    [
                        [ SumT
                            [ Con Tuple [] ]
                        ] :-> AnyT
                    ] :-> AnyT
                , id = Id
                    { name = "NotYetDone"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "gtString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "leString"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "cond"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "cond"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "Char#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ CharT ] :-> AnyT
                , id = Id
                    { name = "Char#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_print_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "malgo_print_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_lt_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_lt_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "step"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "step"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_sub_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , id = Id
                    { name = "malgo_sub_int64_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "ltString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "addDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "addDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "eqFloat#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "lengthString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :-> Int64T
                , id = Id
                    { name = "lengthString#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "ltInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "ltInt32"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "leChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "leChar"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ne_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , id = Id
                    { name = "malgo_ne_string"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "tail"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "tail"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "subDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "subDouble"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "gtDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "gtDouble#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 24
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , id = Id
                    { name = "p"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 379
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_ne_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "malgo_ne_int32_t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_eq_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , id = Id
                    { name = "malgo_eq_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_div_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , id = Id
                    { name = "malgo_div_double"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "subInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , id = Id
                    { name = "subInt32#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "divInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , id = Id
                    { name = "divInt64#"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "identity"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "identity"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_eq_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , id = Id
                    { name = "malgo_eq_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_string_length"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :-> Int64T
                , id = Id
                    { name = "malgo_string_length"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "malgo_div_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , id = Id
                    { name = "malgo_div_float"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "head"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "head"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "eqInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Meta
                { meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , id = Id
                    { name = "eqInt64"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = External
                    }
                }
            )
        ]
    , _signatureMap = fromList
        [
            ( Id
                { name = "tailString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isWhiteSpace"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_div_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "printString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "Cons"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Prelude.#a_19"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 95
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Prelude.#a_19"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 95
                            }
                        )
                    )
                    ( TyArr
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "Prelude.#a_19"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 95
                                    }
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "Prelude.#a_19"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 95
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "divInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_le_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "toStringInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "ltChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "int64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "leInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 257
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "subDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "leFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eventually"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 31
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 29
                    }
                ]
                ( TyRecord
                    ( fromList
                        [
                            ( "return"
                            , TyArr
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Internal 29
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "a"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 29
                                            }
                                        )
                                    )
                                )
                            )
                        ,
                            ( "bind"
                            , TyArr
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "a"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 29
                                            }
                                        )
                                    )
                                )
                                ( TyArr
                                    ( TyArr
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 29
                                                }
                                            )
                                        )
                                        ( TyApp
                                            ( TyCon
                                                ( Id
                                                    { name = "Eventually"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = External
                                                    }
                                                )
                                            )
                                            ( TyVar
                                                ( Id
                                                    { name = "b"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Internal 31
                                                    }
                                                )
                                            )
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "b"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 31
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                        ]
                    )
                )
            )
        ,
            ( Id
                { name = "mulInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "Int64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "gtChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "appendString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "leChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "toStringFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "ltDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "substring"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyArr
                            ( TyCon
                                ( Id
                                    { name = "Int64"
                                    , moduleName = ModuleName
                                        { raw = "Builtin" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyCon
                                ( Id
                                    { name = "String"
                                    , moduleName = ModuleName
                                        { raw = "Builtin" }
                                    , sort = External
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "leFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "work"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 9
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 83
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_add_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_add_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "gtFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "isAlphanum#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "putStr"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "toStringInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Just"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Prelude.#a_18"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 94
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Prelude.#a_18"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 94
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Maybe"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Prelude.#a_18"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 94
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_le_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_le_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_mul_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "neChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_char_ord"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "value"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 11
                }
            , Forall []
                ( TyVar
                    ( Id
                        { name = "Eventually.#a_0"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 57
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "subInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Nothing"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Prelude.#a_18"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 94
                    }
                ]
                ( TyApp
                    ( TyCon
                        ( Id
                            { name = "Maybe"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = External
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "Prelude.#a_18"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 94
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "geChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "sqrt"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
            )
        ,
            ( Id
                { name = "ordChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "comp"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall []
                ( TyApp
                    ( TyCon
                        ( Id
                            { name = "Eventually"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_double_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "|>"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 135
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 137
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 137
                            }
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 137
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 135
                                    }
                                )
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 135
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_mul_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "geString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_is_lower"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "malgo_print_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "work"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 12
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 57
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_char_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "gtChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "mulInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "sqrtDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "sqrtDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
            )
        ,
            ( Id
                { name = "ltString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "divDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isUpper#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "malgo_ne_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 102
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "malgo_div_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_unsafe_cast"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 281
                    }
                , Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 279
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 281
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "b"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 279
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_get_contents"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 ) ( TyPrim StringT )
                )
            )
        ,
            ( Id
                { name = "False"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyCon
                    ( Id
                        { name = "Bool"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_string_append"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim StringT ) )
                )
            )
        ,
            ( Id
                { name = "neString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "mulFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "return"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 43
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 41
                    }
                ]
                ( TyArr
                    ( TyRecord
                        ( fromList
                            [
                                ( "return"
                                , TyArr
                                    ( TyVar
                                        ( Id
                                            { name = "a"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 41
                                            }
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 41
                                                }
                                            )
                                        )
                                    )
                                )
                            ,
                                ( "bind"
                                , TyArr
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 41
                                                }
                                            )
                                        )
                                    )
                                    ( TyArr
                                        ( TyArr
                                            ( TyVar
                                                ( Id
                                                    { name = "a"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Internal 41
                                                    }
                                                )
                                            )
                                            ( TyApp
                                                ( TyCon
                                                    ( Id
                                                        { name = "Eventually"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = External
                                                        }
                                                    )
                                                )
                                                ( TyVar
                                                    ( Id
                                                        { name = "b"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Internal 43
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                        ( TyApp
                                            ( TyCon
                                                ( Id
                                                    { name = "Eventually"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = External
                                                    }
                                                )
                                            )
                                            ( TyVar
                                                ( Id
                                                    { name = "b"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Internal 43
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            ]
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 41
                                }
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 41
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "addFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "eqDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "Double#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "int32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "sqrtf"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
            )
        ,
            ( Id
                { name = "leInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Int32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "sqrtFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "value"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 7
                }
            , Forall []
                ( TyVar
                    ( Id
                        { name = "Eventually.#a_0"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 83
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "double#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "eqString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isAlphanum"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "printInt64"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "leDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "const"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 99
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 101
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 101
                            }
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 99
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 101
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "bind"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 39
                    }
                , Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 37
                    }
                ]
                ( TyArr
                    ( TyRecord
                        ( fromList
                            [
                                ( "return"
                                , TyArr
                                    ( TyVar
                                        ( Id
                                            { name = "a"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 39
                                            }
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 39
                                                }
                                            )
                                        )
                                    )
                                )
                            ,
                                ( "bind"
                                , TyArr
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 39
                                                }
                                            )
                                        )
                                    )
                                    ( TyArr
                                        ( TyArr
                                            ( TyVar
                                                ( Id
                                                    { name = "a"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Internal 39
                                                    }
                                                )
                                            )
                                            ( TyApp
                                                ( TyCon
                                                    ( Id
                                                        { name = "Eventually"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = External
                                                        }
                                                    )
                                                )
                                                ( TyVar
                                                    ( Id
                                                        { name = "b"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Internal 37
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                        ( TyApp
                                            ( TyCon
                                                ( Id
                                                    { name = "Eventually"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = External
                                                    }
                                                )
                                            )
                                            ( TyVar
                                                ( Id
                                                    { name = "b"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Internal 37
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            ]
                        )
                    )
                    ( TyArr
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 39
                                    }
                                )
                            )
                        )
                        ( TyArr
                            ( TyArr
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Internal 39
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "b"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 37
                                            }
                                        )
                                    )
                                )
                            )
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Eventually"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Internal 37
                                        }
                                    )
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "subInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "getChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 1257
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "t"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 1257
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_is_digit"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "malgo_le_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "addDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "addInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "True"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyCon
                    ( Id
                        { name = "Bool"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "neInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_le_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "dropWhileString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "x"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 20
                }
            , Forall []
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Internal 71
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 71
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_string_cons"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim StringT ) )
                )
            )
        ,
            ( Id
                { name = "eqInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "atString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim StringT ) ( TyPrim CharT ) )
                )
            )
        ,
            ( Id
                { name = "subFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "printChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "ltInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_is_alphanum"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "subInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "eqFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_int32_t_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "malgo_lt_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "geString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "geDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 174
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "malgo_gt_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "printChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "consString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim StringT ) )
                )
            )
        ,
            ( Id
                { name = "panic"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 285
                    }
                ]
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 285
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "snd"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 111
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 113
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyApp
                            ( TyTuple 2 )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 113
                                    }
                                )
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 111
                                }
                            )
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "b"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 111
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "atString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "leDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "x"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 23
                }
            , Forall []
                ( TyCon
                    ( Id
                        { name = "Int32"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_add_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "foldl"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 119
                    }
                , Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 121
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 119
                                }
                            )
                        )
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 121
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 119
                                    }
                                )
                            )
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 119
                                }
                            )
                        )
                        ( TyArr
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "List"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = Internal 121
                                        }
                                    )
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 119
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "exitFailure"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 289
                    }
                ]
                ( TyArr
                    ( TyTuple 0 )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 289
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "divFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "printString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "headString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Maybe"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "undefined"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 287
                    }
                ]
                ( TyVar
                    ( Id
                        { name = "a"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = Internal 287
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "sqrtFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
            )
        ,
            ( Id
                { name = "geFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "divFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "substring#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim Int64T )
                        ( TyArr ( TyPrim Int64T ) ( TyPrim StringT ) )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "neInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "fst"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 107
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 109
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyApp
                            ( TyTuple 2 )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 109
                                    }
                                )
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 107
                                }
                            )
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 109
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_mul_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 22
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "k"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 10
                }
            , Forall []
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Eventually.#a_0"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Internal 83
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 95
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_int64_t_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "consString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "divInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "divInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 21
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "appendString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim StringT ) )
                )
            )
        ,
            ( Id
                { name = "geDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "geInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mapList"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 125
                    }
                , Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 123
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 125
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 123
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 125
                                    }
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 123
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_is_upper"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "k"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 8
                }
            , Forall []
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Eventually.#a_0"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Internal 83
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 95
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "punctuate"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 127
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 127
                            }
                        )
                    )
                    ( TyArr
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 127
                                    }
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 127
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eqChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "isLower"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isDigit"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 147
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "malgo_flush"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "leInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "getContents"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 1251
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "t"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 1251
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 19
                }
            , Forall []
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 71
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 71
                                    }
                                )
                            )
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Eventually"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Internal 69
                                        }
                                    )
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 69
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "eqString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "String#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "string#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_float_to_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "takeWhileString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "listToString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "case"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 103
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 105
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 105
                            }
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 105
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 103
                                    }
                                )
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 103
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "eqInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_sub_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "isDigit#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "mulDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "eqChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "newline"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 561
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "t"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 561
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "divDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "malgo_string_at"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim StringT ) ( TyPrim CharT ) )
                )
            )
        ,
            ( Id
                { name = "printInt32"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "neInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "neFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 16
                }
            , Forall []
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Internal 124
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 124
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Nil"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Prelude.#a_19"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 95
                    }
                ]
                ( TyApp
                    ( TyCon
                        ( Id
                            { name = "List"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = External
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "Prelude.#a_19"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 95
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "x"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 15
                }
            , Forall []
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 124
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 124
                                    }
                                )
                            )
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Eventually"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Internal 126
                                        }
                                    )
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 126
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "ordChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "leString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "putStrLn"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "leInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_newline"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "main"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "concatString"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "if"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 143
                    }
                ]
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyTuple 0 )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 143
                                    }
                                )
                            )
                        )
                        ( TyArr
                            ( TyArr
                                ( TyTuple 0 )
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = Internal 143
                                        }
                                    )
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 143
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_sub_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "."
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 131
                    }
                , Id
                    { name = "c"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 133
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 129
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 131
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "c"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 133
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 129
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 131
                                    }
                                )
                            )
                        )
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 129
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "c"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 133
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eqDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "neFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "toStringChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "malgo_get_char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 ) ( TyPrim CharT )
                )
            )
        ,
            ( Id
                { name = "isLower#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "flush"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "t"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 1395
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "t"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 1395
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "lengthString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "float#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_sub_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "Float#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_substring"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim Int64T )
                        ( TyArr ( TyPrim Int64T ) ( TyPrim StringT ) )
                    )
                )
            )
        ,
            ( Id
                { name = "ltInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "isUpper"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_mul_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "neInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_panic"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 277
                    }
                ]
                ( TyArr ( TyPrim StringT )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 277
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_le_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "toStringFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "not"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geChar#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "toStringChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isTrue#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "<|"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 139
                    }
                , Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 141
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 141
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 139
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 141
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 139
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "subFloat"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_add_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "gtInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eqInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eventuallyBind"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 33
                    }
                , Id
                    { name = "b"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 35
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 33
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 33
                                    }
                                )
                            )
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Eventually"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Internal 35
                                        }
                                    )
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 35
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Done"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Eventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 27
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Eventually.#a_0"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Internal 27
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 27
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "unless"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 145
                    }
                ]
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 145
                                }
                            )
                        )
                        ( TyArr
                            ( TyArr
                                ( TyTuple 0 )
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = Internal 145
                                        }
                                    )
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , sort = Internal 145
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_exit_failure"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , sort = Internal 283
                    }
                ]
                ( TyArr
                    ( TyTuple 0 )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = Internal 283
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "neString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "char#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "NotYetDone"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Eventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 27
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyTuple 0 )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "Eventually.#a_0"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Internal 27
                                    }
                                )
                            )
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 27
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "leString"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "cond"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 147
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = External
                                }
                            )
                        )
                        ( TyApp
                            ( TyApp
                                ( TyTuple 2 )
                                ( TyCon
                                    ( Id
                                        { name = "Bool"
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , sort = External
                                        }
                                    )
                                )
                            )
                            ( TyArr
                                ( TyTuple 0 )
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = Internal 147
                                        }
                                    )
                                )
                            )
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 147
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Char#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_print_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "step"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Eventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Internal 57
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 57
                                }
                            )
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 57
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_sub_int64_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "ltString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "addDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eqFloat#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "lengthString#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT ) ( TyPrim Int64T ) )
            )
        ,
            ( Id
                { name = "ltInt32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "leChar"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_string"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "tail"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 117
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 117
                                }
                            )
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 117
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "subDouble"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtDouble#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "_"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 24
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_int32_t"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_div_double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "subInt32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "divInt64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "identity"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 97
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 97
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 97
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_string_length"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT ) ( TyPrim Int64T ) )
            )
        ,
            ( Id
                { name = "malgo_div_float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "head"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , sort = Internal 115
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 115
                                }
                            )
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = Internal 115
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eqInt64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ]
    , _typeDefMap = fromList
        [
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 5
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "a"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 33
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 14
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "b"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 37
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "List"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "List"
                        , moduleName = ModuleName
                            { raw = "Prelude" }
                        , sort = External
                        }
                    )
                , _typeParameters =
                    [ Id
                        { name = "Prelude.#a_19"
                        , moduleName = ModuleName
                            { raw = "Prelude" }
                        , sort = Internal 95
                        }
                    ]
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Nil"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Prelude.#a_19"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 95
                                }
                            ]
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "List"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "Prelude.#a_19"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = Internal 95
                                        }
                                    )
                                )
                            )
                        )
                    ,
                        ( Id
                            { name = "Cons"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Prelude.#a_19"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 95
                                }
                            ]
                            ( TyArr
                                ( TyVar
                                    ( Id
                                        { name = "Prelude.#a_19"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = Internal 95
                                        }
                                    )
                                )
                                ( TyArr
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "List"
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "Prelude.#a_19"
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , sort = Internal 95
                                                }
                                            )
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "List"
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "Prelude.#a_19"
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , sort = Internal 95
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Eventually"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Eventually"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = External
                        }
                    )
                , _typeParameters =
                    [ Id
                        { name = "Eventually.#a_0"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 27
                        }
                    ]
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Done"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Eventually.#a_0"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 27
                                }
                            ]
                            ( TyArr
                                ( TyVar
                                    ( Id
                                        { name = "Eventually.#a_0"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Internal 27
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Eventually.#a_0"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 27
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    ,
                        ( Id
                            { name = "NotYetDone"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Eventually.#a_0"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Internal 27
                                }
                            ]
                            ( TyArr
                                ( TyArr
                                    ( TyTuple 0 )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "Eventually.#a_0"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 27
                                                }
                                            )
                                        )
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Eventually.#a_0"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 27
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Int64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim Int64T
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 1
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "Eventually.#a_1"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 25
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 0
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "Eventually.#a_0"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 27
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Float"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Float"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Float#"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim FloatT )
                                ( TyCon
                                    ( Id
                                        { name = "Float"
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 3
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "a"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 29
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Double#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim DoubleT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 13
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "a"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 39
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 6
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "b"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 35
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Int32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim Int32T
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 4
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "b"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 31
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 2
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "Eventually.#b_2"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 26
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Ptr#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPtr
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Double"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Double"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Double#"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim DoubleT )
                                ( TyCon
                                    ( Id
                                        { name = "Double"
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "String"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "String"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "String#"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim StringT )
                                ( TyCon
                                    ( Id
                                        { name = "String"
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "EventuallyBuilder"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyRecord
                    ( fromList
                        [
                            ( "return"
                            , TyArr
                                ( TyVar
                                    ( Id
                                        { name = "Eventually.#a_1"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Internal 25
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Eventually.#a_1"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 25
                                            }
                                        )
                                    )
                                )
                            )
                        ,
                            ( "bind"
                            , TyArr
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Eventually.#a_1"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Internal 25
                                            }
                                        )
                                    )
                                )
                                ( TyArr
                                    ( TyArr
                                        ( TyVar
                                            ( Id
                                                { name = "Eventually.#a_1"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 25
                                                }
                                            )
                                        )
                                        ( TyApp
                                            ( TyCon
                                                ( Id
                                                    { name = "Eventually"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = External
                                                    }
                                                )
                                            )
                                            ( TyVar
                                                ( Id
                                                    { name = "Eventually.#b_2"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Internal 26
                                                    }
                                                )
                                            )
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "Eventually.#b_2"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Internal 26
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                        ]
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Maybe"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Maybe"
                        , moduleName = ModuleName
                            { raw = "Prelude" }
                        , sort = External
                        }
                    )
                , _typeParameters =
                    [ Id
                        { name = "Prelude.#a_18"
                        , moduleName = ModuleName
                            { raw = "Prelude" }
                        , sort = Internal 94
                        }
                    ]
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Nothing"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Prelude.#a_18"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 94
                                }
                            ]
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Maybe"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "Prelude.#a_18"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = Internal 94
                                        }
                                    )
                                )
                            )
                        )
                    ,
                        ( Id
                            { name = "Just"
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Prelude.#a_18"
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , sort = Internal 94
                                }
                            ]
                            ( TyArr
                                ( TyVar
                                    ( Id
                                        { name = "Prelude.#a_18"
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , sort = Internal 94
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Maybe"
                                            , moduleName = ModuleName
                                                { raw = "Prelude" }
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Prelude.#a_18"
                                            , moduleName = ModuleName
                                                { raw = "Prelude" }
                                            , sort = Internal 94
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Char"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Char"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Char#"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim CharT )
                                ( TyCon
                                    ( Id
                                        { name = "Char"
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Bool"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Bool"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "False"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        , Forall []
                            ( TyCon
                                ( Id
                                    { name = "Bool"
                                    , moduleName = ModuleName
                                        { raw = "Builtin" }
                                    , sort = External
                                    }
                                )
                            )
                        )
                    ,
                        ( Id
                            { name = "True"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        , Forall []
                            ( TyCon
                                ( Id
                                    { name = "Bool"
                                    , moduleName = ModuleName
                                        { raw = "Builtin" }
                                    , sort = External
                                    }
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Int32"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Int32"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Int32#"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim Int32T )
                                ( TyCon
                                    ( Id
                                        { name = "Int32"
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 17
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "a"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 41
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "String#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim StringT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Int64"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Int64"
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Int64#"
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim Int64T )
                                ( TyCon
                                    ( Id
                                        { name = "Int64"
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Float#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim FloatT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 18
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "b"
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , sort = Internal 43
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Char#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim CharT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ]
    , _kindCtx = fromList
        [
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 236
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 235
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 216
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 215
                    }
                )
            )
        ,
            ( Id
                { name = "List"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 228
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 227
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 77
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 76
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 57
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 56
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 45
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 44
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 173
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 172
                    }
                )
            )
        ,
            ( Id
                { name = "Int64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 108
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 107
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 71
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 70
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 39
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 38
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 238
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 237
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 206
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 205
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 142
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 141
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 134
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 133
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 79
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 78
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 91
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 90
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 202
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 201
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 161
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 160
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 33
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 32
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 104
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 103
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 136
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 135
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 128
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 127
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 43
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 42
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 169
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 168
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 234
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 233
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 75
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 74
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 171
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 170
                    }
                )
            )
        ,
            ( Id
                { name = "Double#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "Int32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 196
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 195
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 208
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 207
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 204
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 203
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 101
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 100
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 132
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 131
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 114
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 113
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 230
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 229
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 198
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 197
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 242
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 241
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 110
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 109
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 69
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 68
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 37
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 36
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 83
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 82
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 226
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 225
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 130
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 129
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 41
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 40
                    }
                )
            )
        ,
            ( Id
                { name = "Ptr#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 192
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 191
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 256
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 255
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 35
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 34
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 97
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 96
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 65
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 64
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 53
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 52
                    }
                )
            )
        ,
            ( Id
                { name = "EventuallyBuilder"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = External
                }
            , TyArr TYPE ( TyArr TYPE TYPE )
            )
        ,
            ( Id
                { name = "Maybe"
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 194
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 193
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 106
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 105
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 99
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 98
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 67
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 66
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 163
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 162
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 126
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 125
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 200
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 199
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 232
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 231
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 212
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 211
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 159
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 158
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 95
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 94
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 31
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 30
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 61
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 60
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 73
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 72
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 252
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 251
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 138
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 137
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 222
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 221
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 190
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 189
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 157
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 156
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 118
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 117
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 63
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 62
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 218
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 217
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 186
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 185
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 120
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 119
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 248
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 247
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 140
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 139
                    }
                )
            )
        ,
            ( Id
                { name = "String#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 89
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 88
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 153
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 152
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 122
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 121
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 250
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 249
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 47
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 46
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 59
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 58
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 182
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 181
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 93
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 92
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 29
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 28
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 244
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 243
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 180
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 179
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 224
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 223
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 220
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 219
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 188
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 187
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 124
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 123
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 85
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 84
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 149
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 148
                    }
                )
            )
        ,
            ( Id
                { name = "Float#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 116
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 115
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 246
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 245
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 214
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 213
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 254
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 253
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 87
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 86
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 55
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 54
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 151
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 150
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 210
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 209
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 240
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 239
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 176
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 175
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 144
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 143
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 184
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 183
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 81
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 80
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 49
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 48
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 165
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 164
                    }
                )
            )
        ,
            ( Id
                { name = "Char#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 155
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 154
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 112
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 111
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 178
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 177
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 146
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 145
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 51
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 50
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , sort = Internal 167
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 166
                    }
                )
            )
        ]
    , _globalDefs =
        [ FunDef
            ( Meta
                { meta =
                    [ AnyT
                    , [ AnyT ] :-> AnyT
                    ] :-> AnyT
                , id = Id
                    { name = "eventuallyBind_curry"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 288
                    }
                }
            )
            [ Meta
                { meta = AnyT
                , id = Id
                    { name = "done"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 289
                    }
                }
            , Meta
                { meta = [ AnyT ] :-> AnyT
                , id = Id
                    { name = "k"
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , sort = Temporal 290
                    }
                }
            ]
            (
                [ AnyT
                , [ AnyT ] :-> AnyT
                ] :-> AnyT
            )
            ( Match
                ( Cast
                    ( SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    )
                    ( Var
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "done"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 289
                                }
                            }
                        )
                    )
                )
                [ Unpack
                    ( Con
                        ( Data "Eventually.Done" ) [ AnyT ]
                    )
                    [ Meta
                        { meta = AnyT
                        , id = Id
                            { name = "p"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 291
                            }
                        }
                    ]
                    ( Assign
                        ( Meta
                            { meta = AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 292
                                }
                            }
                        )
                        ( Call
                            ( Var
                                ( Meta
                                    { meta = [ AnyT ] :-> AnyT
                                    , id = Id
                                        { name = "k"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 290
                                        }
                                    }
                                )
                            )
                            [ Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "p"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 291
                                        }
                                    }
                                )
                            ]
                        )
                        ( Cast AnyT
                            ( Var
                                ( Meta
                                    { meta = AnyT
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 292
                                        }
                                    }
                                )
                            )
                        )
                    )
                , Unpack
                    ( Con
                        ( Data "Eventually.NotYetDone" )
                        [
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        ]
                    )
                    [ Meta
                        { meta =
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        , id = Id
                            { name = "p"
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , sort = Temporal 293
                            }
                        }
                    ]
                    ( Assign
                        ( Meta
                            { meta =
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , sort = Temporal 303
                                }
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Meta
                                    { meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    , id = Id
                                        { name = "fun"
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , sort = Temporal 294
                                        }
                                    }
                                , typ =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                , _object = Fun
                                    [ Meta
                                        { meta = SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "$_"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 295
                                            }
                                        }
                                    ]
                                    ( Assign
                                        ( Meta
                                            { meta =
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , sort = Temporal 301
                                                }
                                            }
                                        )
                                        ( Assign
                                            ( Meta
                                                { meta = AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 299
                                                    }
                                                }
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta = SumT
                                                        [ Con Tuple [] ]
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 297
                                                        }
                                                    }
                                                )
                                                ( Let
                                                    [ LocalDef
                                                        { _variable = Meta
                                                            { meta = SumT
                                                                [ Con Tuple [] ]
                                                            , id = Id
                                                                { name = "let"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 296
                                                                }
                                                            }
                                                        , typ = SumT
                                                            [ Con Tuple [] ]
                                                        , _object = Pack
                                                            ( SumT
                                                                [ Con Tuple [] ]
                                                            )
                                                            ( Con Tuple [] ) []
                                                        }
                                                    ]
                                                    ( Atom
                                                        ( Var
                                                            ( Meta
                                                                { meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "let"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 296
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 298
                                                            }
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Meta
                                                                { meta =
                                                                    [ SumT
                                                                        [ Con Tuple [] ]
                                                                    ] :-> AnyT
                                                                , id = Id
                                                                    { name = "p"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 293
                                                                    }
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Meta
                                                                { meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 297
                                                                    }
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Meta
                                                                { meta = AnyT
                                                                , id = Id
                                                                    { name = "d"
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , sort = Temporal 298
                                                                    }
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Meta
                                                    { meta =
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , sort = Temporal 300
                                                        }
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Meta
                                                            { meta = [ AnyT ] :->
                                                                (
                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                )
                                                            , id = Id
                                                                { name = "eventuallyBind"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = External
                                                                }
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Meta
                                                            { meta = AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 299
                                                                }
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast
                                                    (
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    )
                                                    ( Var
                                                        ( Meta
                                                            { meta =
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            , id = Id
                                                                { name = "d"
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , sort = Temporal 300
                                                                }
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ( Assign
                                            ( Meta
                                                { meta = AnyT
                                                , id = Id
                                                    { name = "d"
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , sort = Temporal 302
                                                    }
                                                }
                                            )
                                            ( Call
                                                ( Var
                                                    ( Meta
                                                        { meta =
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 301
                                                            }
                                                        }
                                                    )
                                                )
                                                [ Var
                                                    ( Meta
                                                        { meta = [ AnyT ] :-> AnyT
                                                        , id = Id
                                                            { name = "k"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 290
                                                            }
                                                        }
                                                    )
                                                ]
                                            )
                                            ( Cast AnyT
                                                ( Var
                                                    ( Meta
                                                        { meta = AnyT
                                                        , id = Id
                                                            { name = "d"
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , sort = Temporal 302
                                                            }
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Meta
                                        { meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "fun"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 294
                                            }
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Meta
                                { meta = AnyT
                                , id = Id
                                    { name = "d"
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , sort = Temporal 304
                                    }
                                }
                            )
                            ( Call
                                ( Var
                                    ( Meta
                                        { meta =
                                            [
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> AnyT
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "NotYetDone"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = External
                                            }
                                        }
                                    )
                                )
                                [ Var
                                    ( Meta
                                        { meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 303
                                            }
                                        }
                                    )
                                ]
                            )
                            ( Cast AnyT
                                ( Var
                                    ( Meta
                                        { meta = AnyT
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , sort = Temporal 304
                                            }
                                        }
                                    )
                                )
                            )
                        )
                    )
                ]
            )
        ]
    , globalClosures = fromList []
    }