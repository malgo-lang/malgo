Program
    { topVars =
        [
            ( Id
                { name = "eventually"
                , meta = RecordT
                    ( fromList
                        [
                            ( "return"
                            , [ AnyT ] :-> AnyT
                            )
                        ,
                            ( "bind"
                            , [ AnyT ] :->
                                (
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                )
                            )
                        ]
                    )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , RecordT
                ( fromList
                    [
                        ( "return"
                        , [ AnyT ] :-> AnyT
                        )
                    ,
                        ( "bind"
                        , [ AnyT ] :->
                            (
                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                            )
                        )
                    ]
                )
            , Assign
                ( Id
                    { name = "d"
                    , meta = RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 307
                    , sort = Temporal
                    }
                )
                ( Let
                    [ LocalDef
                        { _variable = Id
                            { name = "record"
                            , meta = RecordT
                                ( fromList
                                    [
                                        ( "return"
                                        , [ AnyT ] :-> AnyT
                                        )
                                    ,
                                        ( "bind"
                                        , [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        )
                                    ]
                                )
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 306
                            , sort = Temporal
                            }
                        , typ = RecordT
                            ( fromList
                                [
                                    ( "return"
                                    , [ AnyT ] :-> AnyT
                                    )
                                ,
                                    ( "bind"
                                    , [ AnyT ] :->
                                        (
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        )
                                    )
                                ]
                            )
                        , _object = Record
                            ( fromList
                                [
                                    ( "return"
                                    , Var
                                        ( Id
                                            { name = "Done"
                                            , meta = [ AnyT ] :-> AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                ,
                                    ( "bind"
                                    , Var
                                        ( Id
                                            { name = "eventuallyBind"
                                            , meta = [ AnyT ] :->
                                                (
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                )
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                ]
                            )
                        }
                    ]
                    ( Atom
                        ( Var
                            ( Id
                                { name = "record"
                                , meta = RecordT
                                    ( fromList
                                        [
                                            ( "return"
                                            , [ AnyT ] :-> AnyT
                                            )
                                        ,
                                            ( "bind"
                                            , [ AnyT ] :->
                                                (
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                )
                                            )
                                        ]
                                    )
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 306
                                , sort = Temporal
                                }
                            )
                        )
                    )
                )
                ( Atom
                    ( Var
                        ( Id
                            { name = "d"
                            , meta = RecordT
                                ( fromList
                                    [
                                        ( "return"
                                        , [ AnyT ] :-> AnyT
                                        )
                                    ,
                                        ( "bind"
                                        , [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        )
                                    ]
                                )
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 307
                            , sort = Temporal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "comp"
                , meta = AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , AnyT
            , Assign
                ( Id
                    { name = "d"
                    , meta = AnyT
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 354
                    , sort = Temporal
                    }
                )
                ( Assign
                    ( Id
                        { name = "d"
                        , meta =
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ] :-> AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 325
                        , sort = Temporal
                        }
                    )
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta = [ AnyT ] :->
                                (
                                    [
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    ] :-> AnyT
                                )
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 312
                            , sort = Temporal
                            }
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta = [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 311
                                , sort = Temporal
                                }
                            )
                            ( Call
                                ( Var
                                    ( Id
                                        { name = "bind"
                                        , meta =
                                            [ RecordT
                                                ( fromList
                                                    [
                                                        ( "return"
                                                        , [ AnyT ] :-> AnyT
                                                        )
                                                    ,
                                                        ( "bind"
                                                        , [ AnyT ] :->
                                                            (
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            )
                                                        )
                                                    ]
                                                )
                                            ] :->
                                            ( [ AnyT ] :->
                                                (
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                )
                                            )
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                [ Var
                                    ( Id
                                        { name = "eventually"
                                        , meta = RecordT
                                            ( fromList
                                                [
                                                    ( "return"
                                                    , [ AnyT ] :-> AnyT
                                                    )
                                                ,
                                                    ( "bind"
                                                    , [ AnyT ] :->
                                                        (
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        )
                                                    )
                                                ]
                                            )
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                ]
                            )
                            ( Cast
                                ( [ AnyT ] :->
                                    (
                                        [
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        ] :-> AnyT
                                    )
                                )
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta = [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 311
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta = AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 323
                                , sort = Temporal
                                }
                            )
                            ( Assign
                                ( Id
                                    { name = "d"
                                    , meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 321
                                    , sort = Temporal
                                    }
                                )
                                ( Let
                                    [ LocalDef
                                        { _variable = Id
                                            { name = "fun"
                                            , meta =
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 320
                                            , sort = Temporal
                                            }
                                        , typ =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , _object = Fun
                                            [ Id
                                                { name = "$_"
                                                , meta = SumT
                                                    [ Con Tuple [] ]
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 313
                                                , sort = Temporal
                                                }
                                            ]
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = SumT
                                                        [ Con Tuple [] ]
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 317
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 315
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Assign
                                                        ( Id
                                                            { name = "d"
                                                            , meta = AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 314
                                                            , sort = Temporal
                                                            }
                                                        )
                                                        ( Call
                                                            ( Var
                                                                ( Id
                                                                    { name = "String#"
                                                                    , meta = [ StringT ] :-> AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Builtin" }
                                                                    , uniq = -1
                                                                    , sort = External
                                                                    }
                                                                )
                                                            )
                                                            [ Unboxed
                                                                ( String "1" )
                                                            ]
                                                        )
                                                        ( Cast AnyT
                                                            ( Var
                                                                ( Id
                                                                    { name = "d"
                                                                    , meta = AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 314
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                    ( Assign
                                                        ( Id
                                                            { name = "d"
                                                            , meta = SumT
                                                                [ Con Tuple [] ]
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 316
                                                            , sort = Temporal
                                                            }
                                                        )
                                                        ( Call
                                                            ( Var
                                                                ( Id
                                                                    { name = "printString"
                                                                    , meta = [ AnyT ] :-> SumT
                                                                        [ Con Tuple [] ]
                                                                    , moduleName = ModuleName
                                                                        { raw = "Builtin" }
                                                                    , uniq = -1
                                                                    , sort = External
                                                                    }
                                                                )
                                                            )
                                                            [ Var
                                                                ( Id
                                                                    { name = "d"
                                                                    , meta = AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 315
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                            ]
                                                        )
                                                        ( Cast
                                                            ( SumT
                                                                [ Con Tuple [] ]
                                                            )
                                                            ( Var
                                                                ( Id
                                                                    { name = "d"
                                                                    , meta = SumT
                                                                        [ Con Tuple [] ]
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 316
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "cast"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 318
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 317
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                    ( Assign
                                                        ( Id
                                                            { name = "d"
                                                            , meta = AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 319
                                                            , sort = Temporal
                                                            }
                                                        )
                                                        ( Call
                                                            ( Var
                                                                ( Id
                                                                    { name = "Done"
                                                                    , meta = [ AnyT ] :-> AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = -1
                                                                    , sort = External
                                                                    }
                                                                )
                                                            )
                                                            [ Var
                                                                ( Id
                                                                    { name = "cast"
                                                                    , meta = AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 318
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                            ]
                                                        )
                                                        ( Cast AnyT
                                                            ( Var
                                                                ( Id
                                                                    { name = "d"
                                                                    , meta = AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 319
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        }
                                    ]
                                    ( Atom
                                        ( Var
                                            ( Id
                                                { name = "fun"
                                                , meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 320
                                                , sort = Temporal
                                                }
                                            )
                                        )
                                    )
                                )
                                ( Assign
                                    ( Id
                                        { name = "d"
                                        , meta = AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 322
                                        , sort = Temporal
                                        }
                                    )
                                    ( Call
                                        ( Var
                                            ( Id
                                                { name = "NotYetDone"
                                                , meta =
                                                    [
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> AnyT
                                                    ] :-> AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        [ Var
                                            ( Id
                                                { name = "d"
                                                , meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 321
                                                , sort = Temporal
                                                }
                                            )
                                        ]
                                    )
                                    ( Cast AnyT
                                        ( Var
                                            ( Id
                                                { name = "d"
                                                , meta = AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 322
                                                , sort = Temporal
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                            ( Assign
                                ( Id
                                    { name = "d"
                                    , meta =
                                        [
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 324
                                    , sort = Temporal
                                    }
                                )
                                ( Call
                                    ( Var
                                        ( Id
                                            { name = "d"
                                            , meta = [ AnyT ] :->
                                                (
                                                    [
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> AnyT
                                                    ] :-> AnyT
                                                )
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 312
                                            , sort = Temporal
                                            }
                                        )
                                    )
                                    [ Var
                                        ( Id
                                            { name = "d"
                                            , meta = AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 323
                                            , sort = Temporal
                                            }
                                        )
                                    ]
                                )
                                ( Cast
                                    (
                                        [
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        ] :-> AnyT
                                    )
                                    ( Var
                                        ( Id
                                            { name = "d"
                                            , meta =
                                                [
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                ] :-> AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 324
                                            , sort = Temporal
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    )
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta =
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 352
                            , sort = Temporal
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Id
                                    { name = "fun"
                                    , meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 351
                                    , sort = Temporal
                                    }
                                , typ =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                , _object = Fun
                                    [ Id
                                        { name = "_"
                                        , meta = SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 326
                                        , sort = Temporal
                                        }
                                    ]
                                    ( Assign
                                        ( Id
                                            { name = "d"
                                            , meta =
                                                [
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                ] :-> AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 341
                                            , sort = Temporal
                                            }
                                        )
                                        ( Assign
                                            ( Id
                                                { name = "d"
                                                , meta = [ AnyT ] :->
                                                    (
                                                        [
                                                            [ SumT
                                                                [ Con Tuple [] ]
                                                            ] :-> AnyT
                                                        ] :-> AnyT
                                                    )
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 328
                                                , sort = Temporal
                                                }
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = [ AnyT ] :->
                                                        (
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        )
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 327
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Id
                                                            { name = "bind"
                                                            , meta =
                                                                [ RecordT
                                                                    ( fromList
                                                                        [
                                                                            ( "return"
                                                                            , [ AnyT ] :-> AnyT
                                                                            )
                                                                        ,
                                                                            ( "bind"
                                                                            , [ AnyT ] :->
                                                                                (
                                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                                )
                                                                            )
                                                                        ]
                                                                    )
                                                                ] :->
                                                                ( [ AnyT ] :->
                                                                    (
                                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                    )
                                                                )
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = -1
                                                            , sort = External
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Id
                                                            { name = "eventually"
                                                            , meta = RecordT
                                                                ( fromList
                                                                    [
                                                                        ( "return"
                                                                        , [ AnyT ] :-> AnyT
                                                                        )
                                                                    ,
                                                                        ( "bind"
                                                                        , [ AnyT ] :->
                                                                            (
                                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                            )
                                                                        )
                                                                    ]
                                                                )
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = -1
                                                            , sort = External
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast
                                                    ( [ AnyT ] :->
                                                        (
                                                            [
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            ] :-> AnyT
                                                        )
                                                    )
                                                    ( Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta = [ AnyT ] :->
                                                                (
                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                )
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 327
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 339
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta =
                                                            [ SumT
                                                                [ Con Tuple [] ]
                                                            ] :-> AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 337
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Let
                                                        [ LocalDef
                                                            { _variable = Id
                                                                { name = "fun"
                                                                , meta =
                                                                    [ SumT
                                                                        [ Con Tuple [] ]
                                                                    ] :-> AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 336
                                                                , sort = Temporal
                                                                }
                                                            , typ =
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            , _object = Fun
                                                                [ Id
                                                                    { name = "$_"
                                                                    , meta = SumT
                                                                        [ Con Tuple [] ]
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 329
                                                                    , sort = Temporal
                                                                    }
                                                                ]
                                                                ( Assign
                                                                    ( Id
                                                                        { name = "d"
                                                                        , meta = SumT
                                                                            [ Con Tuple [] ]
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , uniq = 333
                                                                        , sort = Temporal
                                                                        }
                                                                    )
                                                                    ( Assign
                                                                        ( Id
                                                                            { name = "d"
                                                                            , meta = AnyT
                                                                            , moduleName = ModuleName
                                                                                { raw = "Eventually" }
                                                                            , uniq = 331
                                                                            , sort = Temporal
                                                                            }
                                                                        )
                                                                        ( Assign
                                                                            ( Id
                                                                                { name = "d"
                                                                                , meta = AnyT
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , uniq = 330
                                                                                , sort = Temporal
                                                                                }
                                                                            )
                                                                            ( Call
                                                                                ( Var
                                                                                    ( Id
                                                                                        { name = "String#"
                                                                                        , meta = [ StringT ] :-> AnyT
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Builtin" }
                                                                                        , uniq = -1
                                                                                        , sort = External
                                                                                        }
                                                                                    )
                                                                                )
                                                                                [ Unboxed
                                                                                    ( String "2" )
                                                                                ]
                                                                            )
                                                                            ( Cast AnyT
                                                                                ( Var
                                                                                    ( Id
                                                                                        { name = "d"
                                                                                        , meta = AnyT
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Eventually" }
                                                                                        , uniq = 330
                                                                                        , sort = Temporal
                                                                                        }
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                        ( Assign
                                                                            ( Id
                                                                                { name = "d"
                                                                                , meta = SumT
                                                                                    [ Con Tuple [] ]
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , uniq = 332
                                                                                , sort = Temporal
                                                                                }
                                                                            )
                                                                            ( Call
                                                                                ( Var
                                                                                    ( Id
                                                                                        { name = "printString"
                                                                                        , meta = [ AnyT ] :-> SumT
                                                                                            [ Con Tuple [] ]
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Builtin" }
                                                                                        , uniq = -1
                                                                                        , sort = External
                                                                                        }
                                                                                    )
                                                                                )
                                                                                [ Var
                                                                                    ( Id
                                                                                        { name = "d"
                                                                                        , meta = AnyT
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Eventually" }
                                                                                        , uniq = 331
                                                                                        , sort = Temporal
                                                                                        }
                                                                                    )
                                                                                ]
                                                                            )
                                                                            ( Cast
                                                                                ( SumT
                                                                                    [ Con Tuple [] ]
                                                                                )
                                                                                ( Var
                                                                                    ( Id
                                                                                        { name = "d"
                                                                                        , meta = SumT
                                                                                            [ Con Tuple [] ]
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Eventually" }
                                                                                        , uniq = 332
                                                                                        , sort = Temporal
                                                                                        }
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                    ( Assign
                                                                        ( Id
                                                                            { name = "cast"
                                                                            , meta = AnyT
                                                                            , moduleName = ModuleName
                                                                                { raw = "Eventually" }
                                                                            , uniq = 334
                                                                            , sort = Temporal
                                                                            }
                                                                        )
                                                                        ( Cast AnyT
                                                                            ( Var
                                                                                ( Id
                                                                                    { name = "d"
                                                                                    , meta = SumT
                                                                                        [ Con Tuple [] ]
                                                                                    , moduleName = ModuleName
                                                                                        { raw = "Eventually" }
                                                                                    , uniq = 333
                                                                                    , sort = Temporal
                                                                                    }
                                                                                )
                                                                            )
                                                                        )
                                                                        ( Assign
                                                                            ( Id
                                                                                { name = "d"
                                                                                , meta = AnyT
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , uniq = 335
                                                                                , sort = Temporal
                                                                                }
                                                                            )
                                                                            ( Call
                                                                                ( Var
                                                                                    ( Id
                                                                                        { name = "Done"
                                                                                        , meta = [ AnyT ] :-> AnyT
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Eventually" }
                                                                                        , uniq = -1
                                                                                        , sort = External
                                                                                        }
                                                                                    )
                                                                                )
                                                                                [ Var
                                                                                    ( Id
                                                                                        { name = "cast"
                                                                                        , meta = AnyT
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Eventually" }
                                                                                        , uniq = 334
                                                                                        , sort = Temporal
                                                                                        }
                                                                                    )
                                                                                ]
                                                                            )
                                                                            ( Cast AnyT
                                                                                ( Var
                                                                                    ( Id
                                                                                        { name = "d"
                                                                                        , meta = AnyT
                                                                                        , moduleName = ModuleName
                                                                                            { raw = "Eventually" }
                                                                                        , uniq = 335
                                                                                        , sort = Temporal
                                                                                        }
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            }
                                                        ]
                                                        ( Atom
                                                            ( Var
                                                                ( Id
                                                                    { name = "fun"
                                                                    , meta =
                                                                        [ SumT
                                                                            [ Con Tuple [] ]
                                                                        ] :-> AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 336
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                    ( Assign
                                                        ( Id
                                                            { name = "d"
                                                            , meta = AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 338
                                                            , sort = Temporal
                                                            }
                                                        )
                                                        ( Call
                                                            ( Var
                                                                ( Id
                                                                    { name = "NotYetDone"
                                                                    , meta =
                                                                        [
                                                                            [ SumT
                                                                                [ Con Tuple [] ]
                                                                            ] :-> AnyT
                                                                        ] :-> AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = -1
                                                                    , sort = External
                                                                    }
                                                                )
                                                            )
                                                            [ Var
                                                                ( Id
                                                                    { name = "d"
                                                                    , meta =
                                                                        [ SumT
                                                                            [ Con Tuple [] ]
                                                                        ] :-> AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 337
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                            ]
                                                        )
                                                        ( Cast AnyT
                                                            ( Var
                                                                ( Id
                                                                    { name = "d"
                                                                    , meta = AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 338
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta =
                                                            [
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            ] :-> AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 340
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = [ AnyT ] :->
                                                                    (
                                                                        [
                                                                            [ SumT
                                                                                [ Con Tuple [] ]
                                                                            ] :-> AnyT
                                                                        ] :-> AnyT
                                                                    )
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 328
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 339
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast
                                                        (
                                                            [
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            ] :-> AnyT
                                                        )
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta =
                                                                    [
                                                                        [ SumT
                                                                            [ Con Tuple [] ]
                                                                        ] :-> AnyT
                                                                    ] :-> AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 340
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ( Assign
                                            ( Id
                                                { name = "d"
                                                , meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 349
                                                , sort = Temporal
                                                }
                                            )
                                            ( Let
                                                [ LocalDef
                                                    { _variable = Id
                                                        { name = "fun"
                                                        , meta =
                                                            [ SumT
                                                                [ Con Tuple [] ]
                                                            ] :-> AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 348
                                                        , sort = Temporal
                                                        }
                                                    , typ =
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> AnyT
                                                    , _object = Fun
                                                        [ Id
                                                            { name = "_"
                                                            , meta = SumT
                                                                [ Con Tuple [] ]
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 342
                                                            , sort = Temporal
                                                            }
                                                        ]
                                                        ( Assign
                                                            ( Id
                                                                { name = "d"
                                                                , meta = [ AnyT ] :-> AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 344
                                                                , sort = Temporal
                                                                }
                                                            )
                                                            ( Assign
                                                                ( Id
                                                                    { name = "d"
                                                                    , meta = [ AnyT ] :-> AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 343
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                                ( Call
                                                                    ( Var
                                                                        ( Id
                                                                            { name = "return"
                                                                            , meta =
                                                                                [ RecordT
                                                                                    ( fromList
                                                                                        [
                                                                                            ( "return"
                                                                                            , [ AnyT ] :-> AnyT
                                                                                            )
                                                                                        ,
                                                                                            ( "bind"
                                                                                            , [ AnyT ] :->
                                                                                                (
                                                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                                                )
                                                                                            )
                                                                                        ]
                                                                                    )
                                                                                ] :->
                                                                                ( [ AnyT ] :-> AnyT )
                                                                            , moduleName = ModuleName
                                                                                { raw = "Eventually" }
                                                                            , uniq = -1
                                                                            , sort = External
                                                                            }
                                                                        )
                                                                    )
                                                                    [ Var
                                                                        ( Id
                                                                            { name = "eventually"
                                                                            , meta = RecordT
                                                                                ( fromList
                                                                                    [
                                                                                        ( "return"
                                                                                        , [ AnyT ] :-> AnyT
                                                                                        )
                                                                                    ,
                                                                                        ( "bind"
                                                                                        , [ AnyT ] :->
                                                                                            (
                                                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                                            )
                                                                                        )
                                                                                    ]
                                                                                )
                                                                            , moduleName = ModuleName
                                                                                { raw = "Eventually" }
                                                                            , uniq = -1
                                                                            , sort = External
                                                                            }
                                                                        )
                                                                    ]
                                                                )
                                                                ( Cast
                                                                    ( [ AnyT ] :-> AnyT )
                                                                    ( Var
                                                                        ( Id
                                                                            { name = "d"
                                                                            , meta = [ AnyT ] :-> AnyT
                                                                            , moduleName = ModuleName
                                                                                { raw = "Eventually" }
                                                                            , uniq = 343
                                                                            , sort = Temporal
                                                                            }
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                            ( Assign
                                                                ( Id
                                                                    { name = "d"
                                                                    , meta = AnyT
                                                                    , moduleName = ModuleName
                                                                        { raw = "Eventually" }
                                                                    , uniq = 346
                                                                    , sort = Temporal
                                                                    }
                                                                )
                                                                ( Assign
                                                                    ( Id
                                                                        { name = "d"
                                                                        , meta = AnyT
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , uniq = 345
                                                                        , sort = Temporal
                                                                        }
                                                                    )
                                                                    ( Call
                                                                        ( Var
                                                                            ( Id
                                                                                { name = "Int32#"
                                                                                , meta = [ Int32T ] :-> AnyT
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Builtin" }
                                                                                , uniq = -1
                                                                                , sort = External
                                                                                }
                                                                            )
                                                                        )
                                                                        [ Unboxed
                                                                            ( Int32 3 )
                                                                        ]
                                                                    )
                                                                    ( Cast AnyT
                                                                        ( Var
                                                                            ( Id
                                                                                { name = "d"
                                                                                , meta = AnyT
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , uniq = 345
                                                                                , sort = Temporal
                                                                                }
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                                ( Assign
                                                                    ( Id
                                                                        { name = "d"
                                                                        , meta = AnyT
                                                                        , moduleName = ModuleName
                                                                            { raw = "Eventually" }
                                                                        , uniq = 347
                                                                        , sort = Temporal
                                                                        }
                                                                    )
                                                                    ( Call
                                                                        ( Var
                                                                            ( Id
                                                                                { name = "d"
                                                                                , meta = [ AnyT ] :-> AnyT
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , uniq = 344
                                                                                , sort = Temporal
                                                                                }
                                                                            )
                                                                        )
                                                                        [ Var
                                                                            ( Id
                                                                                { name = "d"
                                                                                , meta = AnyT
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , uniq = 346
                                                                                , sort = Temporal
                                                                                }
                                                                            )
                                                                        ]
                                                                    )
                                                                    ( Cast AnyT
                                                                        ( Var
                                                                            ( Id
                                                                                { name = "d"
                                                                                , meta = AnyT
                                                                                , moduleName = ModuleName
                                                                                    { raw = "Eventually" }
                                                                                , uniq = 347
                                                                                , sort = Temporal
                                                                                }
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    }
                                                ]
                                                ( Atom
                                                    ( Var
                                                        ( Id
                                                            { name = "fun"
                                                            , meta =
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 348
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 350
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta =
                                                                [
                                                                    [ SumT
                                                                        [ Con Tuple [] ]
                                                                    ] :-> AnyT
                                                                ] :-> AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 341
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta =
                                                                [ SumT
                                                                    [ Con Tuple [] ]
                                                                ] :-> AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 349
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast AnyT
                                                    ( Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta = AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 350
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Id
                                        { name = "fun"
                                        , meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 351
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta = AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 353
                                , sort = Temporal
                                }
                            )
                            ( Call
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta =
                                            [
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> AnyT
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 325
                                        , sort = Temporal
                                        }
                                    )
                                )
                                [ Var
                                    ( Id
                                        { name = "d"
                                        , meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 352
                                        , sort = Temporal
                                        }
                                    )
                                ]
                            )
                            ( Cast AnyT
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta = AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 353
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                    )
                )
                ( Atom
                    ( Var
                        ( Id
                            { name = "d"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 354
                            , sort = Temporal
                            }
                        )
                    )
                )
            )
        ]
    , topFuns =
        [
            ( Id
                { name = "eventuallyBind_curry"
                , meta =
                    [ AnyT
                    , [ AnyT ] :-> AnyT
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 288
                , sort = Temporal
                }
            ,
                [ Id
                    { name = "done"
                    , meta = AnyT
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 289
                    , sort = Temporal
                    }
                , Id
                    { name = "k"
                    , meta = [ AnyT ] :-> AnyT
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 290
                    , sort = Temporal
                    }
                ]
            ,
                [ AnyT
                , [ AnyT ] :-> AnyT
                ] :-> AnyT
            , Match
                ( Cast
                    ( SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    )
                    ( Var
                        ( Id
                            { name = "done"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 289
                            , sort = Temporal
                            }
                        )
                    )
                )
                [ Unpack
                    ( Con
                        ( Data "Eventually.Done" ) [ AnyT ]
                    )
                    [ Id
                        { name = "p"
                        , meta = AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 291
                        , sort = Temporal
                        }
                    ]
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 292
                            , sort = Temporal
                            }
                        )
                        ( Call
                            ( Var
                                ( Id
                                    { name = "k"
                                    , meta = [ AnyT ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 290
                                    , sort = Temporal
                                    }
                                )
                            )
                            [ Var
                                ( Id
                                    { name = "p"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 291
                                    , sort = Temporal
                                    }
                                )
                            ]
                        )
                        ( Cast AnyT
                            ( Var
                                ( Id
                                    { name = "d"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 292
                                    , sort = Temporal
                                    }
                                )
                            )
                        )
                    )
                , Unpack
                    ( Con
                        ( Data "Eventually.NotYetDone" )
                        [
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        ]
                    )
                    [ Id
                        { name = "p"
                        , meta =
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 293
                        , sort = Temporal
                        }
                    ]
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta =
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 303
                            , sort = Temporal
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Id
                                    { name = "fun"
                                    , meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 294
                                    , sort = Temporal
                                    }
                                , typ =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                , _object = Fun
                                    [ Id
                                        { name = "$_"
                                        , meta = SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 295
                                        , sort = Temporal
                                        }
                                    ]
                                    ( Assign
                                        ( Id
                                            { name = "d"
                                            , meta =
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 301
                                            , sort = Temporal
                                            }
                                        )
                                        ( Assign
                                            ( Id
                                                { name = "d"
                                                , meta = AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 299
                                                , sort = Temporal
                                                }
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = SumT
                                                        [ Con Tuple [] ]
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 297
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Let
                                                    [ LocalDef
                                                        { _variable = Id
                                                            { name = "let"
                                                            , meta = SumT
                                                                [ Con Tuple [] ]
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 296
                                                            , sort = Temporal
                                                            }
                                                        , typ = SumT
                                                            [ Con Tuple [] ]
                                                        , _object = Pack
                                                            ( SumT
                                                                [ Con Tuple [] ]
                                                            )
                                                            ( Con Tuple [] ) []
                                                        }
                                                    ]
                                                    ( Atom
                                                        ( Var
                                                            ( Id
                                                                { name = "let"
                                                                , meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 296
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 298
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Id
                                                                { name = "p"
                                                                , meta =
                                                                    [ SumT
                                                                        [ Con Tuple [] ]
                                                                    ] :-> AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 293
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 297
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 298
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta =
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 300
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Id
                                                            { name = "eventuallyBind"
                                                            , meta = [ AnyT ] :->
                                                                (
                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                )
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = -1
                                                            , sort = External
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta = AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 299
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast
                                                    (
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    )
                                                    ( Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta =
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 300
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ( Assign
                                            ( Id
                                                { name = "d"
                                                , meta = AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 302
                                                , sort = Temporal
                                                }
                                            )
                                            ( Call
                                                ( Var
                                                    ( Id
                                                        { name = "d"
                                                        , meta =
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 301
                                                        , sort = Temporal
                                                        }
                                                    )
                                                )
                                                [ Var
                                                    ( Id
                                                        { name = "k"
                                                        , meta = [ AnyT ] :-> AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 290
                                                        , sort = Temporal
                                                        }
                                                    )
                                                ]
                                            )
                                            ( Cast AnyT
                                                ( Var
                                                    ( Id
                                                        { name = "d"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 302
                                                        , sort = Temporal
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Id
                                        { name = "fun"
                                        , meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 294
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta = AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 304
                                , sort = Temporal
                                }
                            )
                            ( Call
                                ( Var
                                    ( Id
                                        { name = "NotYetDone"
                                        , meta =
                                            [
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> AnyT
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                [ Var
                                    ( Id
                                        { name = "d"
                                        , meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 303
                                        , sort = Temporal
                                        }
                                    )
                                ]
                            )
                            ( Cast AnyT
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta = AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 304
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                    )
                ]
            )
        ,
            ( Id
                { name = "Done"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            ,
                [ Id
                    { name = "p"
                    , meta = AnyT
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 258
                    , sort = Temporal
                    }
                ]
            , [ AnyT ] :-> AnyT
            , Let
                [ LocalDef
                    { _variable = Id
                        { name = "let"
                        , meta = SumT
                            [ Con
                                ( Data "Eventually.Done" ) [ AnyT ]
                            , Con
                                ( Data "Eventually.NotYetDone" )
                                [
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                ]
                            ]
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 259
                        , sort = Temporal
                        }
                    , typ = SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    , _object = Pack
                        ( SumT
                            [ Con
                                ( Data "Eventually.Done" ) [ AnyT ]
                            , Con
                                ( Data "Eventually.NotYetDone" )
                                [
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                ]
                            ]
                        )
                        ( Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        )
                        [ Var
                            ( Id
                                { name = "p"
                                , meta = AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 258
                                , sort = Temporal
                                }
                            )
                        ]
                    }
                ]
                ( Cast AnyT
                    ( Var
                        ( Id
                            { name = "let"
                            , meta = SumT
                                [ Con
                                    ( Data "Eventually.Done" ) [ AnyT ]
                                , Con
                                    ( Data "Eventually.NotYetDone" )
                                    [
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    ]
                                ]
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 259
                            , sort = Temporal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "NotYetDone"
                , meta =
                    [
                        [ SumT
                            [ Con Tuple [] ]
                        ] :-> AnyT
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            ,
                [ Id
                    { name = "p"
                    , meta =
                        [ SumT
                            [ Con Tuple [] ]
                        ] :-> AnyT
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 260
                    , sort = Temporal
                    }
                ]
            ,
                [
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                ] :-> AnyT
            , Let
                [ LocalDef
                    { _variable = Id
                        { name = "let"
                        , meta = SumT
                            [ Con
                                ( Data "Eventually.Done" ) [ AnyT ]
                            , Con
                                ( Data "Eventually.NotYetDone" )
                                [
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                ]
                            ]
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 261
                        , sort = Temporal
                        }
                    , typ = SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    , _object = Pack
                        ( SumT
                            [ Con
                                ( Data "Eventually.Done" ) [ AnyT ]
                            , Con
                                ( Data "Eventually.NotYetDone" )
                                [
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                ]
                            ]
                        )
                        ( Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        )
                        [ Var
                            ( Id
                                { name = "p"
                                , meta =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 260
                                , sort = Temporal
                                }
                            )
                        ]
                    }
                ]
                ( Cast AnyT
                    ( Var
                        ( Id
                            { name = "let"
                            , meta = SumT
                                [ Con
                                    ( Data "Eventually.Done" ) [ AnyT ]
                                , Con
                                    ( Data "Eventually.NotYetDone" )
                                    [
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    ]
                                ]
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 261
                            , sort = Temporal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "step"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            ,
                [ Id
                    { name = "done"
                    , meta = AnyT
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 262
                    , sort = Temporal
                    }
                ]
            , [ AnyT ] :-> AnyT
            , Match
                ( Cast
                    ( SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    )
                    ( Var
                        ( Id
                            { name = "done"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 262
                            , sort = Temporal
                            }
                        )
                    )
                )
                [ Unpack
                    ( Con
                        ( Data "Eventually.Done" ) [ AnyT ]
                    )
                    [ Id
                        { name = "p"
                        , meta = AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 263
                        , sort = Temporal
                        }
                    ]
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 264
                            , sort = Temporal
                            }
                        )
                        ( Call
                            ( Var
                                ( Id
                                    { name = "Done"
                                    , meta = [ AnyT ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            [ Var
                                ( Id
                                    { name = "p"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 263
                                    , sort = Temporal
                                    }
                                )
                            ]
                        )
                        ( Cast AnyT
                            ( Var
                                ( Id
                                    { name = "d"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 264
                                    , sort = Temporal
                                    }
                                )
                            )
                        )
                    )
                , Unpack
                    ( Con
                        ( Data "Eventually.NotYetDone" )
                        [
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        ]
                    )
                    [ Id
                        { name = "p"
                        , meta =
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 265
                        , sort = Temporal
                        }
                    ]
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta = SumT
                                [ Con Tuple [] ]
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 267
                            , sort = Temporal
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Id
                                    { name = "let"
                                    , meta = SumT
                                        [ Con Tuple [] ]
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 266
                                    , sort = Temporal
                                    }
                                , typ = SumT
                                    [ Con Tuple [] ]
                                , _object = Pack
                                    ( SumT
                                        [ Con Tuple [] ]
                                    )
                                    ( Con Tuple [] ) []
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Id
                                        { name = "let"
                                        , meta = SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 266
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta = AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 268
                                , sort = Temporal
                                }
                            )
                            ( Call
                                ( Var
                                    ( Id
                                        { name = "p"
                                        , meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 265
                                        , sort = Temporal
                                        }
                                    )
                                )
                                [ Var
                                    ( Id
                                        { name = "d"
                                        , meta = SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 267
                                        , sort = Temporal
                                        }
                                    )
                                ]
                            )
                            ( Cast AnyT
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta = AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 268
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                    )
                ]
            )
        ,
            ( Id
                { name = "return"
                , meta =
                    [ RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            ,
                [ Id
                    { name = "record"
                    , meta = RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 269
                    , sort = Temporal
                    }
                ]
            ,
                [ RecordT
                    ( fromList
                        [
                            ( "return"
                            , [ AnyT ] :-> AnyT
                            )
                        ,
                            ( "bind"
                            , [ AnyT ] :->
                                (
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                )
                            )
                        ]
                    )
                ] :->
                ( [ AnyT ] :-> AnyT )
            , Match
                ( Atom
                    ( Var
                        ( Id
                            { name = "record"
                            , meta = RecordT
                                ( fromList
                                    [
                                        ( "return"
                                        , [ AnyT ] :-> AnyT
                                        )
                                    ,
                                        ( "bind"
                                        , [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        )
                                    ]
                                )
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 269
                            , sort = Temporal
                            }
                        )
                    )
                )
                [ OpenRecord
                    ( fromList
                        [
                            ( "return"
                            , Id
                                { name = "p"
                                , meta = [ AnyT ] :-> AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 270
                                , sort = Temporal
                                }
                            )
                        ,
                            ( "bind"
                            , Id
                                { name = "p"
                                , meta = [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 271
                                , sort = Temporal
                                }
                            )
                        ]
                    )
                    ( Atom
                        ( Var
                            ( Id
                                { name = "p"
                                , meta = [ AnyT ] :-> AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 270
                                , sort = Temporal
                                }
                            )
                        )
                    )
                ]
            )
        ,
            ( Id
                { name = "eventuallyBind"
                , meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            ,
                [ Id
                    { name = "done"
                    , meta = AnyT
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 272
                    , sort = Temporal
                    }
                ]
            , [ AnyT ] :->
                (
                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                )
            , Let
                [ LocalDef
                    { _variable = Id
                        { name = "let"
                        , meta =
                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 305
                        , sort = Temporal
                        }
                    , typ =
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    , _object = Fun
                        [ Id
                            { name = "k"
                            , meta = [ AnyT ] :-> AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 273
                            , sort = Temporal
                            }
                        ]
                        ( CallDirect
                            ( Id
                                { name = "eventuallyBind_curry"
                                , meta =
                                    [ AnyT
                                    , [ AnyT ] :-> AnyT
                                    ] :-> AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 288
                                , sort = Temporal
                                }
                            )
                            [ Var
                                ( Id
                                    { name = "done"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 272
                                    , sort = Temporal
                                    }
                                )
                            , Var
                                ( Id
                                    { name = "k"
                                    , meta = [ AnyT ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 273
                                    , sort = Temporal
                                    }
                                )
                            ]
                        )
                    }
                ]
                ( Atom
                    ( Var
                        ( Id
                            { name = "let"
                            , meta =
                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 305
                            , sort = Temporal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "bind"
                , meta =
                    [ RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    ] :->
                    ( [ AnyT ] :->
                        (
                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                        )
                    )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            ,
                [ Id
                    { name = "record"
                    , meta = RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 308
                    , sort = Temporal
                    }
                ]
            ,
                [ RecordT
                    ( fromList
                        [
                            ( "return"
                            , [ AnyT ] :-> AnyT
                            )
                        ,
                            ( "bind"
                            , [ AnyT ] :->
                                (
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                )
                            )
                        ]
                    )
                ] :->
                ( [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                )
            , Match
                ( Atom
                    ( Var
                        ( Id
                            { name = "record"
                            , meta = RecordT
                                ( fromList
                                    [
                                        ( "return"
                                        , [ AnyT ] :-> AnyT
                                        )
                                    ,
                                        ( "bind"
                                        , [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        )
                                    ]
                                )
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 308
                            , sort = Temporal
                            }
                        )
                    )
                )
                [ OpenRecord
                    ( fromList
                        [
                            ( "return"
                            , Id
                                { name = "p"
                                , meta = [ AnyT ] :-> AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 309
                                , sort = Temporal
                                }
                            )
                        ,
                            ( "bind"
                            , Id
                                { name = "p"
                                , meta = [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 310
                                , sort = Temporal
                                }
                            )
                        ]
                    )
                    ( Atom
                        ( Var
                            ( Id
                                { name = "p"
                                , meta = [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 310
                                , sort = Temporal
                                }
                            )
                        )
                    )
                ]
            )
        ,
            ( Id
                { name = "main"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            ,
                [ Id
                    { name = "$_"
                    , meta = SumT
                        [ Con Tuple [] ]
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 355
                    , sort = Temporal
                    }
                ]
            ,
                [ SumT
                    [ Con Tuple [] ]
                ] :-> SumT
                [ Con Tuple [] ]
            , Assign
                ( Id
                    { name = "d"
                    , meta = AnyT
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 359
                    , sort = Temporal
                    }
                )
                ( Assign
                    ( Id
                        { name = "d"
                        , meta =
                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 357
                        , sort = Temporal
                        }
                    )
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta =
                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 356
                            , sort = Temporal
                            }
                        )
                        ( Call
                            ( Var
                                ( Id
                                    { name = "|>"
                                    , meta = [ AnyT ] :->
                                        (
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        )
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            [ Var
                                ( Id
                                    { name = "comp"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            ]
                        )
                        ( Cast
                            (
                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                            )
                            ( Var
                                ( Id
                                    { name = "d"
                                    , meta =
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 356
                                    , sort = Temporal
                                    }
                                )
                            )
                        )
                    )
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 358
                            , sort = Temporal
                            }
                        )
                        ( Call
                            ( Var
                                ( Id
                                    { name = "d"
                                    , meta =
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 357
                                    , sort = Temporal
                                    }
                                )
                            )
                            [ Var
                                ( Id
                                    { name = "step"
                                    , meta = [ AnyT ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            ]
                        )
                        ( Cast AnyT
                            ( Var
                                ( Id
                                    { name = "d"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 358
                                    , sort = Temporal
                                    }
                                )
                            )
                        )
                    )
                )
                ( Assign
                    ( Id
                        { name = "d"
                        , meta =
                            [ [ AnyT ] :-> SumT
                                [ Con Tuple [] ]
                            ] :-> SumT
                            [ Con Tuple [] ]
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 373
                        , sort = Temporal
                        }
                    )
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 371
                            , sort = Temporal
                            }
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta =
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 369
                                , sort = Temporal
                                }
                            )
                            ( Assign
                                ( Id
                                    { name = "d"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 367
                                    , sort = Temporal
                                    }
                                )
                                ( Assign
                                    ( Id
                                        { name = "d"
                                        , meta =
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 365
                                        , sort = Temporal
                                        }
                                    )
                                    ( Assign
                                        ( Id
                                            { name = "d"
                                            , meta = AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 363
                                            , sort = Temporal
                                            }
                                        )
                                        ( Assign
                                            ( Id
                                                { name = "d"
                                                , meta =
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 361
                                                , sort = Temporal
                                                }
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta =
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 360
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Id
                                                            { name = "|>"
                                                            , meta = [ AnyT ] :->
                                                                (
                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                )
                                                            , moduleName = ModuleName
                                                                { raw = "Prelude" }
                                                            , uniq = -1
                                                            , sort = External
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Id
                                                            { name = "comp"
                                                            , meta = AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = -1
                                                            , sort = External
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast
                                                    (
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    )
                                                    ( Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta =
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 360
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 362
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta =
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 361
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Id
                                                            { name = "step"
                                                            , meta = [ AnyT ] :-> AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = -1
                                                            , sort = External
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast AnyT
                                                    ( Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta = AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 362
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ( Assign
                                            ( Id
                                                { name = "d"
                                                , meta =
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 364
                                                , sort = Temporal
                                                }
                                            )
                                            ( Call
                                                ( Var
                                                    ( Id
                                                        { name = "|>"
                                                        , meta = [ AnyT ] :->
                                                            (
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            )
                                                        , moduleName = ModuleName
                                                            { raw = "Prelude" }
                                                        , uniq = -1
                                                        , sort = External
                                                        }
                                                    )
                                                )
                                                [ Var
                                                    ( Id
                                                        { name = "d"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 363
                                                        , sort = Temporal
                                                        }
                                                    )
                                                ]
                                            )
                                            ( Cast
                                                (
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                )
                                                ( Var
                                                    ( Id
                                                        { name = "d"
                                                        , meta =
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 364
                                                        , sort = Temporal
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                    ( Assign
                                        ( Id
                                            { name = "d"
                                            , meta = AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 366
                                            , sort = Temporal
                                            }
                                        )
                                        ( Call
                                            ( Var
                                                ( Id
                                                    { name = "d"
                                                    , meta =
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 365
                                                    , sort = Temporal
                                                    }
                                                )
                                            )
                                            [ Var
                                                ( Id
                                                    { name = "step"
                                                    , meta = [ AnyT ] :-> AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = -1
                                                    , sort = External
                                                    }
                                                )
                                            ]
                                        )
                                        ( Cast AnyT
                                            ( Var
                                                ( Id
                                                    { name = "d"
                                                    , meta = AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 366
                                                    , sort = Temporal
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                                ( Assign
                                    ( Id
                                        { name = "d"
                                        , meta =
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 368
                                        , sort = Temporal
                                        }
                                    )
                                    ( Call
                                        ( Var
                                            ( Id
                                                { name = "|>"
                                                , meta = [ AnyT ] :->
                                                    (
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    )
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        [ Var
                                            ( Id
                                                { name = "d"
                                                , meta = AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 367
                                                , sort = Temporal
                                                }
                                            )
                                        ]
                                    )
                                    ( Cast
                                        (
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        )
                                        ( Var
                                            ( Id
                                                { name = "d"
                                                , meta =
                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 368
                                                , sort = Temporal
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                            ( Assign
                                ( Id
                                    { name = "d"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 370
                                    , sort = Temporal
                                    }
                                )
                                ( Call
                                    ( Var
                                        ( Id
                                            { name = "d"
                                            , meta =
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 369
                                            , sort = Temporal
                                            }
                                        )
                                    )
                                    [ Var
                                        ( Id
                                            { name = "step"
                                            , meta = [ AnyT ] :-> AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    ]
                                )
                                ( Cast AnyT
                                    ( Var
                                        ( Id
                                            { name = "d"
                                            , meta = AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 370
                                            , sort = Temporal
                                            }
                                        )
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta =
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 372
                                , sort = Temporal
                                }
                            )
                            ( Call
                                ( Var
                                    ( Id
                                        { name = "|>"
                                        , meta = [ AnyT ] :->
                                            (
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            )
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                [ Var
                                    ( Id
                                        { name = "d"
                                        , meta = AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 371
                                        , sort = Temporal
                                        }
                                    )
                                ]
                            )
                            ( Cast
                                (
                                    [ [ AnyT ] :-> SumT
                                        [ Con Tuple [] ]
                                    ] :-> SumT
                                    [ Con Tuple [] ]
                                )
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta =
                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 372
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                    )
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta = [ AnyT ] :-> SumT
                                [ Con Tuple [] ]
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 384
                            , sort = Temporal
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Id
                                    { name = "fun"
                                    , meta = [ AnyT ] :-> SumT
                                        [ Con Tuple [] ]
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 383
                                    , sort = Temporal
                                    }
                                , typ = [ AnyT ] :-> SumT
                                    [ Con Tuple [] ]
                                , _object = Fun
                                    [ Id
                                        { name = "done"
                                        , meta = AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 374
                                        , sort = Temporal
                                        }
                                    ]
                                    ( Match
                                        ( Cast
                                            ( SumT
                                                [ Con
                                                    ( Data "Eventually.Done" ) [ AnyT ]
                                                , Con
                                                    ( Data "Eventually.NotYetDone" )
                                                    [
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> AnyT
                                                    ]
                                                ]
                                            )
                                            ( Var
                                                ( Id
                                                    { name = "done"
                                                    , meta = AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 374
                                                    , sort = Temporal
                                                    }
                                                )
                                            )
                                        )
                                        [ Unpack
                                            ( Con
                                                ( Data "Eventually.Done" ) [ AnyT ]
                                            )
                                            [ Id
                                                { name = "p"
                                                , meta = AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 375
                                                , sort = Temporal
                                                }
                                            ]
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 377
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 376
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Id
                                                                { name = "toStringInt32"
                                                                , meta = [ AnyT ] :-> AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Builtin" }
                                                                , uniq = -1
                                                                , sort = External
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Id
                                                                { name = "p"
                                                                , meta = AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 375
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 376
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta = SumT
                                                            [ Con Tuple [] ]
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 378
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Id
                                                                { name = "printString"
                                                                , meta = [ AnyT ] :-> SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Builtin" }
                                                                , uniq = -1
                                                                , sort = External
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 377
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast
                                                        ( SumT
                                                            [ Con Tuple [] ]
                                                        )
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 378
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        , Unpack
                                            ( Con
                                                ( Data "Eventually.NotYetDone" )
                                                [
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                ]
                                            )
                                            [ Id
                                                { name = "p"
                                                , meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 379
                                                , sort = Temporal
                                                }
                                            ]
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 381
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 380
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Id
                                                                { name = "String#"
                                                                , meta = [ StringT ] :-> AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Builtin" }
                                                                , uniq = -1
                                                                , sort = External
                                                                }
                                                            )
                                                        )
                                                        [ Unboxed
                                                            ( String "not yet" )
                                                        ]
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 380
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta = SumT
                                                            [ Con Tuple [] ]
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 382
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Id
                                                                { name = "printString"
                                                                , meta = [ AnyT ] :-> SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Builtin" }
                                                                , uniq = -1
                                                                , sort = External
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 381
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast
                                                        ( SumT
                                                            [ Con Tuple [] ]
                                                        )
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 382
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        ]
                                    )
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Id
                                        { name = "fun"
                                        , meta = [ AnyT ] :-> SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 383
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta = SumT
                                    [ Con Tuple [] ]
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 385
                                , sort = Temporal
                                }
                            )
                            ( Call
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta =
                                            [ [ AnyT ] :-> SumT
                                                [ Con Tuple [] ]
                                            ] :-> SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 373
                                        , sort = Temporal
                                        }
                                    )
                                )
                                [ Var
                                    ( Id
                                        { name = "d"
                                        , meta = [ AnyT ] :-> SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 384
                                        , sort = Temporal
                                        }
                                    )
                                ]
                            )
                            ( Cast
                                ( SumT
                                    [ Con Tuple [] ]
                                )
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta = SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 385
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                    )
                )
            )
        ]
    , extFuns = []
    }
DsState
    { _nameEnv = fromList
        [
            ( Id
                { name = "headString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "headString"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mulInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mulInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leChar#"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtChar"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ge_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ge_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "appendString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "appendString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringFloat"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ordChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ordChar"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ge_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ge_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "subInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "subInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "tail"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "tail"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "head"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "head"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_double_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_double_to_string"
                , meta = [ DoubleT ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "identity"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "identity"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_gt_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_gt_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geChar"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "sqrt"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "sqrt"
                , meta = [ DoubleT ] :-> DoubleT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringDouble"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "NotYetDone"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "NotYetDone"
                , meta =
                    [
                        [ SumT
                            [ Con Tuple [] ]
                        ] :-> AnyT
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neChar#"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ne_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ne_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_string_cons"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_string_cons"
                , meta = [ CharT ] :->
                    ( [ StringT ] :-> StringT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "atString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "atString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "x"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 15
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 310
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "printChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "printChar"
                , meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "panic"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "panic"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_add_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_add_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "k"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 8
                , sort = Internal
                }
            , Id
                { name = "k"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 273
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "consString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "consString#"
                , meta = [ CharT ] :->
                    ( [ StringT ] :-> StringT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_gt_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_gt_char"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_string_at"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_string_at"
                , meta = [ Int64T ] :->
                    ( [ StringT ] :-> CharT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "divDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "divDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "newline"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "newline"
                , meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_get_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_get_char"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> CharT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringChar#"
                , meta = [ CharT ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ge_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ge_string"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 22
                , sort = Internal
                }
            , Id
                { name = "_"
                , meta = SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 342
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "k"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 10
                , sort = Internal
                }
            , Id
                { name = "k"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 273
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "<|"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "<|"
                , meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isLower#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isLower#"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_lt_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_lt_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eventually"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eventually"
                , meta = RecordT
                    ( fromList
                        [
                            ( "return"
                            , [ AnyT ] :-> AnyT
                            )
                        ,
                            ( "bind"
                            , [ AnyT ] :->
                                (
                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                )
                            )
                        ]
                    )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_div_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_div_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "printString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "printString#"
                , meta = [ StringT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqChar"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mulInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mulInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_flush"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_flush"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 24
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 379
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "neDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_is_upper"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_is_upper"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isDigit"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isDigit"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isLower"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isLower"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "return"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "return"
                , meta =
                    [ RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_le_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_le_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "getChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "getChar"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "x"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 20
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 270
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "addDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "addDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_is_digit"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_is_digit"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "subInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "subInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_gt_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_gt_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "addInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "addInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "printChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "printChar#"
                , meta = [ CharT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_lt_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_lt_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "atString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "atString#"
                , meta = [ Int64T ] :->
                    ( [ StringT ] :-> CharT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "putStrLn"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "putStrLn"
                , meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "subFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "subFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "Nil"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Nil"
                , meta = [] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ge_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ge_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_gt_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_gt_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "String#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "String#"
                , meta = [ StringT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ne_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ne_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "comp"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "comp"
                , meta = AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_gt_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_gt_string"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "string#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "string#"
                , meta = [ StringT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "getContents"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "getContents"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqString#"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltChar#"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_eq_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_eq_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ordChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ordChar#"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "addInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "addInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_newline"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_newline"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leString#"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 19
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 271
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "lengthString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "lengthString#"
                , meta = [ StringT ] :-> Int64T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "value"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 11
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta = AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 263
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "addDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "addDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltString#"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_sub_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_sub_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_lt_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_lt_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leChar"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ne_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ne_string"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "int64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "int64#"
                , meta = [ Int64T ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "Int64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Int64#"
                , meta = [ Int64T ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "addInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "addInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "divInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "divInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mulFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mulFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "punctuate"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "punctuate"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mulInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mulInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringInt64#"
                , meta = [ Int64T ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltChar"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_le_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_le_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "subDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "subDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "sqrtf"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "sqrtf"
                , meta = [ FloatT ] :-> FloatT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "int32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "int32#"
                , meta = [ Int32T ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "$_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 102
                , sort = Internal
                }
            , Id
                { name = "$_"
                , meta = SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 277
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "toStringDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringDouble#"
                , meta = [ DoubleT ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "bind"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "bind"
                , meta =
                    [ RecordT
                        ( fromList
                            [
                                ( "return"
                                , [ AnyT ] :-> AnyT
                                )
                            ,
                                ( "bind"
                                , [ AnyT ] :->
                                    (
                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                    )
                                )
                            ]
                        )
                    ] :->
                    ( [ AnyT ] :->
                        (
                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                        )
                    )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "addFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "addFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "printInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "printInt32"
                , meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "sqrtFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "sqrtFloat"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_eq_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_eq_char"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 21
                , sort = Internal
                }
            , Id
                { name = "_"
                , meta = SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 326
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "Int32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Int32#"
                , meta = [ Int32T ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "double#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "double#"
                , meta = [ DoubleT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringInt32#"
                , meta = [ Int32T ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "Double#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Double#"
                , meta = [ DoubleT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "subFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "subFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mulDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mulDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "work"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 9
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 276
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "|>"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "|>"
                , meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringChar"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geChar#"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isTrue#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isTrue#"
                , meta = [ Int32T ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "not"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "not"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "$_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 147
                , sort = Internal
                }
            , Id
                { name = "$_"
                , meta = SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 313
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "Nothing"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Nothing"
                , meta = [] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "Cons"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Cons"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "divInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "divInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "appendString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "appendString#"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> StringT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ge_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ge_char"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "divInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "divInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isWhiteSpace"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isWhiteSpace"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "tailString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "tailString"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "addInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "addInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_float_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_float_to_string"
                , meta = [ FloatT ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqChar#"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_sub_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_sub_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "foldl"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "foldl"
                , meta =
                    [ [ AnyT ] :->
                        ( [ AnyT ] :-> AnyT )
                    ] :->
                    ( [ AnyT ] :->
                        ( [ AnyT ] :-> AnyT )
                    )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "snd"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "snd"
                , meta =
                    [ SumT
                        [ Con Tuple
                            [ AnyT
                            , AnyT
                            ]
                        ]
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isDigit#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isDigit#"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mulDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mulDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_lt_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_lt_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "$_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 257
                , sort = Internal
                }
            , Id
                { name = "$_"
                , meta = SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 355
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "eqInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mapList"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mapList"
                , meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_add_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_add_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "subDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "subDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ne_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ne_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_div_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_div_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "divInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "divInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_string_length"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_string_length"
                , meta = [ StringT ] :-> Int64T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_eq_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_eq_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "subInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "subInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "fst"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "fst"
                , meta =
                    [ SumT
                        [ Con Tuple
                            [ AnyT
                            , AnyT
                            ]
                        ]
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_div_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_div_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_eq_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_eq_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "sqrtDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "sqrtDouble"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "sqrtDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "sqrtDouble#"
                , meta = [ DoubleT ] :-> DoubleT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ne_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ne_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isUpper#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isUpper#"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_char_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_char_to_string"
                , meta = [ CharT ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mulInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mulInt64"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "divDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "divDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_is_lower"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_is_lower"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_mul_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_mul_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "main"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "main"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtChar#"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_print_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_print_char"
                , meta = [ CharT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "dropWhileString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "dropWhileString"
                , meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isAlphanum"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isAlphanum"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "step"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "step"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_lt_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_lt_string"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "exitFailure"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "exitFailure"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "addFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "addFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "divFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "divFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "undefined"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "undefined"
                , meta = AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "sqrtFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "sqrtFloat#"
                , meta = [ FloatT ] :-> FloatT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "$_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 174
                , sort = Internal
                }
            , Id
                { name = "$_"
                , meta = SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 329
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "geFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_eq_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_eq_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "printString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "printString"
                , meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "divFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "divFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringInt32"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "unless"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "unless"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :->
                        (
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ] :-> AnyT
                        )
                    )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_add_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_add_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringInt64"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isAlphanum#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isAlphanum#"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "cond"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "cond"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_add_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_add_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "substring"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "substring"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :->
                        ( [ AnyT ] :-> AnyT )
                    )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_eq_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_eq_string"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_le_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_le_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "."
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "."
                , meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :->
                        ( [ AnyT ] :-> AnyT )
                    )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "isUpper"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "isUpper"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "toStringFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "toStringFloat#"
                , meta = [ FloatT ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_panic"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_panic"
                , meta = [ StringT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "float#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "float#"
                , meta = [ FloatT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "value"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 7
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta = AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 274
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "if"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "if"
                , meta = [ AnyT ] :->
                    (
                        [
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        ] :->
                        (
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ] :-> AnyT
                        )
                    )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "concatString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "concatString"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_substring"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_substring"
                , meta = [ StringT ] :->
                    ( [ Int64T ] :->
                        ( [ Int64T ] :-> StringT )
                    )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "Float#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Float#"
                , meta = [ FloatT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_mul_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_mul_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "flush"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "flush"
                , meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "lengthString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "lengthString"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_sub_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_sub_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> FloatT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_print_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_print_string"
                , meta = [ StringT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "Char#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Char#"
                , meta = [ CharT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neDouble#"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neString#"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "leString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "leString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ge_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ge_float"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_exit_failure"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_exit_failure"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "char#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "char#"
                , meta = [ CharT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neChar"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_char_ord"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_char_ord"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_le_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_le_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_mul_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_mul_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_le_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_le_string"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_div_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_div_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_unsafe_cast"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_unsafe_cast"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtString#"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_get_contents"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_get_contents"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "printInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "printInt64"
                , meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "Done"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Done"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_string_append"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_string_append"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> StringT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "mulFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "mulFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "const"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "const"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "x"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 23
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta = AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 375
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "eventuallyBind"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eventuallyBind"
                , meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "False"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "False"
                , meta = [] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_gt_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_gt_int64_t"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqFloat"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "subInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "subInt64#"
                , meta = [ Int64T ] :->
                    ( [ Int64T ] :-> Int64T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_int32_t_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_int32_t_to_string"
                , meta = [ Int32T ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_is_alphanum"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_is_alphanum"
                , meta = [ CharT ] :-> Int32T
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "geString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geString#"
                , meta = [ StringT ] :->
                    ( [ StringT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_lt_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_lt_char"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "consString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "consString"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "Just"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "Just"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "putStr"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "putStr"
                , meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ]
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_int64_t_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_int64_t_to_string"
                , meta = [ Int64T ] :-> StringT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_ne_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_ne_char"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_mul_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_mul_int32_t"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "substring#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "substring#"
                , meta = [ StringT ] :->
                    ( [ Int64T ] :->
                        ( [ Int64T ] :-> StringT )
                    )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "work"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 12
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 265
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "geFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "geFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "malgo_sub_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_sub_double"
                , meta = [ DoubleT ] :->
                    ( [ DoubleT ] :-> DoubleT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "eqDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "eqDouble"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "ltFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "ltFloat#"
                , meta = [ FloatT ] :->
                    ( [ FloatT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "takeWhileString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "takeWhileString"
                , meta =
                    [ [ AnyT ] :-> AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "neInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "neInt32#"
                , meta = [ Int32T ] :->
                    ( [ Int32T ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 16
                , sort = Internal
                }
            , Id
                { name = "p"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 309
                , sort = Temporal
                }
            )
        ,
            ( Id
                { name = "malgo_le_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "malgo_le_char"
                , meta = [ CharT ] :->
                    ( [ CharT ] :-> Int32T )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "gtInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "gtInt32"
                , meta = [ AnyT ] :->
                    ( [ AnyT ] :-> AnyT )
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "case"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "case"
                , meta = [ AnyT ] :->
                    (
                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                    )
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "True"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "True"
                , meta = [] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            )
        ,
            ( Id
                { name = "listToString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Id
                { name = "listToString"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            )
        ]
    , _signatureMap = fromList
        [
            ( Id
                { name = "headString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Maybe"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "leChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "gtChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "appendString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "toStringFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ordChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "subInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "tail"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 117
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 117
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 117
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "head"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 115
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 115
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 115
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_double_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "identity"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 97
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 97
                            , sort = Internal
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 97
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "geChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "sqrt"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
            )
        ,
            ( Id
                { name = "toStringDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "NotYetDone"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Eventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 27
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyTuple 0 )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "Eventually.#a_0"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 27
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 27
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "eqInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_string_cons"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim StringT ) )
                )
            )
        ,
            ( Id
                { name = "atString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "x"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 15
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 126
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 126
                                    , sort = Internal
                                    }
                                )
                            )
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Eventually"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 124
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 124
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "printChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "panic"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 285
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 285
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_add_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "k"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 8
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Eventually.#a_0"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 83
                            , sort = Internal
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 95
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "consString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim StringT ) )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "leDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_string_at"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim StringT ) ( TyPrim CharT ) )
                )
            )
        ,
            ( Id
                { name = "divDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "newline"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "t"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 561
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "t"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 561
                            , sort = Internal
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "neInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_get_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 ) ( TyPrim CharT )
                )
            )
        ,
            ( Id
                { name = "toStringChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "neFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 22
                , sort = Internal
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "k"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 10
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Eventually.#a_0"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 83
                            , sort = Internal
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 95
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "<|"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 141
                    , sort = Internal
                    }
                , Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 139
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 139
                                , sort = Internal
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 141
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 139
                                , sort = Internal
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 141
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isLower#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "malgo_lt_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "eventually"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 29
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 31
                    , sort = Internal
                    }
                ]
                ( TyRecord
                    ( fromList
                        [
                            ( "return"
                            , TyArr
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 29
                                        , sort = Internal
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "a"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 29
                                            , sort = Internal
                                            }
                                        )
                                    )
                                )
                            )
                        ,
                            ( "bind"
                            , TyArr
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "a"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 29
                                            , sort = Internal
                                            }
                                        )
                                    )
                                )
                                ( TyArr
                                    ( TyArr
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 29
                                                , sort = Internal
                                                }
                                            )
                                        )
                                        ( TyApp
                                            ( TyCon
                                                ( Id
                                                    { name = "Eventually"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = -1
                                                    , sort = External
                                                    }
                                                )
                                            )
                                            ( TyVar
                                                ( Id
                                                    { name = "b"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 31
                                                    , sort = Internal
                                                    }
                                                )
                                            )
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "b"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 31
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                        ]
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_div_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "printString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "eqChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_flush"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 24
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_is_upper"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "isDigit"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isLower"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "return"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 43
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 41
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyRecord
                        ( fromList
                            [
                                ( "return"
                                , TyArr
                                    ( TyVar
                                        ( Id
                                            { name = "a"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 43
                                            , sort = Internal
                                            }
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 43
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                )
                            ,
                                ( "bind"
                                , TyArr
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 43
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                    ( TyArr
                                        ( TyArr
                                            ( TyVar
                                                ( Id
                                                    { name = "a"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 43
                                                    , sort = Internal
                                                    }
                                                )
                                            )
                                            ( TyApp
                                                ( TyCon
                                                    ( Id
                                                        { name = "Eventually"
                                                        , meta = ()
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = -1
                                                        , sort = External
                                                        }
                                                    )
                                                )
                                                ( TyVar
                                                    ( Id
                                                        { name = "b"
                                                        , meta = ()
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 41
                                                        , sort = Internal
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                        ( TyApp
                                            ( TyCon
                                                ( Id
                                                    { name = "Eventually"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = -1
                                                    , sort = External
                                                    }
                                                )
                                            )
                                            ( TyVar
                                                ( Id
                                                    { name = "b"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 41
                                                    , sort = Internal
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            ]
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 43
                                , sort = Internal
                                }
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 43
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_le_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "getChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "t"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 1257
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "t"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 1257
                            , sort = Internal
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "x"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 20
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 69
                            , sort = Internal
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 69
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "malgo_is_digit"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "subInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "addInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "printChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "ltInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "atString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim StringT ) ( TyPrim CharT ) )
                )
            )
        ,
            ( Id
                { name = "putStrLn"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "subFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "Nil"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Prelude.#a_19"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 95
                    , sort = Internal
                    }
                ]
                ( TyApp
                    ( TyCon
                        ( Id
                            { name = "List"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "Prelude.#a_19"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 95
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "String#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "comp"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyApp
                    ( TyCon
                        ( Id
                            { name = "Eventually"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "leInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "string#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "getContents"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "t"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 1251
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "t"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 1251
                            , sort = Internal
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eqString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "ltChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "neFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "ordChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "addInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_newline"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "leString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "leInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 19
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 69
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 69
                                    , sort = Internal
                                    }
                                )
                            )
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Eventually"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 71
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 71
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "lengthString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT ) ( TyPrim Int64T ) )
            )
        ,
            ( Id
                { name = "eqFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "value"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 11
                , sort = Internal
                }
            , Forall []
                ( TyVar
                    ( Id
                        { name = "Eventually.#a_0"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 57
                        , sort = Internal
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "addDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_sub_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "leChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "leInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "gtInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "int64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Int64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "divInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "punctuate"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 127
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 127
                            , sort = Internal
                            }
                        )
                    )
                    ( TyArr
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 127
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 127
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "ltChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "leFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_le_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "subDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "sqrtf"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
            )
        ,
            ( Id
                { name = "int32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "$_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 102
                , sort = Internal
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "toStringDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "bind"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 39
                    , sort = Internal
                    }
                , Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 37
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyRecord
                        ( fromList
                            [
                                ( "return"
                                , TyArr
                                    ( TyVar
                                        ( Id
                                            { name = "a"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 37
                                            , sort = Internal
                                            }
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 37
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                )
                            ,
                                ( "bind"
                                , TyArr
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "a"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 37
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                    ( TyArr
                                        ( TyArr
                                            ( TyVar
                                                ( Id
                                                    { name = "a"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 37
                                                    , sort = Internal
                                                    }
                                                )
                                            )
                                            ( TyApp
                                                ( TyCon
                                                    ( Id
                                                        { name = "Eventually"
                                                        , meta = ()
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = -1
                                                        , sort = External
                                                        }
                                                    )
                                                )
                                                ( TyVar
                                                    ( Id
                                                        { name = "b"
                                                        , meta = ()
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 39
                                                        , sort = Internal
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                        ( TyApp
                                            ( TyCon
                                                ( Id
                                                    { name = "Eventually"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = -1
                                                    , sort = External
                                                    }
                                                )
                                            )
                                            ( TyVar
                                                ( Id
                                                    { name = "b"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 39
                                                    , sort = Internal
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            ]
                        )
                    )
                    ( TyArr
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 37
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyArr
                            ( TyArr
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 37
                                        , sort = Internal
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "b"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 39
                                            , sort = Internal
                                            }
                                        )
                                    )
                                )
                            )
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Eventually"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 39
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "leInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "printInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "sqrtFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "eqString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "eqDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 21
                , sort = Internal
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "Int32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "double#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "Double#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "subFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mulDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "work"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 9
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 83
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "|>"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 135
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 137
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 135
                            , sort = Internal
                            }
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 135
                                    , sort = Internal
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 137
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 137
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "isTrue#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "not"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "$_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 147
                , sort = Internal
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "Nothing"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Prelude.#a_18"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 94
                    , sort = Internal
                    }
                ]
                ( TyApp
                    ( TyCon
                        ( Id
                            { name = "Maybe"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "Prelude.#a_18"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 94
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Cons"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Prelude.#a_19"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 95
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Prelude.#a_19"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 95
                            , sort = Internal
                            }
                        )
                    )
                    ( TyArr
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "Prelude.#a_19"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 95
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "Prelude.#a_19"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 95
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "divInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "appendString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim StringT ) )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "divInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "isWhiteSpace"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "tailString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_float_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "eqChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_sub_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "foldl"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 121
                    , sort = Internal
                    }
                , Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 119
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 119
                                , sort = Internal
                                }
                            )
                        )
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 121
                                    , sort = Internal
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 119
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 119
                                , sort = Internal
                                }
                            )
                        )
                        ( TyArr
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "List"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = 121
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 119
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "snd"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 113
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 111
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyApp
                            ( TyTuple 2 )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 113
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 111
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "b"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 111
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isDigit#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "mulDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "eqInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "gtFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "$_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 257
                , sort = Internal
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "eqInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "mapList"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 123
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 125
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 123
                                , sort = Internal
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 125
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 123
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "List"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 125
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_add_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "subDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ne_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_div_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "divInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "eqInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_string_length"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT ) ( TyPrim Int64T ) )
            )
        ,
            ( Id
                { name = "malgo_eq_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "subInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "fst"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 109
                    , sort = Internal
                    }
                , Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 107
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyApp
                            ( TyTuple 2 )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 107
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 109
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 107
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_div_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "gtDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "sqrtDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "sqrtDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
            )
        ,
            ( Id
                { name = "malgo_ne_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "isUpper#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "geString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_char_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "mulInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "divDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_is_lower"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "malgo_mul_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "main"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "gtChar#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_print_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "leDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "dropWhileString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isAlphanum"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "step"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Eventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 57
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 57
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 57
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "exitFailure"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 289
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyTuple 0 )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 289
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "addFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "divFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "undefined"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 287
                    , sort = Internal
                    }
                ]
                ( TyVar
                    ( Id
                        { name = "a"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = 287
                        , sort = Internal
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "sqrtFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
            )
        ,
            ( Id
                { name = "$_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 174
                , sort = Internal
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "geFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "printString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "divFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "unless"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 145
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 145
                                , sort = Internal
                                }
                            )
                        )
                        ( TyArr
                            ( TyArr
                                ( TyTuple 0 )
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = 145
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 145
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_add_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "toStringInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "isAlphanum#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "leFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "gtFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "cond"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 147
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyApp
                            ( TyApp
                                ( TyTuple 2 )
                                ( TyCon
                                    ( Id
                                        { name = "Bool"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                            )
                            ( TyArr
                                ( TyTuple 0 )
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = 147
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 147
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_add_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "substring"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int64"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyArr
                            ( TyCon
                                ( Id
                                    { name = "Int64"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Builtin" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyCon
                                ( Id
                                    { name = "String"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Builtin" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_eq_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_le_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "."
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 131
                    , sort = Internal
                    }
                , Id
                    { name = "c"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 133
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 129
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 129
                                , sort = Internal
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "c"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 133
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 131
                                    , sort = Internal
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 129
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 131
                                    , sort = Internal
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "c"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 133
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "ltInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "isUpper"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "toStringFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "malgo_panic"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 277
                    , sort = Internal
                    }
                ]
                ( TyArr ( TyPrim StringT )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 277
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "float#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "value"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 7
                , sort = Internal
                }
            , Forall []
                ( TyVar
                    ( Id
                        { name = "Eventually.#a_0"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 83
                        , sort = Internal
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "if"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 143
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Bool"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyTuple 0 )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 143
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyArr
                            ( TyArr
                                ( TyTuple 0 )
                                ( TyVar
                                    ( Id
                                        { name = "a"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = 143
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 143
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "concatString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_substring"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim Int64T )
                        ( TyArr ( TyPrim Int64T ) ( TyPrim StringT ) )
                    )
                )
            )
        ,
            ( Id
                { name = "Float#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_mul_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "flush"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "t"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 1395
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "t"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 1395
                            , sort = Internal
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "geInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "lengthString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_sub_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim FloatT ) )
                )
            )
        ,
            ( Id
                { name = "gtString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_print_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "Char#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neDouble#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "neString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "leString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_ge_float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_exit_failure"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 283
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyTuple 0 )
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 283
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "char#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neChar"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_char_ord"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "malgo_le_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_mul_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "malgo_le_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_div_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_unsafe_cast"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 279
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Builtin" }
                    , uniq = 281
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 279
                            , sort = Internal
                            }
                        )
                    )
                    ( TyVar
                        ( Id
                            { name = "b"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = 281
                            , sort = Internal
                            }
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "gtString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_get_contents"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 ) ( TyPrim StringT )
                )
            )
        ,
            ( Id
                { name = "printInt64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int64"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "Done"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Eventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 27
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Eventually.#a_0"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 27
                            , sort = Internal
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 27
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_string_append"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim StringT ) )
                )
            )
        ,
            ( Id
                { name = "mulFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "const"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 99
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 101
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 99
                            , sort = Internal
                            }
                        )
                    )
                    ( TyArr
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 101
                                , sort = Internal
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 99
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "x"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 23
                , sort = Internal
                }
            , Forall []
                ( TyCon
                    ( Id
                        { name = "Int32"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "eventuallyBind"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 33
                    , sort = Internal
                    }
                , Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 35
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 33
                                , sort = Internal
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 33
                                    , sort = Internal
                                    }
                                )
                            )
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Eventually"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "b"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 35
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                        )
                        ( TyApp
                            ( TyCon
                                ( Id
                                    { name = "Eventually"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 35
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "False"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyCon
                    ( Id
                        { name = "Bool"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "ltInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_gt_int64_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "eqFloat"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Float"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Float"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "subInt64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T )
                    ( TyArr ( TyPrim Int64T ) ( TyPrim Int64T ) )
                )
            )
        ,
            ( Id
                { name = "geDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_int32_t_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "malgo_is_alphanum"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
            )
        ,
            ( Id
                { name = "geString#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim StringT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_lt_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "consString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Char"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "Just"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "Prelude.#a_18"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 94
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "Prelude.#a_18"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 94
                            , sort = Internal
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Maybe"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Prelude.#a_18"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 94
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "putStr"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "malgo_int64_t_to_string"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int64T ) ( TyPrim StringT ) )
            )
        ,
            ( Id
                { name = "malgo_ne_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "neInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_mul_int32_t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "substring#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyArr ( TyPrim Int64T )
                        ( TyArr ( TyPrim Int64T ) ( TyPrim StringT ) )
                    )
                )
            )
        ,
            ( Id
                { name = "work"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 12
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "Eventually.#a_0"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 57
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "geFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "malgo_sub_double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim DoubleT )
                    ( TyArr ( TyPrim DoubleT ) ( TyPrim DoubleT ) )
                )
            )
        ,
            ( Id
                { name = "eqDouble"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Double"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Double"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "ltFloat#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim FloatT )
                    ( TyArr ( TyPrim FloatT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "takeWhileString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "String"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "neInt32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim Int32T )
                    ( TyArr ( TyPrim Int32T ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "_"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 16
                , sort = Internal
                }
            , Forall []
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 126
                            , sort = Internal
                            }
                        )
                    )
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "Eventually"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "a"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 126
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "malgo_le_char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim CharT )
                    ( TyArr ( TyPrim CharT ) ( TyPrim Int32T ) )
                )
            )
        ,
            ( Id
                { name = "gtInt32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyCon
                        ( Id
                            { name = "Int32"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                    ( TyArr
                        ( TyCon
                            ( Id
                                { name = "Int32"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Bool"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "case"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall
                [ Id
                    { name = "b"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 103
                    , sort = Internal
                    }
                , Id
                    { name = "a"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Prelude" }
                    , uniq = 105
                    , sort = Internal
                    }
                ]
                ( TyArr
                    ( TyVar
                        ( Id
                            { name = "a"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = 105
                            , sort = Internal
                            }
                        )
                    )
                    ( TyArr
                        ( TyArr
                            ( TyVar
                                ( Id
                                    { name = "a"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 105
                                    , sort = Internal
                                    }
                                )
                            )
                            ( TyVar
                                ( Id
                                    { name = "b"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Prelude" }
                                    , uniq = 103
                                    , sort = Internal
                                    }
                                )
                            )
                        )
                        ( TyVar
                            ( Id
                                { name = "b"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 103
                                , sort = Internal
                                }
                            )
                        )
                    )
                )
            )
        ,
            ( Id
                { name = "True"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyCon
                    ( Id
                        { name = "Bool"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                )
            )
        ,
            ( Id
                { name = "listToString"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyApp
                        ( TyCon
                            ( Id
                                { name = "List"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                        ( TyCon
                            ( Id
                                { name = "Char"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Builtin" }
                                , uniq = -1
                                , sort = External
                                }
                            )
                        )
                    )
                    ( TyCon
                        ( Id
                            { name = "String"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        )
                    )
                )
            )
        ]
    , _typeDefMap = fromList
        [
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 2
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "Eventually.#b_2"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 26
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 13
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "a"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 37
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Ptr#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPtr
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 3
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "a"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 29
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "String"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "String"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "String#"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim StringT )
                                ( TyCon
                                    ( Id
                                        { name = "String"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Double"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Double"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Double#"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim DoubleT )
                                ( TyCon
                                    ( Id
                                        { name = "Double"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "List"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "List"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Prelude" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters =
                    [ Id
                        { name = "Prelude.#a_19"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Prelude" }
                        , uniq = 95
                        , sort = Internal
                        }
                    ]
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Nil"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Prelude.#a_19"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 95
                                , sort = Internal
                                }
                            ]
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "List"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "Prelude.#a_19"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = 95
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                        )
                    ,
                        ( Id
                            { name = "Cons"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Prelude.#a_19"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 95
                                , sort = Internal
                                }
                            ]
                            ( TyArr
                                ( TyVar
                                    ( Id
                                        { name = "Prelude.#a_19"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = 95
                                        , sort = Internal
                                        }
                                    )
                                )
                                ( TyArr
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "List"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "Prelude.#a_19"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , uniq = 95
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "List"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "Prelude.#a_19"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Prelude" }
                                                , uniq = 95
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Char"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Char"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Char#"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim CharT )
                                ( TyCon
                                    ( Id
                                        { name = "Char"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 1
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "Eventually.#a_1"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 25
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 14
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "b"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 39
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Eventually"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Eventually"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters =
                    [ Id
                        { name = "Eventually.#a_0"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 27
                        , sort = Internal
                        }
                    ]
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Done"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Eventually.#a_0"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 27
                                , sort = Internal
                                }
                            ]
                            ( TyArr
                                ( TyVar
                                    ( Id
                                        { name = "Eventually.#a_0"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 27
                                        , sort = Internal
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Eventually.#a_0"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 27
                                            , sort = Internal
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    ,
                        ( Id
                            { name = "NotYetDone"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Eventually.#a_0"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 27
                                , sort = Internal
                                }
                            ]
                            ( TyArr
                                ( TyArr
                                    ( TyTuple 0 )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "Eventually.#a_0"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 27
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Eventually.#a_0"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 27
                                            , sort = Internal
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Bool"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Bool"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "False"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall []
                            ( TyCon
                                ( Id
                                    { name = "Bool"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Builtin" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                        )
                    ,
                        ( Id
                            { name = "True"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall []
                            ( TyCon
                                ( Id
                                    { name = "Bool"
                                    , meta = ()
                                    , moduleName = ModuleName
                                        { raw = "Builtin" }
                                    , uniq = -1
                                    , sort = External
                                    }
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 5
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "a"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 33
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 0
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "Eventually.#a_0"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 27
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Int32"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Int32"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Int32#"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim Int32T )
                                ( TyCon
                                    ( Id
                                        { name = "Int32"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "String#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim StringT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Int64"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Int64"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Int64#"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim Int64T )
                                ( TyCon
                                    ( Id
                                        { name = "Int64"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Int64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim Int64T
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Int32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim Int32T
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Double#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim DoubleT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 18
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "b"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 41
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "EventuallyBuilder"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyRecord
                    ( fromList
                        [
                            ( "return"
                            , TyArr
                                ( TyVar
                                    ( Id
                                        { name = "Eventually.#a_1"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 25
                                        , sort = Internal
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Eventually.#a_1"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 25
                                            , sort = Internal
                                            }
                                        )
                                    )
                                )
                            )
                        ,
                            ( "bind"
                            , TyArr
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Eventually"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Eventually.#a_1"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 25
                                            , sort = Internal
                                            }
                                        )
                                    )
                                )
                                ( TyArr
                                    ( TyArr
                                        ( TyVar
                                            ( Id
                                                { name = "Eventually.#a_1"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 25
                                                , sort = Internal
                                                }
                                            )
                                        )
                                        ( TyApp
                                            ( TyCon
                                                ( Id
                                                    { name = "Eventually"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = -1
                                                    , sort = External
                                                    }
                                                )
                                            )
                                            ( TyVar
                                                ( Id
                                                    { name = "Eventually.#b_2"
                                                    , meta = ()
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 26
                                                    , sort = Internal
                                                    }
                                                )
                                            )
                                        )
                                    )
                                    ( TyApp
                                        ( TyCon
                                            ( Id
                                                { name = "Eventually"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = -1
                                                , sort = External
                                                }
                                            )
                                        )
                                        ( TyVar
                                            ( Id
                                                { name = "Eventually.#b_2"
                                                , meta = ()
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 26
                                                , sort = Internal
                                                }
                                            )
                                        )
                                    )
                                )
                            )
                        ]
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Float"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Float"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Builtin" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters = []
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Float#"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Builtin" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall []
                            ( TyArr ( TyPrim FloatT )
                                ( TyCon
                                    ( Id
                                        { name = "Float"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Builtin" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 17
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "a"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 43
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Maybe"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyCon
                    ( Id
                        { name = "Maybe"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Prelude" }
                        , uniq = -1
                        , sort = External
                        }
                    )
                , _typeParameters =
                    [ Id
                        { name = "Prelude.#a_18"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Prelude" }
                        , uniq = 94
                        , sort = Internal
                        }
                    ]
                , _valueConstructors =
                    [
                        ( Id
                            { name = "Nothing"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Prelude.#a_18"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 94
                                , sort = Internal
                                }
                            ]
                            ( TyApp
                                ( TyCon
                                    ( Id
                                        { name = "Maybe"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                ( TyVar
                                    ( Id
                                        { name = "Prelude.#a_18"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = 94
                                        , sort = Internal
                                        }
                                    )
                                )
                            )
                        )
                    ,
                        ( Id
                            { name = "Just"
                            , meta = ()
                            , moduleName = ModuleName
                                { raw = "Prelude" }
                            , uniq = -1
                            , sort = External
                            }
                        , Forall
                            [ Id
                                { name = "Prelude.#a_18"
                                , meta = ()
                                , moduleName = ModuleName
                                    { raw = "Prelude" }
                                , uniq = 94
                                , sort = Internal
                                }
                            ]
                            ( TyArr
                                ( TyVar
                                    ( Id
                                        { name = "Prelude.#a_18"
                                        , meta = ()
                                        , moduleName = ModuleName
                                            { raw = "Prelude" }
                                        , uniq = 94
                                        , sort = Internal
                                        }
                                    )
                                )
                                ( TyApp
                                    ( TyCon
                                        ( Id
                                            { name = "Maybe"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Prelude" }
                                            , uniq = -1
                                            , sort = External
                                            }
                                        )
                                    )
                                    ( TyVar
                                        ( Id
                                            { name = "Prelude.#a_18"
                                            , meta = ()
                                            , moduleName = ModuleName
                                                { raw = "Prelude" }
                                            , uniq = 94
                                            , sort = Internal
                                            }
                                        )
                                    )
                                )
                            )
                        )
                    ]
                }
            )
        ,
            ( Id
                { name = "Float#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim FloatT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Char#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim CharT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 4
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "b"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 31
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 6
                , sort = Internal
                }
            , TypeDef
                { _typeConstructor = TyVar
                    ( Id
                        { name = "b"
                        , meta = ()
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 35
                        , sort = Internal
                        }
                    )
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ]
    , _kindCtx = fromList
        [
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 192
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 191
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 256
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 255
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 57
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 56
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 39
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 38
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 71
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 70
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 101
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 100
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 206
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 205
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 242
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 241
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 108
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 107
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Ptr#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 204
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 203
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 238
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 237
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 114
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 113
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 142
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 141
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "List"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 47
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 46
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 126
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 125
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 51
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 50
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 33
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 32
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 236
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 235
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 208
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 207
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 81
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 80
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 49
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 48
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 252
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 251
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 234
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 233
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 210
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 209
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 63
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 62
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 37
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 36
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 104
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 103
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 136
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 135
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 69
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 68
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 77
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 76
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 173
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 172
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 45
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 44
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 214
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 213
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "String#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 212
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 211
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 246
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 245
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 138
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 137
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 59
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 58
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 167
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 166
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 182
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 181
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 232
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 231
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 118
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 117
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 180
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 179
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 244
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 243
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 200
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 199
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 153
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 152
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Int64#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 89
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 88
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 155
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 154
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 116
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 115
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 165
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 164
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 146
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 145
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 159
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 158
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 112
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 111
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 178
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 177
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Int32#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "Double#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 202
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 201
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 106
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 105
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 91
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 90
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 93
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 92
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 157
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 156
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 176
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 175
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 29
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 28
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 144
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 143
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 240
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 239
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 140
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 139
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 73
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 72
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 85
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 84
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 149
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 148
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 188
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 187
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "EventuallyBuilder"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = -1
                , sort = External
                }
            , TyArr TYPE ( TyArr TYPE TYPE )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 222
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 221
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 124
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 123
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 190
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 189
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 220
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 219
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 99
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 98
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 161
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 160
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 67
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 66
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 110
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 109
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 163
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 162
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 254
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 253
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 224
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 223
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 65
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 64
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 35
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 34
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 97
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 96
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 184
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 183
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Maybe"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Prelude" }
                , uniq = -1
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 250
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 249
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 122
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 121
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 79
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 78
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 83
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 82
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 226
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 225
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 130
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 129
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 248
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 247
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 120
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 119
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Float#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 31
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 30
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 61
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 60
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Char#"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , uniq = -1
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 95
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 94
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 198
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 197
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 43
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 42
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 230
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 229
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 228
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 227
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 41
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 40
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 75
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 74
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 171
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 170
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 216
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 215
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 196
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 195
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 134
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 133
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 169
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 168
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "Eventually.#a_0"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 53
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kEventually.#a_0"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 52
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 132
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 131
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "b"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 128
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kb"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 127
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 194
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 193
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 218
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 217
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 151
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 150
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 55
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 54
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "t"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 87
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 86
                    , sort = Temporal
                    }
                )
            )
        ,
            ( Id
                { name = "a"
                , meta = ()
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 186
                , sort = Internal
                }
            , TyMeta
                ( Id
                    { name = "ka"
                    , meta = ()
                    , moduleName = ModuleName
                        { raw = "Eventually" }
                    , uniq = 185
                    , sort = Temporal
                    }
                )
            )
        ]
    , _globalDefs =
        [ FunDef
            ( Id
                { name = "eventuallyBind_curry"
                , meta =
                    [ AnyT
                    , [ AnyT ] :-> AnyT
                    ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 288
                , sort = Temporal
                }
            )
            [ Id
                { name = "done"
                , meta = AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 289
                , sort = Temporal
                }
            , Id
                { name = "k"
                , meta = [ AnyT ] :-> AnyT
                , moduleName = ModuleName
                    { raw = "Eventually" }
                , uniq = 290
                , sort = Temporal
                }
            ]
            (
                [ AnyT
                , [ AnyT ] :-> AnyT
                ] :-> AnyT
            )
            ( Match
                ( Cast
                    ( SumT
                        [ Con
                            ( Data "Eventually.Done" ) [ AnyT ]
                        , Con
                            ( Data "Eventually.NotYetDone" )
                            [
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            ]
                        ]
                    )
                    ( Var
                        ( Id
                            { name = "done"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 289
                            , sort = Temporal
                            }
                        )
                    )
                )
                [ Unpack
                    ( Con
                        ( Data "Eventually.Done" ) [ AnyT ]
                    )
                    [ Id
                        { name = "p"
                        , meta = AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 291
                        , sort = Temporal
                        }
                    ]
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta = AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 292
                            , sort = Temporal
                            }
                        )
                        ( Call
                            ( Var
                                ( Id
                                    { name = "k"
                                    , meta = [ AnyT ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 290
                                    , sort = Temporal
                                    }
                                )
                            )
                            [ Var
                                ( Id
                                    { name = "p"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 291
                                    , sort = Temporal
                                    }
                                )
                            ]
                        )
                        ( Cast AnyT
                            ( Var
                                ( Id
                                    { name = "d"
                                    , meta = AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 292
                                    , sort = Temporal
                                    }
                                )
                            )
                        )
                    )
                , Unpack
                    ( Con
                        ( Data "Eventually.NotYetDone" )
                        [
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        ]
                    )
                    [ Id
                        { name = "p"
                        , meta =
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> AnyT
                        , moduleName = ModuleName
                            { raw = "Eventually" }
                        , uniq = 293
                        , sort = Temporal
                        }
                    ]
                    ( Assign
                        ( Id
                            { name = "d"
                            , meta =
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> AnyT
                            , moduleName = ModuleName
                                { raw = "Eventually" }
                            , uniq = 303
                            , sort = Temporal
                            }
                        )
                        ( Let
                            [ LocalDef
                                { _variable = Id
                                    { name = "fun"
                                    , meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> AnyT
                                    , moduleName = ModuleName
                                        { raw = "Eventually" }
                                    , uniq = 294
                                    , sort = Temporal
                                    }
                                , typ =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> AnyT
                                , _object = Fun
                                    [ Id
                                        { name = "$_"
                                        , meta = SumT
                                            [ Con Tuple [] ]
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 295
                                        , sort = Temporal
                                        }
                                    ]
                                    ( Assign
                                        ( Id
                                            { name = "d"
                                            , meta =
                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                            , moduleName = ModuleName
                                                { raw = "Eventually" }
                                            , uniq = 301
                                            , sort = Temporal
                                            }
                                        )
                                        ( Assign
                                            ( Id
                                                { name = "d"
                                                , meta = AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 299
                                                , sort = Temporal
                                                }
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta = SumT
                                                        [ Con Tuple [] ]
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 297
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Let
                                                    [ LocalDef
                                                        { _variable = Id
                                                            { name = "let"
                                                            , meta = SumT
                                                                [ Con Tuple [] ]
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 296
                                                            , sort = Temporal
                                                            }
                                                        , typ = SumT
                                                            [ Con Tuple [] ]
                                                        , _object = Pack
                                                            ( SumT
                                                                [ Con Tuple [] ]
                                                            )
                                                            ( Con Tuple [] ) []
                                                        }
                                                    ]
                                                    ( Atom
                                                        ( Var
                                                            ( Id
                                                                { name = "let"
                                                                , meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 296
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                                ( Assign
                                                    ( Id
                                                        { name = "d"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 298
                                                        , sort = Temporal
                                                        }
                                                    )
                                                    ( Call
                                                        ( Var
                                                            ( Id
                                                                { name = "p"
                                                                , meta =
                                                                    [ SumT
                                                                        [ Con Tuple [] ]
                                                                    ] :-> AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 293
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                        [ Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = SumT
                                                                    [ Con Tuple [] ]
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 297
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        ]
                                                    )
                                                    ( Cast AnyT
                                                        ( Var
                                                            ( Id
                                                                { name = "d"
                                                                , meta = AnyT
                                                                , moduleName = ModuleName
                                                                    { raw = "Eventually" }
                                                                , uniq = 298
                                                                , sort = Temporal
                                                                }
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            ( Assign
                                                ( Id
                                                    { name = "d"
                                                    , meta =
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    , moduleName = ModuleName
                                                        { raw = "Eventually" }
                                                    , uniq = 300
                                                    , sort = Temporal
                                                    }
                                                )
                                                ( Call
                                                    ( Var
                                                        ( Id
                                                            { name = "eventuallyBind"
                                                            , meta = [ AnyT ] :->
                                                                (
                                                                    [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                                )
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = -1
                                                            , sort = External
                                                            }
                                                        )
                                                    )
                                                    [ Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta = AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 299
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    ]
                                                )
                                                ( Cast
                                                    (
                                                        [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                    )
                                                    ( Var
                                                        ( Id
                                                            { name = "d"
                                                            , meta =
                                                                [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                            , moduleName = ModuleName
                                                                { raw = "Eventually" }
                                                            , uniq = 300
                                                            , sort = Temporal
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                        ( Assign
                                            ( Id
                                                { name = "d"
                                                , meta = AnyT
                                                , moduleName = ModuleName
                                                    { raw = "Eventually" }
                                                , uniq = 302
                                                , sort = Temporal
                                                }
                                            )
                                            ( Call
                                                ( Var
                                                    ( Id
                                                        { name = "d"
                                                        , meta =
                                                            [ [ AnyT ] :-> AnyT ] :-> AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 301
                                                        , sort = Temporal
                                                        }
                                                    )
                                                )
                                                [ Var
                                                    ( Id
                                                        { name = "k"
                                                        , meta = [ AnyT ] :-> AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 290
                                                        , sort = Temporal
                                                        }
                                                    )
                                                ]
                                            )
                                            ( Cast AnyT
                                                ( Var
                                                    ( Id
                                                        { name = "d"
                                                        , meta = AnyT
                                                        , moduleName = ModuleName
                                                            { raw = "Eventually" }
                                                        , uniq = 302
                                                        , sort = Temporal
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    )
                                }
                            ]
                            ( Atom
                                ( Var
                                    ( Id
                                        { name = "fun"
                                        , meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 294
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                        ( Assign
                            ( Id
                                { name = "d"
                                , meta = AnyT
                                , moduleName = ModuleName
                                    { raw = "Eventually" }
                                , uniq = 304
                                , sort = Temporal
                                }
                            )
                            ( Call
                                ( Var
                                    ( Id
                                        { name = "NotYetDone"
                                        , meta =
                                            [
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> AnyT
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = -1
                                        , sort = External
                                        }
                                    )
                                )
                                [ Var
                                    ( Id
                                        { name = "d"
                                        , meta =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 303
                                        , sort = Temporal
                                        }
                                    )
                                ]
                            )
                            ( Cast AnyT
                                ( Var
                                    ( Id
                                        { name = "d"
                                        , meta = AnyT
                                        , moduleName = ModuleName
                                            { raw = "Eventually" }
                                        , uniq = 304
                                        , sort = Temporal
                                        }
                                    )
                                )
                            )
                        )
                    )
                ]
            )
        ]
    , globalClosures = fromList []
    }