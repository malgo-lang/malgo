Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ RecordT
      ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ) ] :-> AnyT, id = Id
     { name = "first", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = External } },
    [ Meta
     { meta = RecordT
      ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ), id = Id
      { name = "record", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 40 } } ],
    [ RecordT
     ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ) ] :-> AnyT, Match
    ( Atom
     ( Var
      ( Meta
       { meta = RecordT
        ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ), id = Id
        { name = "record", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 40 } } ) ) )
    [ OpenRecord
     ( fromList
      [
       ( "fst", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 41 } } ),
       ( "snd", Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 42 } } ) ] )
     ( Atom
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 41 } } ) ) ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 43 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Match
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 45 } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 44 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ Int32T ] :-> AnyT, id = Id
          { name = "Int32#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( Int32 1 ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 44 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 47 } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 46 } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ StringT ] :-> AnyT, id = Id
           { name = "String#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( String "hoge" ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 46 } } ) ) ) )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = RecordT
          ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ), id = Id
          { name = "record", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 48 } }, typ = RecordT
         ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ), _object = Record
         ( fromList
          [
           ( "fst", Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 45 } } ) ),
           ( "snd", Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 47 } } ) ) ] ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta = RecordT
           ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ), id = Id
           { name = "record", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 48 } } ) ) ) ) ) )
    [ Bind
     ( Meta
      { meta = RecordT
       ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ), id = Id
       { name = "let_test/testcases/malgo/TestPolySynonym.mlg.#x_7", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 49 } } )
     ( RecordT ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ) )
     ( Assign
      ( Meta
       { meta =
        [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 53 } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 51 } } )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 50 } } )
        ( Call
         ( Var
          ( Meta
           { meta =
            [ RecordT
             ( fromList
              [ ( "fst", AnyT ), ( "snd", AnyT ) ] ) ] :-> AnyT, id = Id
            { name = "first", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = RecordT
            ( fromList [ ( "fst", AnyT ), ( "snd", AnyT ) ] ), id = Id
            { name = "let_test/testcases/malgo/TestPolySynonym.mlg.#x_7", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 49 } } ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 50 } } ) ) ) )
       ( Assign
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 52 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :->
            ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
            { name = "|>", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 51 } } ) ] )
        ( Cast
         ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
         ( Var
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 52 } } ) ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 54 } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 53 } } ) )
        [ Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "printInt32", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestPolySynonym.mlg" ), sort = Temporal 54 } } ) ) ) ) ) ] ) ], extFuns = [] }