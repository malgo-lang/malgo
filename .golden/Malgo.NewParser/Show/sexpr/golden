(module
   "test/testcases/malgo/Show.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (infix right 5 <>)
      (sig <> (-> String (-> String String)))
      (def
         <>
         (fn ((clause ((con x (y))) (seq (do (apply (apply appendString y) x)))))))
      (type Show (a) (record (show (-> a String))))
      (sig showInt32 (app Show (Int32)))
      (def
         showInt32
         (record (show (fn ((clause (x) (seq (do (apply toStringInt32 x)))))))))
      (sig show (-> (app Show (a)) (-> a String)))
      (def show (fn ((clause ((record (show show))) (seq (do show))))))
      (sig
         showTuple2
         (-> (app Show (a)) (-> (app Show (b)) (app Show ((tuple a b))))))
      (def
         showTuple2
         (fn
            ((clause
                ((con showDictA (showDictB)))
                (seq
                   (do
                      (record
                         (show
                            (fn
                               ((clause
                                   ((tuple a b))
                                   (seq
                                      (do
                                         (opapp
                                            <>
                                            (opapp
                                               <>
                                               (opapp
                                                  <>
                                                  (opapp
                                                     <>
                                                     (string "(")
                                                     (apply
                                                        (apply show a)
                                                        showDictA))
                                                  (string ", "))
                                               (apply (apply show b) showDictB))
                                            (string ")")))))))))))))))
      (sig print (-> (app Show (a)) (-> a (tuple))))
      (def
         print
         (fn
            ((clause
                ((con showDict (x)))
                (seq
                   (do
                      (apply printString (parens (apply (apply show x) showDict)))))))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (do
                      (apply
                         (apply print (tuple (int32 1) (int32 2)))
                         (parens (apply (apply showTuple2 showInt32) showInt32)))))))))))