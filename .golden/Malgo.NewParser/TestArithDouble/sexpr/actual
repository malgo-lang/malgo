(module
   "test/testcases/malgo/TestArithDouble.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (def
         neg
         (fn
            ((clause (x) (seq (do (apply (apply subDouble# x) (double 0.0_f64))))))))
      (infix left 7 *)
      (def
         *
         (fn ((clause ((con x (y))) (seq (do (apply (apply mulDouble# y) x)))))))
      (def
         mul
         (fn ((clause ((con x (y))) (seq (do (apply (apply mulDouble# y) x)))))))
      (infix left 6 +)
      (def
         +
         (fn ((clause ((con x (y))) (seq (do (apply (apply addDouble# y) x)))))))
      (def
         add
         (fn ((clause ((con x (y))) (seq (do (apply (apply addDouble# y) x)))))))
      (def
         show
         (fn
            ((clause
                (x)
                (seq (do (apply String# (parens (apply toStringDouble# x)))))))))
      (def
         traceShowId
         (fn
            ((clause
                (x)
                (seq (do (apply putStrLn (parens (apply show x)))) (do x))))))
      (sig f (-> Double# Double#))
      (def
         f
         (fn
            ((clause
                (x)
                (seq (do (opapp * (parens (opapp + x (double 0.0_f64))) x)))))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (do
                      (apply
                         putStrLn
                         (parens (apply show (parens (apply f (double 0.5_f64))))))))))))))