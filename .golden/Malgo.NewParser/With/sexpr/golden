(module
   "test/testcases/malgo/With.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (sig finally (-> (-> a r) (-> (block a) r)))
      (def
         finally
         (fn
            ((clause
                ((con finalizer (k)))
                (seq (let x (apply k (tuple))) (do (apply finalizer x)))))))
      (sig twice (-> (block a) a))
      (def
         twice
         (fn ((clause (k) (seq (do (apply k (tuple))) (do (apply k (tuple))))))))
      (def
         printAndReturn
         (fn
            ((clause
                ((con str (k)))
                (seq (do (apply printString str)) (do (apply k str)))))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (with
                      (apply
                         finally
                         (fn
                            ((clause
                                ((tuple))
                                (seq (do (apply printString (string "end")))))))))
                   (with twice)
                   (with x (apply printAndReturn (string "foo")))
                   (do (apply printString x)))))))))