(module
   "test/testcases/malgo/InlineFunction.mlg"
   ((import "runtime/malgo/Builtin.mlg" all)
      (import "runtime/malgo/Prelude.mlg" all)
      (infix neutral 4 <=)
      (def <= (fn ((clause (x y) (seq (do (apply (apply leInt32 y) x)))))))
      (infix left 6 +)
      (def + (fn ((clause (x y) (seq (do (apply (apply addInt32 y) x)))))))
      (infix left 6 -)
      (def - (fn ((clause (x y) (seq (do (apply (apply subInt32 y) x)))))))
      (def
         fix
         (fn
            ((clause
                (f x)
                (seq (do (apply (apply f x) (seq (do (apply fix f))))))))))
      (def
         main
         (fn
            ((clause
                ()
                (seq
                   (let
                      fib
                      (apply
                         fix
                         (fn
                            ((clause
                                (f n)
                                (seq
                                   (do
                                      (apply
                                         (apply
                                            (apply
                                               if
                                               (fn
                                                  ((clause
                                                      ()
                                                      (seq
                                                         (do
                                                            (opapp
                                                               +
                                                               (apply
                                                                  f
                                                                  (seq
                                                                     (do
                                                                        (opapp
                                                                           -
                                                                           n
                                                                           (int32
                                                                              1)))))
                                                               (apply
                                                                  f
                                                                  (seq
                                                                     (do
                                                                        (opapp
                                                                           -
                                                                           n
                                                                           (int32
                                                                              2))))))))))))
                                            (fn
                                               ((clause () (seq (do (int32 1)))))))
                                         (seq (do (opapp <= n (int32 1))))))))))))
                   (do
                      (opapp
                         |>
                         (opapp |> (apply fib (int32 5)) toStringInt32)
                         putStrLn)))))))))