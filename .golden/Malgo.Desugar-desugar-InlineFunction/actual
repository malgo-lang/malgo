Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ AnyT, AnyT ] :-> AnyT, id = Id
     { name = "+_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, Meta
     { meta = AnyT, id = Id
      { name = "y", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ],
    [ AnyT, AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :->
         ( [ AnyT ] :-> AnyT ), id = Id
         { name = "addInt32", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "x", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
     ( Cast
      ( [ AnyT ] :-> AnyT )
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "y", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ),
   ( Meta
    { meta =
     [ AnyT, AnyT ] :-> AnyT, id = Id
     { name = "-_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, Meta
     { meta = AnyT, id = Id
      { name = "y", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ],
    [ AnyT, AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :->
         ( [ AnyT ] :-> AnyT ), id = Id
         { name = "subInt32", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "x", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
     ( Cast
      ( [ AnyT ] :-> AnyT )
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "y", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ),
   ( Meta
    { meta =
     [ AnyT, AnyT ] :-> AnyT, id = Id
     { name = "<=_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, Meta
     { meta = AnyT, id = Id
      { name = "y", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ],
    [ AnyT, AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :->
         ( [ AnyT ] :-> AnyT ), id = Id
         { name = "leInt32", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "x", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
     ( Cast
      ( [ AnyT ] :-> AnyT )
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "y", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ),
   ( Meta
    { meta =
     [
      [ [ AnyT ] :-> AnyT ] :->
      ( [ AnyT ] :-> AnyT ), AnyT ] :-> AnyT, id = Id
     { name = "fix_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } },
    [ Meta
     { meta =
      [ [ AnyT ] :-> AnyT ] :->
      ( [ AnyT ] :-> AnyT ), id = Id
      { name = "f", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ],
    [ [ [ AnyT ] :-> AnyT ] :-> ( [ AnyT ] :-> AnyT ), AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ [ AnyT ] :-> AnyT ] :-> ( [ AnyT ] :-> AnyT ) ] :->
          ( [ AnyT ] :-> AnyT ), id = Id
          { name = "fix", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :->
          ( [ AnyT ] :-> AnyT ), id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( [ AnyT ] :-> AnyT )
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :->
          ( [ AnyT ] :-> AnyT ), id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( [ AnyT ] :-> AnyT )
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "x", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ),
   ( Meta
    { meta =
     [ [ [ AnyT ] :-> AnyT ] :-> ( [ AnyT ] :-> AnyT ) ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "fix", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } },
    [ Meta
     { meta =
      [ [ AnyT ] :-> AnyT ] :->
      ( [ AnyT ] :-> AnyT ), id = Id
      { name = "f", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ],
    [ [ [ AnyT ] :-> AnyT ] :-> ( [ AnyT ] :-> AnyT ) ] :->
    ( [ AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "x", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [
          [ [ AnyT ] :-> AnyT ] :->
          ( [ AnyT ] :-> AnyT ), AnyT ] :-> AnyT, id = Id
         { name = "fix_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :->
          ( [ AnyT ] :-> AnyT ), id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "<=", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ], [ AnyT ] :->
    ( [ AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "y", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, AnyT ] :-> AnyT, id = Id
         { name = "<=_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "y", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "-", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ], [ AnyT ] :->
    ( [ AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "y", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, AnyT ] :-> AnyT, id = Id
         { name = "-_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "y", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "+", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ], [ AnyT ] :->
    ( [ AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "y", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, AnyT ] :-> AnyT, id = Id
         { name = "+_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "y", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Match
    ( Assign
     ( Meta
      { meta =
       [ [ AnyT ] :-> AnyT ] :->
       ( [ AnyT ] :-> AnyT ), id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta =
         [ [ AnyT ] :-> AnyT ] :->
         ( [ AnyT ] :-> AnyT ), id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ =
        [ [ AnyT ] :-> AnyT ] :->
        ( [ AnyT ] :-> AnyT ), _object = Fun
        [ Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
        ( Let
         [ LocalDef
          { _variable = Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "let", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
           [ Meta
            { meta = AnyT, id = Id
             { name = "n", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
           ( Let
            [ LocalDef
             { _variable = Meta
              { meta =
               [ [ AnyT ] :-> AnyT, AnyT ] :-> AnyT, id = Id
               { name = "inner_curry", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ =
              [ [ AnyT ] :-> AnyT, AnyT ] :-> AnyT, _object = Fun
              [ Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "f", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, Meta
               { meta = AnyT, id = Id
                { name = "n", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
              ( Assign
               ( Meta
                { meta =
                 [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
               ( Assign
                ( Meta
                 { meta =
                  [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
                  ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                ( Assign
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                 ( Assign
                  ( Meta
                   { meta = [ AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                  ( Assign
                   ( Meta
                    { meta = [ AnyT ] :-> AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ AnyT ] :->
                       ( [ AnyT ] :-> AnyT ), id = Id
                       { name = "<=", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } } ) )
                    [ Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "n", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                   ( Cast
                    ( [ AnyT ] :-> AnyT )
                    ( Var
                     ( Meta
                      { meta = [ AnyT ] :-> AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                   ( Assign
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                    ( Call
                     ( Var
                      ( Meta
                       { meta = [ Int32T ] :-> AnyT, id = Id
                        { name = "Int32#", moduleName = Artifact
                         ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                     [ Unboxed ( Int32 1 ) ] )
                    ( Cast AnyT
                     ( Var
                      ( Meta
                       { meta = AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
                   ( Assign
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                    ( Call
                     ( Var
                      ( Meta
                       { meta = [ AnyT ] :-> AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
                     [ Var
                      ( Meta
                       { meta = AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                    ( Cast AnyT
                     ( Var
                      ( Meta
                       { meta = AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ) )
                 ( Assign
                  ( Meta
                   { meta =
                    [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
                    (
                     [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta = [ AnyT ] :->
                      (
                       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
                       (
                        [
                         [ SumT
                          [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) ), id = Id
                      { name = "if", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
                   [ Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                  ( Cast
                   (
                    [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
                    ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) )
                   ( Var
                    ( Meta
                     { meta =
                      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
                      (
                       [
                        [ SumT
                         [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
                ( Assign
                 ( Meta
                  { meta =
                   [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                 ( Let
                  [ LocalDef
                   { _variable = Meta
                    { meta =
                     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                     { name = "fun", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ =
                    [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
                    [ Meta
                     { meta = SumT
                      [ Con Tuple [] ], id = Id
                      { name = "$_", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
                    ( Assign
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                     ( Call
                      ( Var
                       ( Meta
                        { meta = [ Int32T ] :-> AnyT, id = Id
                         { name = "Int32#", moduleName = Artifact
                          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                      [ Unboxed ( Int32 1 ) ] )
                     ( Cast AnyT
                      ( Var
                       ( Meta
                        { meta = AnyT, id = Id
                         { name = "d", moduleName = Artifact
                          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) } ]
                  ( Atom
                   ( Var
                    ( Meta
                     { meta =
                      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                      { name = "fun", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
                 ( Assign
                  ( Meta
                   { meta =
                    [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta =
                      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
                      (
                       [
                        [ SumT
                         [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
                   [ Var
                    ( Meta
                     { meta =
                      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                  ( Cast
                   ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT )
                   ( Var
                    ( Meta
                     { meta =
                      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ) )
               ( Assign
                ( Meta
                 { meta =
                  [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                ( Let
                 [ LocalDef
                  { _variable = Meta
                   { meta =
                    [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                    { name = "fun", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } }, typ =
                   [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
                   [ Meta
                    { meta = SumT
                     [ Con Tuple [] ], id = Id
                     { name = "$_", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ]
                   ( Assign
                    ( Meta
                     { meta = [ AnyT ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                    ( Assign
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                     ( Assign
                      ( Meta
                       { meta = AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                      ( Assign
                       ( Meta
                        { meta = [ AnyT ] :-> AnyT, id = Id
                         { name = "d", moduleName = Artifact
                          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                       ( Assign
                        ( Meta
                         { meta = [ AnyT ] :-> AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                        ( Call
                         ( Var
                          ( Meta
                           { meta = [ AnyT ] :->
                            ( [ AnyT ] :-> AnyT ), id = Id
                            { name = "-", moduleName = Artifact
                             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } } ) )
                         [ Var
                          ( Meta
                           { meta = AnyT, id = Id
                            { name = "n", moduleName = Artifact
                             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                        ( Cast
                         ( [ AnyT ] :-> AnyT )
                         ( Var
                          ( Meta
                           { meta = [ AnyT ] :-> AnyT, id = Id
                            { name = "d", moduleName = Artifact
                             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
                       ( Assign
                        ( Meta
                         { meta = AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                        ( Assign
                         ( Meta
                          { meta = AnyT, id = Id
                           { name = "d", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                         ( Call
                          ( Var
                           ( Meta
                            { meta = [ Int32T ] :-> AnyT, id = Id
                             { name = "Int32#", moduleName = Artifact
                              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                          [ Unboxed ( Int32 1 ) ] )
                         ( Cast AnyT
                          ( Var
                           ( Meta
                            { meta = AnyT, id = Id
                             { name = "d", moduleName = Artifact
                              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
                        ( Assign
                         ( Meta
                          { meta = AnyT, id = Id
                           { name = "d", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                         ( Call
                          ( Var
                           ( Meta
                            { meta = [ AnyT ] :-> AnyT, id = Id
                             { name = "d", moduleName = Artifact
                              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
                          [ Var
                           ( Meta
                            { meta = AnyT, id = Id
                             { name = "d", moduleName = Artifact
                              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                         ( Cast AnyT
                          ( Var
                           ( Meta
                            { meta = AnyT, id = Id
                             { name = "d", moduleName = Artifact
                              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ) )
                      ( Assign
                       ( Meta
                        { meta = AnyT, id = Id
                         { name = "d", moduleName = Artifact
                          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                       ( Call
                        ( Var
                         ( Meta
                          { meta = [ AnyT ] :-> AnyT, id = Id
                           { name = "f", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
                        [ Var
                         ( Meta
                          { meta = AnyT, id = Id
                           { name = "d", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                       ( Cast AnyT
                        ( Var
                         ( Meta
                          { meta = AnyT, id = Id
                           { name = "d", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
                     ( Assign
                      ( Meta
                       { meta = [ AnyT ] :-> AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                      ( Call
                       ( Var
                        ( Meta
                         { meta = [ AnyT ] :->
                          ( [ AnyT ] :-> AnyT ), id = Id
                          { name = "+", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } } ) )
                       [ Var
                        ( Meta
                         { meta = AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                      ( Cast
                       ( [ AnyT ] :-> AnyT )
                       ( Var
                        ( Meta
                         { meta = [ AnyT ] :-> AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
                    ( Assign
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                     ( Assign
                      ( Meta
                       { meta = AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                      ( Assign
                       ( Meta
                        { meta = [ AnyT ] :-> AnyT, id = Id
                         { name = "d", moduleName = Artifact
                          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                       ( Assign
                        ( Meta
                         { meta = [ AnyT ] :-> AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                        ( Call
                         ( Var
                          ( Meta
                           { meta = [ AnyT ] :->
                            ( [ AnyT ] :-> AnyT ), id = Id
                            { name = "-", moduleName = Artifact
                             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } } ) )
                         [ Var
                          ( Meta
                           { meta = AnyT, id = Id
                            { name = "n", moduleName = Artifact
                             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                        ( Cast
                         ( [ AnyT ] :-> AnyT )
                         ( Var
                          ( Meta
                           { meta = [ AnyT ] :-> AnyT, id = Id
                            { name = "d", moduleName = Artifact
                             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
                       ( Assign
                        ( Meta
                         { meta = AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                        ( Assign
                         ( Meta
                          { meta = AnyT, id = Id
                           { name = "d", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                         ( Call
                          ( Var
                           ( Meta
                            { meta = [ Int32T ] :-> AnyT, id = Id
                             { name = "Int32#", moduleName = Artifact
                              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                          [ Unboxed ( Int32 2 ) ] )
                         ( Cast AnyT
                          ( Var
                           ( Meta
                            { meta = AnyT, id = Id
                             { name = "d", moduleName = Artifact
                              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
                        ( Assign
                         ( Meta
                          { meta = AnyT, id = Id
                           { name = "d", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                         ( Call
                          ( Var
                           ( Meta
                            { meta = [ AnyT ] :-> AnyT, id = Id
                             { name = "d", moduleName = Artifact
                              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
                          [ Var
                           ( Meta
                            { meta = AnyT, id = Id
                             { name = "d", moduleName = Artifact
                              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                         ( Cast AnyT
                          ( Var
                           ( Meta
                            { meta = AnyT, id = Id
                             { name = "d", moduleName = Artifact
                              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ) )
                      ( Assign
                       ( Meta
                        { meta = AnyT, id = Id
                         { name = "d", moduleName = Artifact
                          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                       ( Call
                        ( Var
                         ( Meta
                          { meta = [ AnyT ] :-> AnyT, id = Id
                           { name = "f", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
                        [ Var
                         ( Meta
                          { meta = AnyT, id = Id
                           { name = "d", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                       ( Cast AnyT
                        ( Var
                         ( Meta
                          { meta = AnyT, id = Id
                           { name = "d", moduleName = Artifact
                            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
                     ( Assign
                      ( Meta
                       { meta = AnyT, id = Id
                        { name = "d", moduleName = Artifact
                         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                      ( Call
                       ( Var
                        ( Meta
                         { meta = [ AnyT ] :-> AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
                       [ Var
                        ( Meta
                         { meta = AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                      ( Cast AnyT
                       ( Var
                        ( Meta
                         { meta = AnyT, id = Id
                          { name = "d", moduleName = Artifact
                           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ) ) } ]
                 ( Atom
                  ( Var
                   ( Meta
                    { meta =
                     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                     { name = "fun", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
                ( Assign
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta =
                     [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
                  [ Var
                   ( Meta
                    { meta =
                     [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
                 ( Cast AnyT
                  ( Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ) ) } ]
            ( Call
             ( Var
              ( Meta
               { meta =
                [ [ AnyT ] :-> AnyT, AnyT ] :-> AnyT, id = Id
                { name = "inner_curry", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
             [ Var
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "f", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ), Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "n", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] ) ) } ]
         ( Atom
          ( Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "let", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :->
          ( [ AnyT ] :-> AnyT ), id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ [ AnyT ] :-> AnyT ] :-> ( [ AnyT ] :-> AnyT ) ] :->
          ( [ AnyT ] :-> AnyT ), id = Id
          { name = "fix", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :->
          ( [ AnyT ] :-> AnyT ), id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( [ AnyT ] :-> AnyT )
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
    [ Bind
     ( Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let_test/testcases/malgo/InlineFunction.mlg.#fib_10", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
     ( [ AnyT ] :-> AnyT )
     ( Assign
      ( Meta
       { meta =
        [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ Int32T ] :-> AnyT, id = Id
               { name = "Int32#", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
            [ Unboxed ( Int32 5 ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "let_test/testcases/malgo/InlineFunction.mlg.#fib_10", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
           ( Cast AnyT
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
         ( Assign
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
              { name = "|>", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta =
             [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
          [ Var
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "toStringInt32", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
       ( Assign
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :->
            ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
            { name = "|>", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ] )
        ( Cast
         ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
         ( Var
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) )
        [ Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "putStrLn", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/InlineFunction.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) ], extFuns = [] }