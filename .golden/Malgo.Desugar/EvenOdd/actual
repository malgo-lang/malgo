(()
   ((define
       (even $EvenOdd.int32#_xxx)
       (-> (Any#) Any#)
       (match
          (cast
             (sum (con runtime/malgo/Builtin.mlg.Int32# Int32#))
             $EvenOdd.int32#_xxx)
          (unpack
             (con runtime/malgo/Builtin.mlg.Int32# Int32#)
             ($EvenOdd.p_xxx)
             (match
                $EvenOdd.p_xxx
                (exact 0_i32 (direct True))
                (bind
                   $EvenOdd.__xxx
                   Int32#
                   (=
                      $EvenOdd.d_xxx
                      (=
                         $EvenOdd.d_xxx
                         (=
                            $EvenOdd.d_xxx
                            (call subInt32 $EvenOdd.int32#_xxx)
                            (cast (-> (Any#) Any#) $EvenOdd.d_xxx))
                         (=
                            $EvenOdd.d_xxx
                            (=
                               $EvenOdd.d_xxx
                               (call Int32# 1_i32)
                               (cast Any# $EvenOdd.d_xxx))
                            (=
                               $EvenOdd.d_xxx
                               (call $EvenOdd.d_xxx $EvenOdd.d_xxx)
                               (cast Any# $EvenOdd.d_xxx))))
                      (=
                         $EvenOdd.d_xxx
                         (call odd $EvenOdd.d_xxx)
                         (cast Any# $EvenOdd.d_xxx))))))))
      (define
         (odd $EvenOdd.int32#_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum (con runtime/malgo/Builtin.mlg.Int32# Int32#))
               $EvenOdd.int32#_xxx)
            (unpack
               (con runtime/malgo/Builtin.mlg.Int32# Int32#)
               ($EvenOdd.p_xxx)
               (match
                  $EvenOdd.p_xxx
                  (exact 0_i32 (direct False))
                  (bind
                     $EvenOdd.__xxx
                     Int32#
                     (=
                        $EvenOdd.d_xxx
                        (=
                           $EvenOdd.d_xxx
                           (=
                              $EvenOdd.d_xxx
                              (call subInt32 $EvenOdd.int32#_xxx)
                              (cast (-> (Any#) Any#) $EvenOdd.d_xxx))
                           (=
                              $EvenOdd.d_xxx
                              (=
                                 $EvenOdd.d_xxx
                                 (call Int32# 1_i32)
                                 (cast Any# $EvenOdd.d_xxx))
                              (=
                                 $EvenOdd.d_xxx
                                 (call $EvenOdd.d_xxx $EvenOdd.d_xxx)
                                 (cast Any# $EvenOdd.d_xxx))))
                        (=
                           $EvenOdd.d_xxx
                           (call even $EvenOdd.d_xxx)
                           (cast Any# $EvenOdd.d_xxx))))))))
      (define
         (main $EvenOdd.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $EvenOdd.d_xxx
            (let
               (($EvenOdd.fun_xxx
                   (-> (Any#) (sum (con Tuple#)))
                   (fun
                      ($EvenOdd.false_xxx)
                      (match
                         (cast
                            (sum
                               (con runtime/malgo/Builtin.mlg.False)
                               (con runtime/malgo/Builtin.mlg.True))
                            $EvenOdd.false_xxx)
                         (unpack
                            (con runtime/malgo/Builtin.mlg.False)
                            ()
                            (=
                               $EvenOdd.d_xxx
                               (=
                                  $EvenOdd.d_xxx
                                  (call String# "False")
                                  (cast Any# $EvenOdd.d_xxx))
                               (=
                                  $EvenOdd.d_xxx
                                  (call putStrLn $EvenOdd.d_xxx)
                                  (cast (sum (con Tuple#)) $EvenOdd.d_xxx))))
                         (unpack
                            (con runtime/malgo/Builtin.mlg.True)
                            ()
                            (=
                               $EvenOdd.d_xxx
                               (=
                                  $EvenOdd.d_xxx
                                  (call String# "True")
                                  (cast Any# $EvenOdd.d_xxx))
                               (=
                                  $EvenOdd.d_xxx
                                  (call putStrLn $EvenOdd.d_xxx)
                                  (cast (sum (con Tuple#)) $EvenOdd.d_xxx))))))))
               $EvenOdd.fun_xxx)
            (=
               $EvenOdd.d_xxx
               (=
                  $EvenOdd.d_xxx
                  (=
                     $EvenOdd.d_xxx
                     (call Int32# 10_i32)
                     (cast Any# $EvenOdd.d_xxx))
                  (=
                     $EvenOdd.d_xxx
                     (call even $EvenOdd.d_xxx)
                     (cast Any# $EvenOdd.d_xxx)))
               (=
                  $EvenOdd.d_xxx
                  (call $EvenOdd.d_xxx $EvenOdd.d_xxx)
                  (cast (sum (con Tuple#)) $EvenOdd.d_xxx))))))
   ())