(()
   ((define
       (f $DeferLaw.x_xxx)
       (-> (Any#) Any#)
       (=
          $DeferLaw.d_xxx
          (let
             (($DeferLaw.fun_xxx
                 (-> ((sum (con Tuple#))) Any#)
                 (fun ($DeferLaw.$__xxx) $DeferLaw.x_xxx)))
             $DeferLaw.fun_xxx)
          (=
             $DeferLaw.d_xxx
             (let
                (($DeferLaw.let_xxx
                    (sum (con Tuple#))
                    (pack (sum (con Tuple#)) (con Tuple#))))
                $DeferLaw.let_xxx)
             (=
                $DeferLaw.d_xxx
                (call $DeferLaw.d_xxx $DeferLaw.d_xxx)
                (cast Any# $DeferLaw.d_xxx)))))
      (define
         (main $DeferLaw.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $DeferLaw.d_xxx
            (=
               $DeferLaw.d_xxx
               (=
                  $DeferLaw.d_xxx
                  (call String# "Hello")
                  (cast Any# $DeferLaw.d_xxx))
               (=
                  $DeferLaw.d_xxx
                  (call f $DeferLaw.d_xxx)
                  (cast Any# $DeferLaw.d_xxx)))
            (=
               $DeferLaw.d_xxx
               (call putStrLn $DeferLaw.d_xxx)
               (cast (sum (con Tuple#)) $DeferLaw.d_xxx)))))
   ())