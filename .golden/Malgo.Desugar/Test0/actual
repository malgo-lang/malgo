(()
   ((define
       ($Test0.+#_curry_xxx $Test0.x_xxx $Test0.y_xxx)
       (-> (Int64# Int64#) Int64#)
       (=
          $Test0.d_xxx
          (=
             $Test0.d_xxx
             (call addInt64# $Test0.x_xxx)
             (cast (-> (Int64#) Int64#) $Test0.d_xxx))
          (=
             $Test0.d_xxx
             (call $Test0.d_xxx $Test0.y_xxx)
             (cast Int64# $Test0.d_xxx))))
      (define
         ($Test0.|>_curry_xxx $Test0.x_xxx $Test0.f_xxx)
         (-> (Any# (-> (Any#) Any#)) Any#)
         (=
            $Test0.d_xxx
            (call $Test0.f_xxx $Test0.x_xxx)
            (cast Any# $Test0.d_xxx)))
      (define
         (|> $Test0.x_xxx)
         (-> (Any#) (-> ((-> (Any#) Any#)) Any#))
         (let
            (($Test0.let_xxx
                (-> ((-> (Any#) Any#)) Any#)
                (fun
                   ($Test0.f_xxx)
                   (direct $Test0.|>_curry_xxx $Test0.x_xxx $Test0.f_xxx))))
            $Test0.let_xxx))
      (define
         (main $Test0.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $Test0.d_xxx
            (=
               $Test0.d_xxx
               (= $Test0.d_xxx (call Int64# 1_i64) (cast Any# $Test0.d_xxx))
               (=
                  $Test0.d_xxx
                  (call |> $Test0.d_xxx)
                  (cast
                     (-> ((-> (Any#) (sum (con Tuple#)))) (sum (con Tuple#)))
                     $Test0.d_xxx)))
            (=
               $Test0.d_xxx
               (let
                  (($Test0.fun_xxx
                      (-> (Any#) (sum (con Tuple#)))
                      (fun
                         ($Test0.int64#_xxx)
                         (match
                            (cast
                               (sum (con runtime/malgo/Builtin.mlg.Int64# Int64#))
                               $Test0.int64#_xxx)
                            (unpack
                               (con runtime/malgo/Builtin.mlg.Int64# Int64#)
                               ($Test0.p_xxx)
                               (=
                                  $Test0.d_xxx
                                  (=
                                     $Test0.d_xxx
                                     (call toStringInt64# $Test0.p_xxx)
                                     (cast String# $Test0.d_xxx))
                                  (=
                                     $Test0.d_xxx
                                     (call printString# $Test0.d_xxx)
                                     (cast (sum (con Tuple#)) $Test0.d_xxx))))))))
                  $Test0.fun_xxx)
               (=
                  $Test0.d_xxx
                  (call $Test0.d_xxx $Test0.d_xxx)
                  (cast (sum (con Tuple#)) $Test0.d_xxx)))))
      (define
         (+# $Test0.x_xxx)
         (-> (Int64#) (-> (Int64#) Int64#))
         (let
            (($Test0.let_xxx
                (-> (Int64#) Int64#)
                (fun
                   ($Test0.y_xxx)
                   (direct $Test0.+#_curry_xxx $Test0.x_xxx $Test0.y_xxx))))
            $Test0.let_xxx)))
   ())