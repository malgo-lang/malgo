(((define
     zero3D
     (Record# (x Any#) (y Any#) (z Any#))
     (=
        $FieldPrefix.d_xxx
        (=
           $FieldPrefix.d_xxx
           (=
              $FieldPrefix.d_xxx
              (call Float# 0.0_f32)
              (cast Any# $FieldPrefix.d_xxx))
           (=
              $FieldPrefix.d_xxx
              (=
                 $FieldPrefix.d_xxx
                 (call Float# 0.0_f32)
                 (cast Any# $FieldPrefix.d_xxx))
              (=
                 $FieldPrefix.d_xxx
                 (=
                    $FieldPrefix.d_xxx
                    (call Float# 0.0_f32)
                    (cast Any# $FieldPrefix.d_xxx))
                 (let
                    (($FieldPrefix.record_xxx
                        (Record# (x Any#) (y Any#) (z Any#))
                        (record
                           (x $FieldPrefix.d_xxx)
                           (y $FieldPrefix.d_xxx)
                           (z $FieldPrefix.d_xxx))))
                    $FieldPrefix.record_xxx))))
        $FieldPrefix.d_xxx))
    (define
       zero2D
       (Record# (x Any#) (y Any#))
       (=
          $FieldPrefix.d_xxx
          (=
             $FieldPrefix.d_xxx
             (=
                $FieldPrefix.d_xxx
                (call Int32# 0_i32)
                (cast Any# $FieldPrefix.d_xxx))
             (=
                $FieldPrefix.d_xxx
                (=
                   $FieldPrefix.d_xxx
                   (call Int32# 0_i32)
                   (cast Any# $FieldPrefix.d_xxx))
                (let
                   (($FieldPrefix.record_xxx
                       (Record# (x Any#) (y Any#))
                       (record (x $FieldPrefix.d_xxx) (y $FieldPrefix.d_xxx))))
                   $FieldPrefix.record_xxx)))
          $FieldPrefix.d_xxx)))
   ((define
       (y2D $FieldPrefix.record_xxx)
       (-> ((Record# (x Any#) (y Any#))) Any#)
       (match
          $FieldPrefix.record_xxx
          (open
             ((x $FieldPrefix.p_xxx) (y $FieldPrefix.p_xxx))
             $FieldPrefix.p_xxx)))
      (define
         (x2D $FieldPrefix.record_xxx)
         (-> ((Record# (x Any#) (y Any#))) Any#)
         (match
            $FieldPrefix.record_xxx
            (open
               ((x $FieldPrefix.p_xxx) (y $FieldPrefix.p_xxx))
               $FieldPrefix.p_xxx)))
      (define
         (print2D $FieldPrefix.record_xxx)
         (-> ((Record# (x Any#) (y Any#))) (sum (con Tuple#)))
         (match
            $FieldPrefix.record_xxx
            (open
               ((x $FieldPrefix.p_xxx) (y $FieldPrefix.p_xxx))
               (=
                  $FieldPrefix.d_xxx
                  (=
                     $FieldPrefix.d_xxx
                     (=
                        $FieldPrefix.d_xxx
                        (call toStringInt32 $FieldPrefix.p_xxx)
                        (cast Any# $FieldPrefix.d_xxx))
                     (=
                        $FieldPrefix.d_xxx
                        (call printString $FieldPrefix.d_xxx)
                        (cast (sum (con Tuple#)) $FieldPrefix.d_xxx)))
                  (=
                     $FieldPrefix.d_xxx
                     (=
                        $FieldPrefix.d_xxx
                        (=
                           $FieldPrefix.d_xxx
                           (call String# ", ")
                           (cast Any# $FieldPrefix.d_xxx))
                        (=
                           $FieldPrefix.d_xxx
                           (call printString $FieldPrefix.d_xxx)
                           (cast (sum (con Tuple#)) $FieldPrefix.d_xxx)))
                     (=
                        $FieldPrefix.d_xxx
                        (=
                           $FieldPrefix.d_xxx
                           (call toStringInt32 $FieldPrefix.p_xxx)
                           (cast Any# $FieldPrefix.d_xxx))
                        (=
                           $FieldPrefix.d_xxx
                           (call printString $FieldPrefix.d_xxx)
                           (cast (sum (con Tuple#)) $FieldPrefix.d_xxx))))))))
      (define
         (main $FieldPrefix.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $FieldPrefix.d_xxx
            (call print2D zero2D)
            (cast (sum (con Tuple#)) $FieldPrefix.d_xxx))))
   ())