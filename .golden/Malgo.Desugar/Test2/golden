(()
   ((define
       (R)
       (-> () Any#)
       (let
          (($Test2.let_xxx
              (sum
                 (con test/testcases/malgo/Test2.mlg.R)
                 (con test/testcases/malgo/Test2.mlg.G)
                 (con test/testcases/malgo/Test2.mlg.B))
              (pack
                 (sum
                    (con test/testcases/malgo/Test2.mlg.R)
                    (con test/testcases/malgo/Test2.mlg.G)
                    (con test/testcases/malgo/Test2.mlg.B))
                 (con test/testcases/malgo/Test2.mlg.R))))
          (cast Any# $Test2.let_xxx)))
      (define
         (G)
         (-> () Any#)
         (let
            (($Test2.let_xxx
                (sum
                   (con test/testcases/malgo/Test2.mlg.R)
                   (con test/testcases/malgo/Test2.mlg.G)
                   (con test/testcases/malgo/Test2.mlg.B))
                (pack
                   (sum
                      (con test/testcases/malgo/Test2.mlg.R)
                      (con test/testcases/malgo/Test2.mlg.G)
                      (con test/testcases/malgo/Test2.mlg.B))
                   (con test/testcases/malgo/Test2.mlg.G))))
            (cast Any# $Test2.let_xxx)))
      (define
         (B)
         (-> () Any#)
         (let
            (($Test2.let_xxx
                (sum
                   (con test/testcases/malgo/Test2.mlg.R)
                   (con test/testcases/malgo/Test2.mlg.G)
                   (con test/testcases/malgo/Test2.mlg.B))
                (pack
                   (sum
                      (con test/testcases/malgo/Test2.mlg.R)
                      (con test/testcases/malgo/Test2.mlg.G)
                      (con test/testcases/malgo/Test2.mlg.B))
                   (con test/testcases/malgo/Test2.mlg.B))))
            (cast Any# $Test2.let_xxx)))
      (define
         (malgo_print_string $Test2.p_xxx)
         (-> (String#) (sum (con Tuple#)))
         (raw malgo_print_string (-> (String#) (sum (con Tuple#))) $Test2.p_xxx))
      (define
         (rtob $Test2.r_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum
                  (con test/testcases/malgo/Test2.mlg.R)
                  (con test/testcases/malgo/Test2.mlg.G)
                  (con test/testcases/malgo/Test2.mlg.B))
               $Test2.r_xxx)
            (unpack (con test/testcases/malgo/Test2.mlg.R) () (direct B))
            (unpack (con test/testcases/malgo/Test2.mlg.G) () $Test2.r_xxx)
            (unpack (con test/testcases/malgo/Test2.mlg.B) () $Test2.r_xxx)))
      (define
         (main $Test2.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $Test2.d_xxx
            (let
               (($Test2.fun_xxx
                   (-> (Any#) (sum (con Tuple#)))
                   (fun
                      ($Test2.b_xxx)
                      (match
                         (cast
                            (sum
                               (con test/testcases/malgo/Test2.mlg.R)
                               (con test/testcases/malgo/Test2.mlg.G)
                               (con test/testcases/malgo/Test2.mlg.B))
                            $Test2.b_xxx)
                         (unpack
                            (con test/testcases/malgo/Test2.mlg.R)
                            ()
                            (=
                               $Test2.d_xxx
                               (call malgo_print_string "WRONG")
                               (cast (sum (con Tuple#)) $Test2.d_xxx)))
                         (unpack
                            (con test/testcases/malgo/Test2.mlg.G)
                            ()
                            (=
                               $Test2.d_xxx
                               (call malgo_print_string "WRONG")
                               (cast (sum (con Tuple#)) $Test2.d_xxx)))
                         (unpack
                            (con test/testcases/malgo/Test2.mlg.B)
                            ()
                            (=
                               $Test2.d_xxx
                               (call malgo_print_string "OK")
                               (cast (sum (con Tuple#)) $Test2.d_xxx)))))))
               $Test2.fun_xxx)
            (=
               $Test2.d_xxx
               (=
                  $Test2.d_xxx
                  (direct R)
                  (=
                     $Test2.d_xxx
                     (call rtob $Test2.d_xxx)
                     (cast Any# $Test2.d_xxx)))
               (=
                  $Test2.d_xxx
                  (call $Test2.d_xxx $Test2.d_xxx)
                  (cast (sum (con Tuple#)) $Test2.d_xxx))))))
   ((extern malgo_print_string (-> (String#) (sum (con Tuple#))))))