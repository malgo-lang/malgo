(()
   ((define
       ($TestArithDouble.*_curry_xxx
          $TestArithDouble.x_xxx
          $TestArithDouble.y_xxx)
       (-> (Double# Double#) Double#)
       (=
          $TestArithDouble.d_xxx
          (=
             $TestArithDouble.d_xxx
             (call mulDouble# $TestArithDouble.x_xxx)
             (cast (-> (Double#) Double#) $TestArithDouble.d_xxx))
          (=
             $TestArithDouble.d_xxx
             (call $TestArithDouble.d_xxx $TestArithDouble.y_xxx)
             (cast Double# $TestArithDouble.d_xxx))))
      (define
         ($TestArithDouble.+_curry_xxx
            $TestArithDouble.x_xxx
            $TestArithDouble.y_xxx)
         (-> (Double# Double#) Double#)
         (=
            $TestArithDouble.d_xxx
            (=
               $TestArithDouble.d_xxx
               (call addDouble# $TestArithDouble.x_xxx)
               (cast (-> (Double#) Double#) $TestArithDouble.d_xxx))
            (=
               $TestArithDouble.d_xxx
               (call $TestArithDouble.d_xxx $TestArithDouble.y_xxx)
               (cast Double# $TestArithDouble.d_xxx))))
      (define
         ($TestArithDouble.add_curry_xxx
            $TestArithDouble.x_xxx
            $TestArithDouble.y_xxx)
         (-> (Double# Double#) Double#)
         (=
            $TestArithDouble.d_xxx
            (=
               $TestArithDouble.d_xxx
               (call addDouble# $TestArithDouble.x_xxx)
               (cast (-> (Double#) Double#) $TestArithDouble.d_xxx))
            (=
               $TestArithDouble.d_xxx
               (call $TestArithDouble.d_xxx $TestArithDouble.y_xxx)
               (cast Double# $TestArithDouble.d_xxx))))
      (define
         ($TestArithDouble.mul_curry_xxx
            $TestArithDouble.x_xxx
            $TestArithDouble.y_xxx)
         (-> (Double# Double#) Double#)
         (=
            $TestArithDouble.d_xxx
            (=
               $TestArithDouble.d_xxx
               (call mulDouble# $TestArithDouble.x_xxx)
               (cast (-> (Double#) Double#) $TestArithDouble.d_xxx))
            (=
               $TestArithDouble.d_xxx
               (call $TestArithDouble.d_xxx $TestArithDouble.y_xxx)
               (cast Double# $TestArithDouble.d_xxx))))
      (define
         (show $TestArithDouble.x_xxx)
         (-> (Double#) Any#)
         (=
            $TestArithDouble.d_xxx
            (=
               $TestArithDouble.d_xxx
               (call toStringDouble# $TestArithDouble.x_xxx)
               (cast String# $TestArithDouble.d_xxx))
            (=
               $TestArithDouble.d_xxx
               (call String# $TestArithDouble.d_xxx)
               (cast Any# $TestArithDouble.d_xxx))))
      (define
         (traceShowId $TestArithDouble.x_xxx)
         (-> (Double#) Double#)
         (=
            $TestArithDouble.d_xxx
            (=
               $TestArithDouble.d_xxx
               (=
                  $TestArithDouble.d_xxx
                  (call show $TestArithDouble.x_xxx)
                  (cast Any# $TestArithDouble.d_xxx))
               (=
                  $TestArithDouble.d_xxx
                  (call putStrLn $TestArithDouble.d_xxx)
                  (cast (sum (con Tuple#)) $TestArithDouble.d_xxx)))
            $TestArithDouble.x_xxx))
      (define
         (neg $TestArithDouble.x_xxx)
         (-> (Double#) Double#)
         (=
            $TestArithDouble.d_xxx
            (=
               $TestArithDouble.d_xxx
               (call subDouble# 0.0_f64)
               (cast (-> (Double#) Double#) $TestArithDouble.d_xxx))
            (=
               $TestArithDouble.d_xxx
               (call $TestArithDouble.d_xxx $TestArithDouble.x_xxx)
               (cast Double# $TestArithDouble.d_xxx))))
      (define
         (mul $TestArithDouble.x_xxx)
         (-> (Double#) (-> (Double#) Double#))
         (let
            (($TestArithDouble.let_xxx
                (-> (Double#) Double#)
                (fun
                   ($TestArithDouble.y_xxx)
                   (direct
                      $TestArithDouble.mul_curry_xxx
                      $TestArithDouble.x_xxx
                      $TestArithDouble.y_xxx))))
            $TestArithDouble.let_xxx))
      (define
         (add $TestArithDouble.x_xxx)
         (-> (Double#) (-> (Double#) Double#))
         (let
            (($TestArithDouble.let_xxx
                (-> (Double#) Double#)
                (fun
                   ($TestArithDouble.y_xxx)
                   (direct
                      $TestArithDouble.add_curry_xxx
                      $TestArithDouble.x_xxx
                      $TestArithDouble.y_xxx))))
            $TestArithDouble.let_xxx))
      (define
         (+ $TestArithDouble.x_xxx)
         (-> (Double#) (-> (Double#) Double#))
         (let
            (($TestArithDouble.let_xxx
                (-> (Double#) Double#)
                (fun
                   ($TestArithDouble.y_xxx)
                   (direct
                      $TestArithDouble.+_curry_xxx
                      $TestArithDouble.x_xxx
                      $TestArithDouble.y_xxx))))
            $TestArithDouble.let_xxx))
      (define
         (* $TestArithDouble.x_xxx)
         (-> (Double#) (-> (Double#) Double#))
         (let
            (($TestArithDouble.let_xxx
                (-> (Double#) Double#)
                (fun
                   ($TestArithDouble.y_xxx)
                   (direct
                      $TestArithDouble.*_curry_xxx
                      $TestArithDouble.x_xxx
                      $TestArithDouble.y_xxx))))
            $TestArithDouble.let_xxx))
      (define
         (f $TestArithDouble.x_xxx)
         (-> (Double#) Double#)
         (=
            $TestArithDouble.d_xxx
            (=
               $TestArithDouble.d_xxx
               (=
                  $TestArithDouble.d_xxx
                  (=
                     $TestArithDouble.d_xxx
                     (call + $TestArithDouble.x_xxx)
                     (cast (-> (Double#) Double#) $TestArithDouble.d_xxx))
                  (=
                     $TestArithDouble.d_xxx
                     (call $TestArithDouble.d_xxx 0.0_f64)
                     (cast Double# $TestArithDouble.d_xxx)))
               (=
                  $TestArithDouble.d_xxx
                  (call * $TestArithDouble.d_xxx)
                  (cast (-> (Double#) Double#) $TestArithDouble.d_xxx)))
            (=
               $TestArithDouble.d_xxx
               (call $TestArithDouble.d_xxx $TestArithDouble.x_xxx)
               (cast Double# $TestArithDouble.d_xxx))))
      (define
         (main $TestArithDouble.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $TestArithDouble.d_xxx
            (=
               $TestArithDouble.d_xxx
               (=
                  $TestArithDouble.d_xxx
                  (call f 0.5_f64)
                  (cast Double# $TestArithDouble.d_xxx))
               (=
                  $TestArithDouble.d_xxx
                  (call show $TestArithDouble.d_xxx)
                  (cast Any# $TestArithDouble.d_xxx)))
            (=
               $TestArithDouble.d_xxx
               (call putStrLn $TestArithDouble.d_xxx)
               (cast (sum (con Tuple#)) $TestArithDouble.d_xxx)))))
   ())