(((define
     eventually
     (Record#
        (bind (-> (Any#) (-> ((-> (Any#) Any#)) Any#)))
        (return (-> (Any#) Any#)))
     (=
        $Eventually.d_xxx
        (let
           (($Eventually.record_xxx
               (Record#
                  (bind (-> (Any#) (-> ((-> (Any#) Any#)) Any#)))
                  (return (-> (Any#) Any#)))
               (record (bind eventuallyBind) (return Done))))
           $Eventually.record_xxx)
        $Eventually.d_xxx))
    (define
       comp
       Any#
       (=
          $Eventually.d_xxx
          (=
             $Eventually.d_xxx
             (=
                $Eventually.d_xxx
                (=
                   $Eventually.d_xxx
                   (call bind eventually)
                   (cast
                      (-> (Any#) (-> ((-> ((sum (con Tuple#))) Any#)) Any#))
                      $Eventually.d_xxx))
                (=
                   $Eventually.d_xxx
                   (=
                      $Eventually.d_xxx
                      (let
                         (($Eventually.fun_xxx
                             (-> ((sum (con Tuple#))) Any#)
                             (fun
                                ($Eventually.$__xxx)
                                (=
                                   $Eventually.d_xxx
                                   (=
                                      $Eventually.d_xxx
                                      (=
                                         $Eventually.d_xxx
                                         (call String# "1")
                                         (cast Any# $Eventually.d_xxx))
                                      (=
                                         $Eventually.d_xxx
                                         (call printString $Eventually.d_xxx)
                                         (cast
                                            (sum (con Tuple#))
                                            $Eventually.d_xxx)))
                                   (=
                                      $Eventually.cast_xxx
                                      (cast Any# $Eventually.d_xxx)
                                      (=
                                         $Eventually.d_xxx
                                         (call Done $Eventually.cast_xxx)
                                         (cast Any# $Eventually.d_xxx)))))))
                         $Eventually.fun_xxx)
                      (=
                         $Eventually.d_xxx
                         (call NotYetDone $Eventually.d_xxx)
                         (cast Any# $Eventually.d_xxx)))
                   (=
                      $Eventually.d_xxx
                      (call $Eventually.d_xxx $Eventually.d_xxx)
                      (cast
                         (-> ((-> ((sum (con Tuple#))) Any#)) Any#)
                         $Eventually.d_xxx))))
             (=
                $Eventually.d_xxx
                (let
                   (($Eventually.fun_xxx
                       (-> ((sum (con Tuple#))) Any#)
                       (fun
                          ($Eventually.__xxx)
                          (=
                             $Eventually.d_xxx
                             (=
                                $Eventually.d_xxx
                                (=
                                   $Eventually.d_xxx
                                   (call bind eventually)
                                   (cast
                                      (->
                                         (Any#)
                                         (->
                                            ((-> ((sum (con Tuple#))) Any#))
                                            Any#))
                                      $Eventually.d_xxx))
                                (=
                                   $Eventually.d_xxx
                                   (=
                                      $Eventually.d_xxx
                                      (let
                                         (($Eventually.fun_xxx
                                             (-> ((sum (con Tuple#))) Any#)
                                             (fun
                                                ($Eventually.$__xxx)
                                                (=
                                                   $Eventually.d_xxx
                                                   (=
                                                      $Eventually.d_xxx
                                                      (=
                                                         $Eventually.d_xxx
                                                         (call String# "2")
                                                         (cast
                                                            Any#
                                                            $Eventually.d_xxx))
                                                      (=
                                                         $Eventually.d_xxx
                                                         (call
                                                            printString
                                                            $Eventually.d_xxx)
                                                         (cast
                                                            (sum (con Tuple#))
                                                            $Eventually.d_xxx)))
                                                   (=
                                                      $Eventually.cast_xxx
                                                      (cast
                                                         Any#
                                                         $Eventually.d_xxx)
                                                      (=
                                                         $Eventually.d_xxx
                                                         (call
                                                            Done
                                                            $Eventually.cast_xxx)
                                                         (cast
                                                            Any#
                                                            $Eventually.d_xxx)))))))
                                         $Eventually.fun_xxx)
                                      (=
                                         $Eventually.d_xxx
                                         (call NotYetDone $Eventually.d_xxx)
                                         (cast Any# $Eventually.d_xxx)))
                                   (=
                                      $Eventually.d_xxx
                                      (call $Eventually.d_xxx $Eventually.d_xxx)
                                      (cast
                                         (->
                                            ((-> ((sum (con Tuple#))) Any#))
                                            Any#)
                                         $Eventually.d_xxx))))
                             (=
                                $Eventually.d_xxx
                                (let
                                   (($Eventually.fun_xxx
                                       (-> ((sum (con Tuple#))) Any#)
                                       (fun
                                          ($Eventually.__xxx)
                                          (=
                                             $Eventually.d_xxx
                                             (=
                                                $Eventually.d_xxx
                                                (call return eventually)
                                                (cast
                                                   (-> (Any#) Any#)
                                                   $Eventually.d_xxx))
                                             (=
                                                $Eventually.d_xxx
                                                (=
                                                   $Eventually.d_xxx
                                                   (call Int32# 3_i32)
                                                   (cast Any# $Eventually.d_xxx))
                                                (=
                                                   $Eventually.d_xxx
                                                   (call
                                                      $Eventually.d_xxx
                                                      $Eventually.d_xxx)
                                                   (cast Any# $Eventually.d_xxx)))))))
                                   $Eventually.fun_xxx)
                                (=
                                   $Eventually.d_xxx
                                   (call $Eventually.d_xxx $Eventually.d_xxx)
                                   (cast Any# $Eventually.d_xxx)))))))
                   $Eventually.fun_xxx)
                (=
                   $Eventually.d_xxx
                   (call $Eventually.d_xxx $Eventually.d_xxx)
                   (cast Any# $Eventually.d_xxx))))
          $Eventually.d_xxx)))
   ((define
       ($Eventually.eventuallyBind_curry_xxx
          $Eventually.done_xxx
          $Eventually.k_xxx)
       (-> (Any# (-> (Any#) Any#)) Any#)
       (match
          (cast
             (sum
                (con test/testcases/malgo/Eventually.mlg.Done Any#)
                (con
                   test/testcases/malgo/Eventually.mlg.NotYetDone
                   (-> ((sum (con Tuple#))) Any#)))
             $Eventually.done_xxx)
          (unpack
             (con test/testcases/malgo/Eventually.mlg.Done Any#)
             ($Eventually.p_xxx)
             (=
                $Eventually.d_xxx
                (call $Eventually.k_xxx $Eventually.p_xxx)
                (cast Any# $Eventually.d_xxx)))
          (unpack
             (con
                test/testcases/malgo/Eventually.mlg.NotYetDone
                (-> ((sum (con Tuple#))) Any#))
             ($Eventually.p_xxx)
             (=
                $Eventually.d_xxx
                (let
                   (($Eventually.fun_xxx
                       (-> ((sum (con Tuple#))) Any#)
                       (fun
                          ($Eventually.$__xxx)
                          (=
                             $Eventually.d_xxx
                             (=
                                $Eventually.d_xxx
                                (=
                                   $Eventually.d_xxx
                                   (let
                                      (($Eventually.let_xxx
                                          (sum (con Tuple#))
                                          (pack (sum (con Tuple#)) (con Tuple#))))
                                      $Eventually.let_xxx)
                                   (=
                                      $Eventually.d_xxx
                                      (call $Eventually.p_xxx $Eventually.d_xxx)
                                      (cast Any# $Eventually.d_xxx)))
                                (=
                                   $Eventually.d_xxx
                                   (call eventuallyBind $Eventually.d_xxx)
                                   (cast
                                      (-> ((-> (Any#) Any#)) Any#)
                                      $Eventually.d_xxx)))
                             (=
                                $Eventually.d_xxx
                                (call $Eventually.d_xxx $Eventually.k_xxx)
                                (cast Any# $Eventually.d_xxx))))))
                   $Eventually.fun_xxx)
                (=
                   $Eventually.d_xxx
                   (call NotYetDone $Eventually.d_xxx)
                   (cast Any# $Eventually.d_xxx))))))
      (define
         (Done $Eventually.p_xxx)
         (-> (Any#) Any#)
         (let
            (($Eventually.let_xxx
                (sum
                   (con test/testcases/malgo/Eventually.mlg.Done Any#)
                   (con
                      test/testcases/malgo/Eventually.mlg.NotYetDone
                      (-> ((sum (con Tuple#))) Any#)))
                (pack
                   (sum
                      (con test/testcases/malgo/Eventually.mlg.Done Any#)
                      (con
                         test/testcases/malgo/Eventually.mlg.NotYetDone
                         (-> ((sum (con Tuple#))) Any#)))
                   (con test/testcases/malgo/Eventually.mlg.Done Any#)
                   $Eventually.p_xxx)))
            (cast Any# $Eventually.let_xxx)))
      (define
         (NotYetDone $Eventually.p_xxx)
         (-> ((-> ((sum (con Tuple#))) Any#)) Any#)
         (let
            (($Eventually.let_xxx
                (sum
                   (con test/testcases/malgo/Eventually.mlg.Done Any#)
                   (con
                      test/testcases/malgo/Eventually.mlg.NotYetDone
                      (-> ((sum (con Tuple#))) Any#)))
                (pack
                   (sum
                      (con test/testcases/malgo/Eventually.mlg.Done Any#)
                      (con
                         test/testcases/malgo/Eventually.mlg.NotYetDone
                         (-> ((sum (con Tuple#))) Any#)))
                   (con
                      test/testcases/malgo/Eventually.mlg.NotYetDone
                      (-> ((sum (con Tuple#))) Any#))
                   $Eventually.p_xxx)))
            (cast Any# $Eventually.let_xxx)))
      (define
         (step $Eventually.done_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum
                  (con test/testcases/malgo/Eventually.mlg.Done Any#)
                  (con
                     test/testcases/malgo/Eventually.mlg.NotYetDone
                     (-> ((sum (con Tuple#))) Any#)))
               $Eventually.done_xxx)
            (unpack
               (con test/testcases/malgo/Eventually.mlg.Done Any#)
               ($Eventually.p_xxx)
               (=
                  $Eventually.d_xxx
                  (call Done $Eventually.p_xxx)
                  (cast Any# $Eventually.d_xxx)))
            (unpack
               (con
                  test/testcases/malgo/Eventually.mlg.NotYetDone
                  (-> ((sum (con Tuple#))) Any#))
               ($Eventually.p_xxx)
               (=
                  $Eventually.d_xxx
                  (let
                     (($Eventually.let_xxx
                         (sum (con Tuple#))
                         (pack (sum (con Tuple#)) (con Tuple#))))
                     $Eventually.let_xxx)
                  (=
                     $Eventually.d_xxx
                     (call $Eventually.p_xxx $Eventually.d_xxx)
                     (cast Any# $Eventually.d_xxx))))))
      (define
         (return $Eventually.record_xxx)
         (->
            ((Record#
                (bind (-> (Any#) (-> ((-> (Any#) Any#)) Any#)))
                (return (-> (Any#) Any#))))
            (-> (Any#) Any#))
         (match
            $Eventually.record_xxx
            (open
               ((bind $Eventually.p_xxx) (return $Eventually.p_xxx))
               $Eventually.p_xxx)))
      (define
         (eventuallyBind $Eventually.done_xxx)
         (-> (Any#) (-> ((-> (Any#) Any#)) Any#))
         (let
            (($Eventually.let_xxx
                (-> ((-> (Any#) Any#)) Any#)
                (fun
                   ($Eventually.k_xxx)
                   (direct
                      $Eventually.eventuallyBind_curry_xxx
                      $Eventually.done_xxx
                      $Eventually.k_xxx))))
            $Eventually.let_xxx))
      (define
         (bind $Eventually.record_xxx)
         (->
            ((Record#
                (bind (-> (Any#) (-> ((-> (Any#) Any#)) Any#)))
                (return (-> (Any#) Any#))))
            (-> (Any#) (-> ((-> (Any#) Any#)) Any#)))
         (match
            $Eventually.record_xxx
            (open
               ((bind $Eventually.p_xxx) (return $Eventually.p_xxx))
               $Eventually.p_xxx)))
      (define
         (main $Eventually.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $Eventually.d_xxx
            (=
               $Eventually.d_xxx
               (=
                  $Eventually.d_xxx
                  (call |> comp)
                  (cast (-> ((-> (Any#) Any#)) Any#) $Eventually.d_xxx))
               (=
                  $Eventually.d_xxx
                  (call $Eventually.d_xxx step)
                  (cast Any# $Eventually.d_xxx)))
            (=
               $Eventually.d_xxx
               (=
                  $Eventually.d_xxx
                  (=
                     $Eventually.d_xxx
                     (=
                        $Eventually.d_xxx
                        (=
                           $Eventually.d_xxx
                           (=
                              $Eventually.d_xxx
                              (=
                                 $Eventually.d_xxx
                                 (=
                                    $Eventually.d_xxx
                                    (call |> comp)
                                    (cast
                                       (-> ((-> (Any#) Any#)) Any#)
                                       $Eventually.d_xxx))
                                 (=
                                    $Eventually.d_xxx
                                    (call $Eventually.d_xxx step)
                                    (cast Any# $Eventually.d_xxx)))
                              (=
                                 $Eventually.d_xxx
                                 (call |> $Eventually.d_xxx)
                                 (cast
                                    (-> ((-> (Any#) Any#)) Any#)
                                    $Eventually.d_xxx)))
                           (=
                              $Eventually.d_xxx
                              (call $Eventually.d_xxx step)
                              (cast Any# $Eventually.d_xxx)))
                        (=
                           $Eventually.d_xxx
                           (call |> $Eventually.d_xxx)
                           (cast (-> ((-> (Any#) Any#)) Any#) $Eventually.d_xxx)))
                     (=
                        $Eventually.d_xxx
                        (call $Eventually.d_xxx step)
                        (cast Any# $Eventually.d_xxx)))
                  (=
                     $Eventually.d_xxx
                     (call |> $Eventually.d_xxx)
                     (cast
                        (-> ((-> (Any#) (sum (con Tuple#)))) (sum (con Tuple#)))
                        $Eventually.d_xxx)))
               (=
                  $Eventually.d_xxx
                  (let
                     (($Eventually.fun_xxx
                         (-> (Any#) (sum (con Tuple#)))
                         (fun
                            ($Eventually.done_xxx)
                            (match
                               (cast
                                  (sum
                                     (con
                                        test/testcases/malgo/Eventually.mlg.Done
                                        Any#)
                                     (con
                                        test/testcases/malgo/Eventually.mlg.NotYetDone
                                        (-> ((sum (con Tuple#))) Any#)))
                                  $Eventually.done_xxx)
                               (unpack
                                  (con
                                     test/testcases/malgo/Eventually.mlg.Done
                                     Any#)
                                  ($Eventually.p_xxx)
                                  (=
                                     $Eventually.d_xxx
                                     (=
                                        $Eventually.d_xxx
                                        (call toStringInt32 $Eventually.p_xxx)
                                        (cast Any# $Eventually.d_xxx))
                                     (=
                                        $Eventually.d_xxx
                                        (call printString $Eventually.d_xxx)
                                        (cast
                                           (sum (con Tuple#))
                                           $Eventually.d_xxx))))
                               (unpack
                                  (con
                                     test/testcases/malgo/Eventually.mlg.NotYetDone
                                     (-> ((sum (con Tuple#))) Any#))
                                  ($Eventually.p_xxx)
                                  (=
                                     $Eventually.d_xxx
                                     (=
                                        $Eventually.d_xxx
                                        (call String# "not yet")
                                        (cast Any# $Eventually.d_xxx))
                                     (=
                                        $Eventually.d_xxx
                                        (call printString $Eventually.d_xxx)
                                        (cast
                                           (sum (con Tuple#))
                                           $Eventually.d_xxx))))))))
                     $Eventually.fun_xxx)
                  (=
                     $Eventually.d_xxx
                     (call $Eventually.d_xxx $Eventually.d_xxx)
                     (cast (sum (con Tuple#)) $Eventually.d_xxx)))))))
   ())