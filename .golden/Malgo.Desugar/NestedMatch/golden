(()
   ((define
       (False)
       (-> () Any#)
       (let
          (($NestedMatch.let_xxx
              (sum
                 (con test/testcases/malgo/NestedMatch.mlg.False)
                 (con test/testcases/malgo/NestedMatch.mlg.True))
              (pack
                 (sum
                    (con test/testcases/malgo/NestedMatch.mlg.False)
                    (con test/testcases/malgo/NestedMatch.mlg.True))
                 (con test/testcases/malgo/NestedMatch.mlg.False))))
          (cast Any# $NestedMatch.let_xxx)))
      (define
         (True)
         (-> () Any#)
         (let
            (($NestedMatch.let_xxx
                (sum
                   (con test/testcases/malgo/NestedMatch.mlg.False)
                   (con test/testcases/malgo/NestedMatch.mlg.True))
                (pack
                   (sum
                      (con test/testcases/malgo/NestedMatch.mlg.False)
                      (con test/testcases/malgo/NestedMatch.mlg.True))
                   (con test/testcases/malgo/NestedMatch.mlg.True))))
            (cast Any# $NestedMatch.let_xxx)))
      (define
         (False1)
         (-> () Any#)
         (let
            (($NestedMatch.let_xxx
                (sum
                   (con test/testcases/malgo/NestedMatch.mlg.False1)
                   (con test/testcases/malgo/NestedMatch.mlg.True1))
                (pack
                   (sum
                      (con test/testcases/malgo/NestedMatch.mlg.False1)
                      (con test/testcases/malgo/NestedMatch.mlg.True1))
                   (con test/testcases/malgo/NestedMatch.mlg.False1))))
            (cast Any# $NestedMatch.let_xxx)))
      (define
         (True1)
         (-> () Any#)
         (let
            (($NestedMatch.let_xxx
                (sum
                   (con test/testcases/malgo/NestedMatch.mlg.False1)
                   (con test/testcases/malgo/NestedMatch.mlg.True1))
                (pack
                   (sum
                      (con test/testcases/malgo/NestedMatch.mlg.False1)
                      (con test/testcases/malgo/NestedMatch.mlg.True1))
                   (con test/testcases/malgo/NestedMatch.mlg.True1))))
            (cast Any# $NestedMatch.let_xxx)))
      (define
         (False2)
         (-> () Any#)
         (let
            (($NestedMatch.let_xxx
                (sum
                   (con test/testcases/malgo/NestedMatch.mlg.False2)
                   (con test/testcases/malgo/NestedMatch.mlg.True2))
                (pack
                   (sum
                      (con test/testcases/malgo/NestedMatch.mlg.False2)
                      (con test/testcases/malgo/NestedMatch.mlg.True2))
                   (con test/testcases/malgo/NestedMatch.mlg.False2))))
            (cast Any# $NestedMatch.let_xxx)))
      (define
         (True2)
         (-> () Any#)
         (let
            (($NestedMatch.let_xxx
                (sum
                   (con test/testcases/malgo/NestedMatch.mlg.False2)
                   (con test/testcases/malgo/NestedMatch.mlg.True2))
                (pack
                   (sum
                      (con test/testcases/malgo/NestedMatch.mlg.False2)
                      (con test/testcases/malgo/NestedMatch.mlg.True2))
                   (con test/testcases/malgo/NestedMatch.mlg.True2))))
            (cast Any# $NestedMatch.let_xxx)))
      (define
         (malgo_print_string $NestedMatch.p_xxx)
         (-> (String#) (sum (con Tuple#)))
         (raw
            malgo_print_string
            (-> (String#) (sum (con Tuple#)))
            $NestedMatch.p_xxx))
      (define
         (malgo_exit_failure $NestedMatch.p_xxx)
         (-> ((sum (con Tuple#))) Any#)
         (raw
            malgo_exit_failure
            (-> ((sum (con Tuple#))) Any#)
            $NestedMatch.p_xxx))
      (define
         (main $NestedMatch.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $NestedMatch.d_xxx
            (let
               (($NestedMatch.fun_xxx
                   (-> (Any#) (sum (con Tuple#)))
                   (fun
                      ($NestedMatch.true_xxx)
                      (match
                         (cast
                            (sum
                               (con test/testcases/malgo/NestedMatch.mlg.False)
                               (con test/testcases/malgo/NestedMatch.mlg.True))
                            $NestedMatch.true_xxx)
                         (unpack
                            (con test/testcases/malgo/NestedMatch.mlg.False)
                            ()
                            (=
                               $NestedMatch.d_xxx
                               (let
                                  (($NestedMatch.let_xxx
                                      (sum (con Tuple#))
                                      (pack (sum (con Tuple#)) (con Tuple#))))
                                  $NestedMatch.let_xxx)
                               (=
                                  $NestedMatch.d_xxx
                                  (call malgo_exit_failure $NestedMatch.d_xxx)
                                  (cast (sum (con Tuple#)) $NestedMatch.d_xxx))))
                         (unpack
                            (con test/testcases/malgo/NestedMatch.mlg.True)
                            ()
                            (=
                               $NestedMatch.d_xxx
                               (call malgo_print_string "OK")
                               (cast (sum (con Tuple#)) $NestedMatch.d_xxx)))))))
               $NestedMatch.fun_xxx)
            (=
               $NestedMatch.d_xxx
               (=
                  $NestedMatch.d_xxx
                  (let
                     (($NestedMatch.fun_xxx
                         (-> (Any#) Any#)
                         (fun
                            ($NestedMatch.true1_xxx)
                            (match
                               (cast
                                  (sum
                                     (con
                                        test/testcases/malgo/NestedMatch.mlg.False1)
                                     (con
                                        test/testcases/malgo/NestedMatch.mlg.True1))
                                  $NestedMatch.true1_xxx)
                               (unpack
                                  (con
                                     test/testcases/malgo/NestedMatch.mlg.False1)
                                  ()
                                  (direct True))
                               (unpack
                                  (con test/testcases/malgo/NestedMatch.mlg.True1)
                                  ()
                                  (direct False))))))
                     $NestedMatch.fun_xxx)
                  (=
                     $NestedMatch.d_xxx
                     (=
                        $NestedMatch.d_xxx
                        (let
                           (($NestedMatch.fun_xxx
                               (-> (Any#) Any#)
                               (fun
                                  ($NestedMatch.true2_xxx)
                                  (match
                                     (cast
                                        (sum
                                           (con
                                              test/testcases/malgo/NestedMatch.mlg.False2)
                                           (con
                                              test/testcases/malgo/NestedMatch.mlg.True2))
                                        $NestedMatch.true2_xxx)
                                     (unpack
                                        (con
                                           test/testcases/malgo/NestedMatch.mlg.False2)
                                        ()
                                        (direct True1))
                                     (unpack
                                        (con
                                           test/testcases/malgo/NestedMatch.mlg.True2)
                                        ()
                                        (direct False1))))))
                           $NestedMatch.fun_xxx)
                        (=
                           $NestedMatch.d_xxx
                           (direct True2)
                           (=
                              $NestedMatch.d_xxx
                              (call $NestedMatch.d_xxx $NestedMatch.d_xxx)
                              (cast Any# $NestedMatch.d_xxx))))
                     (=
                        $NestedMatch.d_xxx
                        (call $NestedMatch.d_xxx $NestedMatch.d_xxx)
                        (cast Any# $NestedMatch.d_xxx))))
               (=
                  $NestedMatch.d_xxx
                  (call $NestedMatch.d_xxx $NestedMatch.d_xxx)
                  (cast (sum (con Tuple#)) $NestedMatch.d_xxx))))))
   ((extern malgo_print_string (-> (String#) (sum (con Tuple#))))
      (extern malgo_exit_failure (-> ((sum (con Tuple#))) Any#))))