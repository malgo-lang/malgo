(()
   ((define
       (succ $TestDot.int64#_xxx)
       (-> (Any#) Any#)
       (match
          (cast
             (sum (con runtime/malgo/Builtin.mlg.Int64# Int64#))
             $TestDot.int64#_xxx)
          (unpack
             (con runtime/malgo/Builtin.mlg.Int64# Int64#)
             ($TestDot.p_xxx)
             (=
                $TestDot.d_xxx
                (=
                   $TestDot.d_xxx
                   (=
                      $TestDot.d_xxx
                      (call addInt64# $TestDot.p_xxx)
                      (cast (-> (Int64#) Int64#) $TestDot.d_xxx))
                   (=
                      $TestDot.d_xxx
                      (call $TestDot.d_xxx 1_i64)
                      (cast Int64# $TestDot.d_xxx)))
                (=
                   $TestDot.d_xxx
                   (call Int64# $TestDot.d_xxx)
                   (cast Any# $TestDot.d_xxx))))))
      (define
         (main $TestDot.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $TestDot.d_xxx
            (=
               $TestDot.d_xxx
               (=
                  $TestDot.d_xxx
                  (=
                     $TestDot.d_xxx
                     (call << succ)
                     (cast
                        (-> ((-> (Any#) Any#)) (-> (Any#) Any#))
                        $TestDot.d_xxx))
                  (=
                     $TestDot.d_xxx
                     (call $TestDot.d_xxx succ)
                     (cast (-> (Any#) Any#) $TestDot.d_xxx)))
               (=
                  $TestDot.d_xxx
                  (=
                     $TestDot.d_xxx
                     (call Int64# 0_i64)
                     (cast Any# $TestDot.d_xxx))
                  (=
                     $TestDot.d_xxx
                     (call $TestDot.d_xxx $TestDot.d_xxx)
                     (cast Any# $TestDot.d_xxx))))
            (=
               $TestDot.d_xxx
               (call printInt64 $TestDot.d_xxx)
               (cast (sum (con Tuple#)) $TestDot.d_xxx)))))
   ())