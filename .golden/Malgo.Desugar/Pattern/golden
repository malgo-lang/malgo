(()
   ((define
       (main $Pattern.$__xxx)
       (-> ((sum (con Tuple#))) (sum (con Tuple#)))
       (=
          $Pattern.d_xxx
          (= $Pattern.d_xxx (call String# "OK") (cast Any# $Pattern.d_xxx))
          (=
             $Pattern.d_xxx
             (call putStrLn $Pattern.d_xxx)
             (cast (sum (con Tuple#)) $Pattern.d_xxx))))
      (define
         (isNil $Pattern.nil_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
               $Pattern.nil_xxx)
            (unpack (con runtime/malgo/Prelude.mlg.Nil) () (direct True))
            (unpack
               (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
               ($Pattern.p_xxx $Pattern.p_xxx)
               (direct False)))))
   ())