(()
   ((define
       ($Prelude.<<_curry_xxx $Prelude.f_xxx $Prelude.g_xxx)
       (-> ((-> (Any#) Any#) (-> (Any#) Any#)) (-> (Any#) Any#))
       (let
          (($Prelude.fun_xxx
              (-> (Any#) Any#)
              (fun
                 ($Prelude.x_xxx)
                 (=
                    $Prelude.d_xxx
                    (=
                       $Prelude.d_xxx
                       (call $Prelude.g_xxx $Prelude.x_xxx)
                       (cast Any# $Prelude.d_xxx))
                    (=
                       $Prelude.d_xxx
                       (call $Prelude.f_xxx $Prelude.d_xxx)
                       (cast Any# $Prelude.d_xxx))))))
          $Prelude.fun_xxx))
      (define
         ($Prelude.<|_curry_xxx $Prelude.f_xxx $Prelude.x_xxx)
         (-> ((-> (Any#) Any#) Any#) Any#)
         (=
            $Prelude.d_xxx
            (call $Prelude.f_xxx $Prelude.x_xxx)
            (cast Any# $Prelude.d_xxx)))
      (define
         ($Prelude.takeWhileString_curry_xxx $Prelude.pred_xxx $Prelude.str_xxx)
         (-> ((-> (Any#) Any#) Any#) Any#)
         (=
            $Prelude.d_xxx
            (=
               $Prelude.d_xxx
               (=
                  $Prelude.d_xxx
                  (call headString $Prelude.str_xxx)
                  (cast Any# $Prelude.d_xxx))
               (=
                  $Prelude.d_xxx
                  (call case $Prelude.d_xxx)
                  (cast (-> ((-> (Any#) Any#)) Any#) $Prelude.d_xxx)))
            (=
               $Prelude.d_xxx
               (let
                  (($Prelude.fun_xxx
                      (-> (Any#) Any#)
                      (fun
                         ($Prelude.nothing_xxx)
                         (match
                            (cast
                               (sum
                                  (con runtime/malgo/Prelude.mlg.Nothing)
                                  (con runtime/malgo/Prelude.mlg.Just Any#))
                               $Prelude.nothing_xxx)
                            (unpack
                               (con runtime/malgo/Prelude.mlg.Nothing)
                               ()
                               $Prelude.str_xxx)
                            (unpack
                               (con runtime/malgo/Prelude.mlg.Just Any#)
                               ($Prelude.p_xxx)
                               (=
                                  $Prelude.d_xxx
                                  (=
                                     $Prelude.d_xxx
                                     (=
                                        $Prelude.d_xxx
                                        (=
                                           $Prelude.d_xxx
                                           (call $Prelude.pred_xxx $Prelude.p_xxx)
                                           (cast Any# $Prelude.d_xxx))
                                        (=
                                           $Prelude.d_xxx
                                           (call if $Prelude.d_xxx)
                                           (cast
                                              (->
                                                 ((-> ((sum (con Tuple#))) Any#))
                                                 (->
                                                    ((->
                                                        ((sum (con Tuple#)))
                                                        Any#))
                                                    Any#))
                                              $Prelude.d_xxx)))
                                     (=
                                        $Prelude.d_xxx
                                        (let
                                           (($Prelude.fun_xxx
                                               (-> ((sum (con Tuple#))) Any#)
                                               (fun
                                                  ($Prelude.$__xxx)
                                                  (=
                                                     $Prelude.d_xxx
                                                     (=
                                                        $Prelude.d_xxx
                                                        (call
                                                           consString
                                                           $Prelude.p_xxx)
                                                        (cast
                                                           (-> (Any#) Any#)
                                                           $Prelude.d_xxx))
                                                     (=
                                                        $Prelude.d_xxx
                                                        (=
                                                           $Prelude.d_xxx
                                                           (=
                                                              $Prelude.d_xxx
                                                              (call
                                                                 takeWhileString
                                                                 $Prelude.pred_xxx)
                                                              (cast
                                                                 (-> (Any#) Any#)
                                                                 $Prelude.d_xxx))
                                                           (=
                                                              $Prelude.d_xxx
                                                              (=
                                                                 $Prelude.d_xxx
                                                                 (call
                                                                    tailString
                                                                    $Prelude.str_xxx)
                                                                 (cast
                                                                    Any#
                                                                    $Prelude.d_xxx))
                                                              (=
                                                                 $Prelude.d_xxx
                                                                 (call
                                                                    $Prelude.d_xxx
                                                                    $Prelude.d_xxx)
                                                                 (cast
                                                                    Any#
                                                                    $Prelude.d_xxx))))
                                                        (=
                                                           $Prelude.d_xxx
                                                           (call
                                                              $Prelude.d_xxx
                                                              $Prelude.d_xxx)
                                                           (cast
                                                              Any#
                                                              $Prelude.d_xxx)))))))
                                           $Prelude.fun_xxx)
                                        (=
                                           $Prelude.d_xxx
                                           (call $Prelude.d_xxx $Prelude.d_xxx)
                                           (cast
                                              (->
                                                 ((-> ((sum (con Tuple#))) Any#))
                                                 Any#)
                                              $Prelude.d_xxx))))
                                  (=
                                     $Prelude.d_xxx
                                     (let
                                        (($Prelude.fun_xxx
                                            (-> ((sum (con Tuple#))) Any#)
                                            (fun
                                               ($Prelude.$__xxx)
                                               (=
                                                  $Prelude.d_xxx
                                                  (call String# "")
                                                  (cast Any# $Prelude.d_xxx)))))
                                        $Prelude.fun_xxx)
                                     (=
                                        $Prelude.d_xxx
                                        (call $Prelude.d_xxx $Prelude.d_xxx)
                                        (cast Any# $Prelude.d_xxx)))))))))
                  $Prelude.fun_xxx)
               (=
                  $Prelude.d_xxx
                  (call $Prelude.d_xxx $Prelude.d_xxx)
                  (cast Any# $Prelude.d_xxx)))))
      (define
         ($Prelude.dropWhileString_curry_xxx $Prelude.pred_xxx $Prelude.str_xxx)
         (-> ((-> (Any#) Any#) Any#) Any#)
         (=
            $Prelude.d_xxx
            (=
               $Prelude.d_xxx
               (=
                  $Prelude.d_xxx
                  (call headString $Prelude.str_xxx)
                  (cast Any# $Prelude.d_xxx))
               (=
                  $Prelude.d_xxx
                  (call case $Prelude.d_xxx)
                  (cast (-> ((-> (Any#) Any#)) Any#) $Prelude.d_xxx)))
            (=
               $Prelude.d_xxx
               (let
                  (($Prelude.fun_xxx
                      (-> (Any#) Any#)
                      (fun
                         ($Prelude.nothing_xxx)
                         (match
                            (cast
                               (sum
                                  (con runtime/malgo/Prelude.mlg.Nothing)
                                  (con runtime/malgo/Prelude.mlg.Just Any#))
                               $Prelude.nothing_xxx)
                            (unpack
                               (con runtime/malgo/Prelude.mlg.Nothing)
                               ()
                               $Prelude.str_xxx)
                            (unpack
                               (con runtime/malgo/Prelude.mlg.Just Any#)
                               ($Prelude.p_xxx)
                               (=
                                  $Prelude.d_xxx
                                  (=
                                     $Prelude.d_xxx
                                     (=
                                        $Prelude.d_xxx
                                        (=
                                           $Prelude.d_xxx
                                           (call $Prelude.pred_xxx $Prelude.p_xxx)
                                           (cast Any# $Prelude.d_xxx))
                                        (=
                                           $Prelude.d_xxx
                                           (call if $Prelude.d_xxx)
                                           (cast
                                              (->
                                                 ((-> ((sum (con Tuple#))) Any#))
                                                 (->
                                                    ((->
                                                        ((sum (con Tuple#)))
                                                        Any#))
                                                    Any#))
                                              $Prelude.d_xxx)))
                                     (=
                                        $Prelude.d_xxx
                                        (let
                                           (($Prelude.fun_xxx
                                               (-> ((sum (con Tuple#))) Any#)
                                               (fun
                                                  ($Prelude.$__xxx)
                                                  (=
                                                     $Prelude.d_xxx
                                                     (=
                                                        $Prelude.d_xxx
                                                        (call
                                                           dropWhileString
                                                           $Prelude.pred_xxx)
                                                        (cast
                                                           (-> (Any#) Any#)
                                                           $Prelude.d_xxx))
                                                     (=
                                                        $Prelude.d_xxx
                                                        (=
                                                           $Prelude.d_xxx
                                                           (call
                                                              tailString
                                                              $Prelude.str_xxx)
                                                           (cast
                                                              Any#
                                                              $Prelude.d_xxx))
                                                        (=
                                                           $Prelude.d_xxx
                                                           (call
                                                              $Prelude.d_xxx
                                                              $Prelude.d_xxx)
                                                           (cast
                                                              Any#
                                                              $Prelude.d_xxx)))))))
                                           $Prelude.fun_xxx)
                                        (=
                                           $Prelude.d_xxx
                                           (call $Prelude.d_xxx $Prelude.d_xxx)
                                           (cast
                                              (->
                                                 ((-> ((sum (con Tuple#))) Any#))
                                                 Any#)
                                              $Prelude.d_xxx))))
                                  (=
                                     $Prelude.d_xxx
                                     (let
                                        (($Prelude.fun_xxx
                                            (-> ((sum (con Tuple#))) Any#)
                                            (fun
                                               ($Prelude.$__xxx)
                                               $Prelude.str_xxx)))
                                        $Prelude.fun_xxx)
                                     (=
                                        $Prelude.d_xxx
                                        (call $Prelude.d_xxx $Prelude.d_xxx)
                                        (cast Any# $Prelude.d_xxx)))))))))
                  $Prelude.fun_xxx)
               (=
                  $Prelude.d_xxx
                  (call $Prelude.d_xxx $Prelude.d_xxx)
                  (cast Any# $Prelude.d_xxx)))))
      (define
         ($Prelude.case_curry_xxx $Prelude.x_xxx $Prelude.f_xxx)
         (-> (Any# (-> (Any#) Any#)) Any#)
         (=
            $Prelude.d_xxx
            (call $Prelude.f_xxx $Prelude.x_xxx)
            (cast Any# $Prelude.d_xxx)))
      (define
         ($Prelude.const_curry_xxx $Prelude.a_xxx $Prelude.__xxx)
         (-> (Any# Any#) Any#)
         $Prelude.a_xxx)
      (define
         ($Prelude.foldl_curry_xxx $Prelude.__xxx $Prelude.z_xxx $Prelude.nil_xxx)
         (-> ((-> (Any#) (-> (Any#) Any#)) Any# Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
               $Prelude.nil_xxx)
            (unpack (con runtime/malgo/Prelude.mlg.Nil) () $Prelude.z_xxx)
            (unpack
               (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               (=
                  $Prelude.d_xxx
                  (=
                     $Prelude.d_xxx
                     (=
                        $Prelude.d_xxx
                        (call foldl $Prelude.__xxx)
                        (cast (-> (Any#) (-> (Any#) Any#)) $Prelude.d_xxx))
                     (=
                        $Prelude.d_xxx
                        (=
                           $Prelude.d_xxx
                           (=
                              $Prelude.d_xxx
                              (call $Prelude.__xxx $Prelude.z_xxx)
                              (cast (-> (Any#) Any#) $Prelude.d_xxx))
                           (=
                              $Prelude.d_xxx
                              (call $Prelude.d_xxx $Prelude.p_xxx)
                              (cast Any# $Prelude.d_xxx)))
                        (=
                           $Prelude.d_xxx
                           (call $Prelude.d_xxx $Prelude.d_xxx)
                           (cast (-> (Any#) Any#) $Prelude.d_xxx))))
                  (=
                     $Prelude.d_xxx
                     (call $Prelude.d_xxx $Prelude.p_xxx)
                     (cast Any# $Prelude.d_xxx))))))
      (define
         ($Prelude.unless_curry_xxx
            $Prelude.c_xxx
            $Prelude.tValue_xxx
            $Prelude.f_xxx)
         (-> (Any# Any# (-> ((sum (con Tuple#))) Any#)) Any#)
         (=
            $Prelude.d_xxx
            (=
               $Prelude.d_xxx
               (=
                  $Prelude.d_xxx
                  (call if $Prelude.c_xxx)
                  (cast
                     (->
                        ((-> ((sum (con Tuple#))) Any#))
                        (-> ((-> ((sum (con Tuple#))) Any#)) Any#))
                     $Prelude.d_xxx))
               (=
                  $Prelude.d_xxx
                  (let
                     (($Prelude.fun_xxx
                         (-> ((sum (con Tuple#))) Any#)
                         (fun ($Prelude.$__xxx) $Prelude.tValue_xxx)))
                     $Prelude.fun_xxx)
                  (=
                     $Prelude.d_xxx
                     (call $Prelude.d_xxx $Prelude.d_xxx)
                     (cast
                        (-> ((-> ((sum (con Tuple#))) Any#)) Any#)
                        $Prelude.d_xxx))))
            (=
               $Prelude.d_xxx
               (call $Prelude.d_xxx $Prelude.f_xxx)
               (cast Any# $Prelude.d_xxx))))
      (define
         ($Prelude.if_curry_xxx $Prelude.true_xxx $Prelude.t_xxx $Prelude.__xxx)
         (->
            (Any# (-> ((sum (con Tuple#))) Any#) (-> ((sum (con Tuple#))) Any#))
            Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Builtin.mlg.False)
                  (con runtime/malgo/Builtin.mlg.True))
               $Prelude.true_xxx)
            (unpack
               (con runtime/malgo/Builtin.mlg.False)
               ()
               (=
                  $Prelude.d_xxx
                  (let
                     (($Prelude.let_xxx
                         (sum (con Tuple#))
                         (pack (sum (con Tuple#)) (con Tuple#))))
                     $Prelude.let_xxx)
                  (=
                     $Prelude.d_xxx
                     (call $Prelude.__xxx $Prelude.d_xxx)
                     (cast Any# $Prelude.d_xxx))))
            (unpack
               (con runtime/malgo/Builtin.mlg.True)
               ()
               (=
                  $Prelude.d_xxx
                  (let
                     (($Prelude.let_xxx
                         (sum (con Tuple#))
                         (pack (sum (con Tuple#)) (con Tuple#))))
                     $Prelude.let_xxx)
                  (=
                     $Prelude.d_xxx
                     (call $Prelude.t_xxx $Prelude.d_xxx)
                     (cast Any# $Prelude.d_xxx))))))
      (define
         ($Prelude.mapList_curry_xxx $Prelude.__xxx $Prelude.nil_xxx)
         (-> ((-> (Any#) Any#) Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
               $Prelude.nil_xxx)
            (unpack (con runtime/malgo/Prelude.mlg.Nil) () (direct Nil))
            (unpack
               (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               (=
                  $Prelude.d_xxx
                  (=
                     $Prelude.d_xxx
                     (=
                        $Prelude.d_xxx
                        (call $Prelude.__xxx $Prelude.p_xxx)
                        (cast Any# $Prelude.d_xxx))
                     (=
                        $Prelude.d_xxx
                        (call Cons $Prelude.d_xxx)
                        (cast (-> (Any#) Any#) $Prelude.d_xxx)))
                  (=
                     $Prelude.d_xxx
                     (=
                        $Prelude.d_xxx
                        (=
                           $Prelude.d_xxx
                           (call mapList $Prelude.__xxx)
                           (cast (-> (Any#) Any#) $Prelude.d_xxx))
                        (=
                           $Prelude.d_xxx
                           (call $Prelude.d_xxx $Prelude.p_xxx)
                           (cast Any# $Prelude.d_xxx)))
                     (=
                        $Prelude.d_xxx
                        (call $Prelude.d_xxx $Prelude.d_xxx)
                        (cast Any# $Prelude.d_xxx)))))))
      (define
         ($Prelude.punctuate_curry_xxx $Prelude.__xxx $Prelude.nil_xxx)
         (-> (Any# Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
               $Prelude.nil_xxx)
            (unpack (con runtime/malgo/Prelude.mlg.Nil) () (direct Nil))
            (unpack
               (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               (match
                  (cast
                     (sum
                        (con runtime/malgo/Prelude.mlg.Nil)
                        (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
                     $Prelude.p_xxx)
                  (unpack
                     (con runtime/malgo/Prelude.mlg.Nil)
                     ()
                     (=
                        $Prelude.d_xxx
                        (=
                           $Prelude.d_xxx
                           (call Cons $Prelude.p_xxx)
                           (cast (-> (Any#) Any#) $Prelude.d_xxx))
                        (=
                           $Prelude.d_xxx
                           (direct Nil)
                           (=
                              $Prelude.d_xxx
                              (call $Prelude.d_xxx $Prelude.d_xxx)
                              (cast Any# $Prelude.d_xxx)))))
                  (unpack
                     (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
                     ($Prelude.p_xxx $Prelude.p_xxx)
                     (=
                        $Prelude.d_xxx
                        (=
                           $Prelude.d_xxx
                           (call Cons $Prelude.p_xxx)
                           (cast (-> (Any#) Any#) $Prelude.d_xxx))
                        (=
                           $Prelude.d_xxx
                           (=
                              $Prelude.d_xxx
                              (=
                                 $Prelude.d_xxx
                                 (call Cons $Prelude.__xxx)
                                 (cast (-> (Any#) Any#) $Prelude.d_xxx))
                              (=
                                 $Prelude.d_xxx
                                 (=
                                    $Prelude.d_xxx
                                    (=
                                       $Prelude.d_xxx
                                       (call punctuate $Prelude.__xxx)
                                       (cast (-> (Any#) Any#) $Prelude.d_xxx))
                                    (=
                                       $Prelude.d_xxx
                                       (call $Prelude.d_xxx $Prelude.p_xxx)
                                       (cast Any# $Prelude.d_xxx)))
                                 (=
                                    $Prelude.d_xxx
                                    (call $Prelude.d_xxx $Prelude.d_xxx)
                                    (cast Any# $Prelude.d_xxx))))
                           (=
                              $Prelude.d_xxx
                              (call $Prelude.d_xxx $Prelude.d_xxx)
                              (cast Any# $Prelude.d_xxx)))))))))
      (define
         ($Prelude.|>_curry_xxx $Prelude.x_xxx $Prelude.f_xxx)
         (-> (Any# (-> (Any#) Any#)) Any#)
         (=
            $Prelude.d_xxx
            (call $Prelude.f_xxx $Prelude.x_xxx)
            (cast Any# $Prelude.d_xxx)))
      (define
         ($Prelude.Cons_curry_xxx $Prelude.p_xxx $Prelude.p_xxx)
         (-> (Any# Any#) Any#)
         (let
            (($Prelude.let_xxx
                (sum
                   (con runtime/malgo/Prelude.mlg.Nil)
                   (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
                (pack
                   (sum
                      (con runtime/malgo/Prelude.mlg.Nil)
                      (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
                   (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
                   $Prelude.p_xxx
                   $Prelude.p_xxx)))
            (cast Any# $Prelude.let_xxx)))
      (define
         (Nothing)
         (-> () Any#)
         (let
            (($Prelude.let_xxx
                (sum
                   (con runtime/malgo/Prelude.mlg.Nothing)
                   (con runtime/malgo/Prelude.mlg.Just Any#))
                (pack
                   (sum
                      (con runtime/malgo/Prelude.mlg.Nothing)
                      (con runtime/malgo/Prelude.mlg.Just Any#))
                   (con runtime/malgo/Prelude.mlg.Nothing))))
            (cast Any# $Prelude.let_xxx)))
      (define
         (Just $Prelude.p_xxx)
         (-> (Any#) Any#)
         (let
            (($Prelude.let_xxx
                (sum
                   (con runtime/malgo/Prelude.mlg.Nothing)
                   (con runtime/malgo/Prelude.mlg.Just Any#))
                (pack
                   (sum
                      (con runtime/malgo/Prelude.mlg.Nothing)
                      (con runtime/malgo/Prelude.mlg.Just Any#))
                   (con runtime/malgo/Prelude.mlg.Just Any#)
                   $Prelude.p_xxx)))
            (cast Any# $Prelude.let_xxx)))
      (define
         (Nil)
         (-> () Any#)
         (let
            (($Prelude.let_xxx
                (sum
                   (con runtime/malgo/Prelude.mlg.Nil)
                   (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
                (pack
                   (sum
                      (con runtime/malgo/Prelude.mlg.Nil)
                      (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
                   (con runtime/malgo/Prelude.mlg.Nil))))
            (cast Any# $Prelude.let_xxx)))
      (define
         (Cons $Prelude.p_xxx)
         (-> (Any#) (-> (Any#) Any#))
         (let
            (($Prelude.let_xxx
                (-> (Any#) Any#)
                (fun
                   ($Prelude.p_xxx)
                   (direct $Prelude.Cons_curry_xxx $Prelude.p_xxx $Prelude.p_xxx))))
            $Prelude.let_xxx))
      (define
         (|> $Prelude.x_xxx)
         (-> (Any#) (-> ((-> (Any#) Any#)) Any#))
         (let
            (($Prelude.let_xxx
                (-> ((-> (Any#) Any#)) Any#)
                (fun
                   ($Prelude.f_xxx)
                   (direct $Prelude.|>_curry_xxx $Prelude.x_xxx $Prelude.f_xxx))))
            $Prelude.let_xxx))
      (define
         (tail $Prelude.cons_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
               $Prelude.cons_xxx)
            (unpack
               (con runtime/malgo/Prelude.mlg.Nil)
               ()
               (=
                  $Prelude.d_xxx
                  (let
                     (($Prelude.let_xxx
                         (sum (con Tuple#))
                         (pack (sum (con Tuple#)) (con Tuple#))))
                     $Prelude.let_xxx)
                  (=
                     $Prelude.d_xxx
                     (call exitFailure $Prelude.d_xxx)
                     (cast Any# $Prelude.d_xxx))))
            (unpack
               (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               $Prelude.p_xxx)))
      (define
         (snd $Prelude.tuple_xxx)
         (-> ((sum (con Tuple# Any# Any#))) Any#)
         (match
            $Prelude.tuple_xxx
            (unpack
               (con Tuple# Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               $Prelude.p_xxx)))
      (define
         (putStrLn $Prelude.str_xxx)
         (-> (Any#) (sum (con Tuple#)))
         (=
            $Prelude.d_xxx
            (=
               $Prelude.d_xxx
               (call printString $Prelude.str_xxx)
               (cast (sum (con Tuple#)) $Prelude.d_xxx))
            (=
               $Prelude.d_xxx
               (let
                  (($Prelude.let_xxx
                      (sum (con Tuple#))
                      (pack (sum (con Tuple#)) (con Tuple#))))
                  $Prelude.let_xxx)
               (=
                  $Prelude.cast_xxx
                  (cast Any# $Prelude.d_xxx)
                  (=
                     $Prelude.d_xxx
                     (call newline $Prelude.cast_xxx)
                     (cast (sum (con Tuple#)) $Prelude.d_xxx))))))
      (define
         (putStr $Prelude.str_xxx)
         (-> (Any#) (sum (con Tuple#)))
         (=
            $Prelude.d_xxx
            (call printString $Prelude.str_xxx)
            (cast (sum (con Tuple#)) $Prelude.d_xxx)))
      (define
         (punctuate $Prelude.__xxx)
         (-> (Any#) (-> (Any#) Any#))
         (let
            (($Prelude.let_xxx
                (-> (Any#) Any#)
                (fun
                   ($Prelude.nil_xxx)
                   (direct
                      $Prelude.punctuate_curry_xxx
                      $Prelude.__xxx
                      $Prelude.nil_xxx))))
            $Prelude.let_xxx))
      (define
         (printInt64 $Prelude.i_xxx)
         (-> (Any#) (sum (con Tuple#)))
         (=
            $Prelude.d_xxx
            (=
               $Prelude.d_xxx
               (call toStringInt64 $Prelude.i_xxx)
               (cast Any# $Prelude.d_xxx))
            (=
               $Prelude.d_xxx
               (call printString $Prelude.d_xxx)
               (cast (sum (con Tuple#)) $Prelude.d_xxx))))
      (define
         (printInt32 $Prelude.i_xxx)
         (-> (Any#) (sum (con Tuple#)))
         (=
            $Prelude.d_xxx
            (=
               $Prelude.d_xxx
               (call toStringInt32 $Prelude.i_xxx)
               (cast Any# $Prelude.d_xxx))
            (=
               $Prelude.d_xxx
               (call printString $Prelude.d_xxx)
               (cast (sum (con Tuple#)) $Prelude.d_xxx))))
      (define
         (mapList $Prelude.__xxx)
         (-> ((-> (Any#) Any#)) (-> (Any#) Any#))
         (let
            (($Prelude.let_xxx
                (-> (Any#) Any#)
                (fun
                   ($Prelude.nil_xxx)
                   (direct
                      $Prelude.mapList_curry_xxx
                      $Prelude.__xxx
                      $Prelude.nil_xxx))))
            $Prelude.let_xxx))
      (define
         (listToString $Prelude.nil_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
               $Prelude.nil_xxx)
            (unpack
               (con runtime/malgo/Prelude.mlg.Nil)
               ()
               (= $Prelude.d_xxx (call String# "") (cast Any# $Prelude.d_xxx)))
            (unpack
               (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               (=
                  $Prelude.d_xxx
                  (=
                     $Prelude.d_xxx
                     (call consString $Prelude.p_xxx)
                     (cast (-> (Any#) Any#) $Prelude.d_xxx))
                  (=
                     $Prelude.d_xxx
                     (=
                        $Prelude.d_xxx
                        (call listToString $Prelude.p_xxx)
                        (cast Any# $Prelude.d_xxx))
                     (=
                        $Prelude.d_xxx
                        (call $Prelude.d_xxx $Prelude.d_xxx)
                        (cast Any# $Prelude.d_xxx)))))))
      (define
         (isWhiteSpace $Prelude.char#_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum (con runtime/malgo/Builtin.mlg.Char# Char#))
               $Prelude.char#_xxx)
            (unpack
               (con runtime/malgo/Builtin.mlg.Char# Char#)
               ($Prelude.p_xxx)
               (match
                  $Prelude.p_xxx
                  (exact ' ' (direct True))
                  (exact '\n' (direct True))
                  (exact '\r' (direct True))
                  (exact '\t' (direct True))
                  (bind $Prelude.__xxx Char# (direct False))))))
      (define
         (if $Prelude.true_xxx)
         (->
            (Any#)
            (->
               ((-> ((sum (con Tuple#))) Any#))
               (-> ((-> ((sum (con Tuple#))) Any#)) Any#)))
         (let
            (($Prelude.let_xxx
                (->
                   ((-> ((sum (con Tuple#))) Any#))
                   (-> ((-> ((sum (con Tuple#))) Any#)) Any#))
                (fun
                   ($Prelude.t_xxx)
                   (let
                      (($Prelude.let_xxx
                          (-> ((-> ((sum (con Tuple#))) Any#)) Any#)
                          (fun
                             ($Prelude.__xxx)
                             (direct
                                $Prelude.if_curry_xxx
                                $Prelude.true_xxx
                                $Prelude.t_xxx
                                $Prelude.__xxx))))
                      $Prelude.let_xxx))))
            $Prelude.let_xxx))
      (define
         (tailString $Prelude.str_xxx)
         (-> (Any#) Any#)
         (=
            $Prelude.d_xxx
            (=
               $Prelude.d_xxx
               (=
                  $Prelude.d_xxx
                  (=
                     $Prelude.d_xxx
                     (=
                        $Prelude.d_xxx
                        (call eqString $Prelude.str_xxx)
                        (cast (-> (Any#) Any#) $Prelude.d_xxx))
                     (=
                        $Prelude.d_xxx
                        (=
                           $Prelude.d_xxx
                           (call String# "")
                           (cast Any# $Prelude.d_xxx))
                        (=
                           $Prelude.d_xxx
                           (call $Prelude.d_xxx $Prelude.d_xxx)
                           (cast Any# $Prelude.d_xxx))))
                  (=
                     $Prelude.d_xxx
                     (call if $Prelude.d_xxx)
                     (cast
                        (->
                           ((-> ((sum (con Tuple#))) Any#))
                           (-> ((-> ((sum (con Tuple#))) Any#)) Any#))
                        $Prelude.d_xxx)))
               (=
                  $Prelude.d_xxx
                  (let
                     (($Prelude.fun_xxx
                         (-> ((sum (con Tuple#))) Any#)
                         (fun ($Prelude.$__xxx) $Prelude.str_xxx)))
                     $Prelude.fun_xxx)
                  (=
                     $Prelude.d_xxx
                     (call $Prelude.d_xxx $Prelude.d_xxx)
                     (cast
                        (-> ((-> ((sum (con Tuple#))) Any#)) Any#)
                        $Prelude.d_xxx))))
            (=
               $Prelude.d_xxx
               (let
                  (($Prelude.fun_xxx
                      (-> ((sum (con Tuple#))) Any#)
                      (fun
                         ($Prelude.$__xxx)
                         (=
                            $Prelude.d_xxx
                            (=
                               $Prelude.d_xxx
                               (=
                                  $Prelude.d_xxx
                                  (call substring $Prelude.str_xxx)
                                  (cast
                                     (-> (Any#) (-> (Any#) Any#))
                                     $Prelude.d_xxx))
                               (=
                                  $Prelude.d_xxx
                                  (=
                                     $Prelude.d_xxx
                                     (call Int64# 1_i64)
                                     (cast Any# $Prelude.d_xxx))
                                  (=
                                     $Prelude.d_xxx
                                     (call $Prelude.d_xxx $Prelude.d_xxx)
                                     (cast (-> (Any#) Any#) $Prelude.d_xxx))))
                            (=
                               $Prelude.d_xxx
                               (=
                                  $Prelude.d_xxx
                                  (call lengthString $Prelude.str_xxx)
                                  (cast Any# $Prelude.d_xxx))
                               (=
                                  $Prelude.d_xxx
                                  (call $Prelude.d_xxx $Prelude.d_xxx)
                                  (cast Any# $Prelude.d_xxx)))))))
                  $Prelude.fun_xxx)
               (=
                  $Prelude.d_xxx
                  (call $Prelude.d_xxx $Prelude.d_xxx)
                  (cast Any# $Prelude.d_xxx)))))
      (define
         (unless $Prelude.c_xxx)
         (-> (Any#) (-> (Any#) (-> ((-> ((sum (con Tuple#))) Any#)) Any#)))
         (let
            (($Prelude.let_xxx
                (-> (Any#) (-> ((-> ((sum (con Tuple#))) Any#)) Any#))
                (fun
                   ($Prelude.tValue_xxx)
                   (let
                      (($Prelude.let_xxx
                          (-> ((-> ((sum (con Tuple#))) Any#)) Any#)
                          (fun
                             ($Prelude.f_xxx)
                             (direct
                                $Prelude.unless_curry_xxx
                                $Prelude.c_xxx
                                $Prelude.tValue_xxx
                                $Prelude.f_xxx))))
                      $Prelude.let_xxx))))
            $Prelude.let_xxx))
      (define (identity $Prelude.x_xxx) (-> (Any#) Any#) $Prelude.x_xxx)
      (define
         (headString $Prelude.str_xxx)
         (-> (Any#) Any#)
         (=
            $Prelude.d_xxx
            (=
               $Prelude.d_xxx
               (=
                  $Prelude.d_xxx
                  (=
                     $Prelude.d_xxx
                     (=
                        $Prelude.d_xxx
                        (call eqString $Prelude.str_xxx)
                        (cast (-> (Any#) Any#) $Prelude.d_xxx))
                     (=
                        $Prelude.d_xxx
                        (=
                           $Prelude.d_xxx
                           (call String# "")
                           (cast Any# $Prelude.d_xxx))
                        (=
                           $Prelude.d_xxx
                           (call $Prelude.d_xxx $Prelude.d_xxx)
                           (cast Any# $Prelude.d_xxx))))
                  (=
                     $Prelude.d_xxx
                     (call if $Prelude.d_xxx)
                     (cast
                        (->
                           ((-> ((sum (con Tuple#))) Any#))
                           (-> ((-> ((sum (con Tuple#))) Any#)) Any#))
                        $Prelude.d_xxx)))
               (=
                  $Prelude.d_xxx
                  (let
                     (($Prelude.fun_xxx
                         (-> ((sum (con Tuple#))) Any#)
                         (fun ($Prelude.$__xxx) (direct Nothing))))
                     $Prelude.fun_xxx)
                  (=
                     $Prelude.d_xxx
                     (call $Prelude.d_xxx $Prelude.d_xxx)
                     (cast
                        (-> ((-> ((sum (con Tuple#))) Any#)) Any#)
                        $Prelude.d_xxx))))
            (=
               $Prelude.d_xxx
               (let
                  (($Prelude.fun_xxx
                      (-> ((sum (con Tuple#))) Any#)
                      (fun
                         ($Prelude.$__xxx)
                         (=
                            $Prelude.d_xxx
                            (=
                               $Prelude.d_xxx
                               (=
                                  $Prelude.d_xxx
                                  (=
                                     $Prelude.d_xxx
                                     (call Int64# 0_i64)
                                     (cast Any# $Prelude.d_xxx))
                                  (=
                                     $Prelude.d_xxx
                                     (call atString $Prelude.d_xxx)
                                     (cast (-> (Any#) Any#) $Prelude.d_xxx)))
                               (=
                                  $Prelude.d_xxx
                                  (call $Prelude.d_xxx $Prelude.str_xxx)
                                  (cast Any# $Prelude.d_xxx)))
                            (=
                               $Prelude.d_xxx
                               (call Just $Prelude.d_xxx)
                               (cast Any# $Prelude.d_xxx))))))
                  $Prelude.fun_xxx)
               (=
                  $Prelude.d_xxx
                  (call $Prelude.d_xxx $Prelude.d_xxx)
                  (cast Any# $Prelude.d_xxx)))))
      (define
         (head $Prelude.cons_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
               $Prelude.cons_xxx)
            (unpack
               (con runtime/malgo/Prelude.mlg.Nil)
               ()
               (=
                  $Prelude.d_xxx
                  (let
                     (($Prelude.let_xxx
                         (sum (con Tuple#))
                         (pack (sum (con Tuple#)) (con Tuple#))))
                     $Prelude.let_xxx)
                  (=
                     $Prelude.d_xxx
                     (call exitFailure $Prelude.d_xxx)
                     (cast Any# $Prelude.d_xxx))))
            (unpack
               (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               $Prelude.p_xxx)))
      (define
         (fst $Prelude.tuple_xxx)
         (-> ((sum (con Tuple# Any# Any#))) Any#)
         (match
            $Prelude.tuple_xxx
            (unpack
               (con Tuple# Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               $Prelude.p_xxx)))
      (define
         (foldl $Prelude.__xxx)
         (-> ((-> (Any#) (-> (Any#) Any#))) (-> (Any#) (-> (Any#) Any#)))
         (let
            (($Prelude.let_xxx
                (-> (Any#) (-> (Any#) Any#))
                (fun
                   ($Prelude.z_xxx)
                   (let
                      (($Prelude.let_xxx
                          (-> (Any#) Any#)
                          (fun
                             ($Prelude.nil_xxx)
                             (direct
                                $Prelude.foldl_curry_xxx
                                $Prelude.__xxx
                                $Prelude.z_xxx
                                $Prelude.nil_xxx))))
                      $Prelude.let_xxx))))
            $Prelude.let_xxx))
      (define
         (const $Prelude.a_xxx)
         (-> (Any#) (-> (Any#) Any#))
         (let
            (($Prelude.let_xxx
                (-> (Any#) Any#)
                (fun
                   ($Prelude.__xxx)
                   (direct $Prelude.const_curry_xxx $Prelude.a_xxx $Prelude.__xxx))))
            $Prelude.let_xxx))
      (define
         (cond $Prelude.nil_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con
                     runtime/malgo/Prelude.mlg.Cons
                     (sum (con Tuple# Any# (-> ((sum (con Tuple#))) Any#)))
                     Any#))
               $Prelude.nil_xxx)
            (unpack
               (con runtime/malgo/Prelude.mlg.Nil)
               ()
               (=
                  $Prelude.d_xxx
                  (=
                     $Prelude.d_xxx
                     (call String# "no branch")
                     (cast Any# $Prelude.d_xxx))
                  (=
                     $Prelude.d_xxx
                     (call panic $Prelude.d_xxx)
                     (cast Any# $Prelude.d_xxx))))
            (unpack
               (con
                  runtime/malgo/Prelude.mlg.Cons
                  (sum (con Tuple# Any# (-> ((sum (con Tuple#))) Any#)))
                  Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               (match
                  $Prelude.p_xxx
                  (unpack
                     (con Tuple# Any# (-> ((sum (con Tuple#))) Any#))
                     ($Prelude.p_xxx $Prelude.p_xxx)
                     (match
                        (cast
                           (sum
                              (con runtime/malgo/Builtin.mlg.False)
                              (con runtime/malgo/Builtin.mlg.True))
                           $Prelude.p_xxx)
                        (unpack
                           (con runtime/malgo/Builtin.mlg.False)
                           ()
                           (=
                              $Prelude.d_xxx
                              (call cond $Prelude.p_xxx)
                              (cast Any# $Prelude.d_xxx)))
                        (unpack
                           (con runtime/malgo/Builtin.mlg.True)
                           ()
                           (=
                              $Prelude.d_xxx
                              (let
                                 (($Prelude.let_xxx
                                     (sum (con Tuple#))
                                     (pack (sum (con Tuple#)) (con Tuple#))))
                                 $Prelude.let_xxx)
                              (=
                                 $Prelude.d_xxx
                                 (call $Prelude.p_xxx $Prelude.d_xxx)
                                 (cast Any# $Prelude.d_xxx))))))))))
      (define
         (concatString $Prelude.nil_xxx)
         (-> (Any#) Any#)
         (match
            (cast
               (sum
                  (con runtime/malgo/Prelude.mlg.Nil)
                  (con runtime/malgo/Prelude.mlg.Cons Any# Any#))
               $Prelude.nil_xxx)
            (unpack
               (con runtime/malgo/Prelude.mlg.Nil)
               ()
               (= $Prelude.d_xxx (call String# "") (cast Any# $Prelude.d_xxx)))
            (unpack
               (con runtime/malgo/Prelude.mlg.Cons Any# Any#)
               ($Prelude.p_xxx $Prelude.p_xxx)
               (=
                  $Prelude.d_xxx
                  (=
                     $Prelude.d_xxx
                     (call appendString $Prelude.p_xxx)
                     (cast (-> (Any#) Any#) $Prelude.d_xxx))
                  (=
                     $Prelude.d_xxx
                     (=
                        $Prelude.d_xxx
                        (call concatString $Prelude.p_xxx)
                        (cast Any# $Prelude.d_xxx))
                     (=
                        $Prelude.d_xxx
                        (call $Prelude.d_xxx $Prelude.d_xxx)
                        (cast Any# $Prelude.d_xxx)))))))
      (define
         (case $Prelude.x_xxx)
         (-> (Any#) (-> ((-> (Any#) Any#)) Any#))
         (let
            (($Prelude.let_xxx
                (-> ((-> (Any#) Any#)) Any#)
                (fun
                   ($Prelude.f_xxx)
                   (direct $Prelude.case_curry_xxx $Prelude.x_xxx $Prelude.f_xxx))))
            $Prelude.let_xxx))
      (define
         (dropWhileString $Prelude.pred_xxx)
         (-> ((-> (Any#) Any#)) (-> (Any#) Any#))
         (let
            (($Prelude.let_xxx
                (-> (Any#) Any#)
                (fun
                   ($Prelude.str_xxx)
                   (direct
                      $Prelude.dropWhileString_curry_xxx
                      $Prelude.pred_xxx
                      $Prelude.str_xxx))))
            $Prelude.let_xxx))
      (define
         (takeWhileString $Prelude.pred_xxx)
         (-> ((-> (Any#) Any#)) (-> (Any#) Any#))
         (let
            (($Prelude.let_xxx
                (-> (Any#) Any#)
                (fun
                   ($Prelude.str_xxx)
                   (direct
                      $Prelude.takeWhileString_curry_xxx
                      $Prelude.pred_xxx
                      $Prelude.str_xxx))))
            $Prelude.let_xxx))
      (define
         (<| $Prelude.f_xxx)
         (-> ((-> (Any#) Any#)) (-> (Any#) Any#))
         (let
            (($Prelude.let_xxx
                (-> (Any#) Any#)
                (fun
                   ($Prelude.x_xxx)
                   (direct $Prelude.<|_curry_xxx $Prelude.f_xxx $Prelude.x_xxx))))
            $Prelude.let_xxx))
      (define
         (<< $Prelude.f_xxx)
         (-> ((-> (Any#) Any#)) (-> ((-> (Any#) Any#)) (-> (Any#) Any#)))
         (let
            (($Prelude.let_xxx
                (-> ((-> (Any#) Any#)) (-> (Any#) Any#))
                (fun
                   ($Prelude.g_xxx)
                   (direct $Prelude.<<_curry_xxx $Prelude.f_xxx $Prelude.g_xxx))))
            $Prelude.let_xxx)))
   ())