(()
   ((define
       (main $HelloImport.$__xxx)
       (-> ((sum (con Tuple#))) (sum (con Tuple#)))
       (=
          $HelloImport.d_xxx
          (=
             $HelloImport.d_xxx
             (=
                $HelloImport.d_xxx
                (call String# "hello")
                (cast Any# $HelloImport.d_xxx))
             (=
                $HelloImport.d_xxx
                (call putStr $HelloImport.d_xxx)
                (cast (sum (con Tuple#)) $HelloImport.d_xxx)))
          (=
             $HelloImport.d_xxx
             (=
                $HelloImport.cast_xxx
                (cast Any# putStrLn)
                (=
                   $HelloImport.d_xxx
                   (call |> $HelloImport.cast_xxx)
                   (cast
                      (->
                         ((-> ((-> (Any#) (sum (con Tuple#)))) (sum (con Tuple#))))
                         (sum (con Tuple#)))
                      $HelloImport.d_xxx)))
             (=
                $HelloImport.d_xxx
                (let
                   (($HelloImport.fun_xxx
                       (-> ((-> (Any#) (sum (con Tuple#)))) (sum (con Tuple#)))
                       (fun
                          ($HelloImport.f_xxx)
                          (=
                             $HelloImport.d_xxx
                             (=
                                $HelloImport.d_xxx
                                (call String# " world")
                                (cast Any# $HelloImport.d_xxx))
                             (=
                                $HelloImport.d_xxx
                                (call $HelloImport.f_xxx $HelloImport.d_xxx)
                                (cast (sum (con Tuple#)) $HelloImport.d_xxx))))))
                   $HelloImport.fun_xxx)
                (=
                   $HelloImport.d_xxx
                   (call $HelloImport.d_xxx $HelloImport.d_xxx)
                   (cast (sum (con Tuple#)) $HelloImport.d_xxx)))))))
   ())