(()
   ((define
       (A)
       (-> () Any#)
       (let
          (($TuplePattern.let_xxx
              (sum
                 (con test/testcases/malgo/TuplePattern.mlg.A)
                 (con test/testcases/malgo/TuplePattern.mlg.B)
                 (con test/testcases/malgo/TuplePattern.mlg.C))
              (pack
                 (sum
                    (con test/testcases/malgo/TuplePattern.mlg.A)
                    (con test/testcases/malgo/TuplePattern.mlg.B)
                    (con test/testcases/malgo/TuplePattern.mlg.C))
                 (con test/testcases/malgo/TuplePattern.mlg.A))))
          (cast Any# $TuplePattern.let_xxx)))
      (define
         (B)
         (-> () Any#)
         (let
            (($TuplePattern.let_xxx
                (sum
                   (con test/testcases/malgo/TuplePattern.mlg.A)
                   (con test/testcases/malgo/TuplePattern.mlg.B)
                   (con test/testcases/malgo/TuplePattern.mlg.C))
                (pack
                   (sum
                      (con test/testcases/malgo/TuplePattern.mlg.A)
                      (con test/testcases/malgo/TuplePattern.mlg.B)
                      (con test/testcases/malgo/TuplePattern.mlg.C))
                   (con test/testcases/malgo/TuplePattern.mlg.B))))
            (cast Any# $TuplePattern.let_xxx)))
      (define
         (C)
         (-> () Any#)
         (let
            (($TuplePattern.let_xxx
                (sum
                   (con test/testcases/malgo/TuplePattern.mlg.A)
                   (con test/testcases/malgo/TuplePattern.mlg.B)
                   (con test/testcases/malgo/TuplePattern.mlg.C))
                (pack
                   (sum
                      (con test/testcases/malgo/TuplePattern.mlg.A)
                      (con test/testcases/malgo/TuplePattern.mlg.B)
                      (con test/testcases/malgo/TuplePattern.mlg.C))
                   (con test/testcases/malgo/TuplePattern.mlg.C))))
            (cast Any# $TuplePattern.let_xxx)))
      (define
         (main $TuplePattern.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $TuplePattern.d_xxx
            (=
               $TuplePattern.d_xxx
               (=
                  $TuplePattern.d_xxx
                  (direct A)
                  (=
                     $TuplePattern.d_xxx
                     (direct B)
                     (let
                        (($TuplePattern.let_xxx
                            (sum (con Tuple# Any# Any#))
                            (pack
                               (sum (con Tuple# Any# Any#))
                               (con Tuple# Any# Any#)
                               $TuplePattern.d_xxx
                               $TuplePattern.d_xxx)))
                        $TuplePattern.let_xxx)))
               (=
                  $TuplePattern.cast_xxx
                  (cast Any# $TuplePattern.d_xxx)
                  (=
                     $TuplePattern.d_xxx
                     (call |> $TuplePattern.cast_xxx)
                     (cast
                        (->
                           ((-> ((sum (con Tuple# Any# Any#))) (sum (con Tuple#))))
                           (sum (con Tuple#)))
                        $TuplePattern.d_xxx))))
            (=
               $TuplePattern.d_xxx
               (let
                  (($TuplePattern.fun_xxx
                      (-> ((sum (con Tuple# Any# Any#))) (sum (con Tuple#)))
                      (fun
                         ($TuplePattern.tuple_xxx)
                         (match
                            $TuplePattern.tuple_xxx
                            (unpack
                               (con Tuple# Any# Any#)
                               ($TuplePattern.p_xxx $TuplePattern.p_xxx)
                               (match
                                  (cast
                                     (sum
                                        (con
                                           test/testcases/malgo/TuplePattern.mlg.A)
                                        (con
                                           test/testcases/malgo/TuplePattern.mlg.B)
                                        (con
                                           test/testcases/malgo/TuplePattern.mlg.C))
                                     $TuplePattern.p_xxx)
                                  (unpack
                                     (con test/testcases/malgo/TuplePattern.mlg.A)
                                     ()
                                     (=
                                        $TuplePattern.d_xxx
                                        (=
                                           $TuplePattern.d_xxx
                                           (call String# "A")
                                           (cast Any# $TuplePattern.d_xxx))
                                        (=
                                           $TuplePattern.d_xxx
                                           (call printString $TuplePattern.d_xxx)
                                           (cast
                                              (sum (con Tuple#))
                                              $TuplePattern.d_xxx))))
                                  (unpack
                                     (con test/testcases/malgo/TuplePattern.mlg.B)
                                     ()
                                     (let
                                        (($TuplePattern.let_xxx
                                            (sum (con Tuple#))
                                            (pack (sum (con Tuple#)) (con Tuple#))))
                                        $TuplePattern.let_xxx))
                                  (unpack
                                     (con test/testcases/malgo/TuplePattern.mlg.C)
                                     ()
                                     (let
                                        (($TuplePattern.let_xxx
                                            (sum (con Tuple#))
                                            (pack (sum (con Tuple#)) (con Tuple#))))
                                        $TuplePattern.let_xxx))))))))
                  $TuplePattern.fun_xxx)
               (=
                  $TuplePattern.d_xxx
                  (call $TuplePattern.d_xxx $TuplePattern.d_xxx)
                  (cast (sum (con Tuple#)) $TuplePattern.d_xxx))))))
   ())