(((define
     hello
     (sum (con Tuple# Any# Any#))
     (=
        $TypeSynonym.d_xxx
        (=
           $TypeSynonym.d_xxx
           (=
              $TypeSynonym.d_xxx
              (call String# "hello")
              (cast Any# $TypeSynonym.d_xxx))
           (=
              $TypeSynonym.d_xxx
              (=
                 $TypeSynonym.d_xxx
                 (call String# "world")
                 (cast Any# $TypeSynonym.d_xxx))
              (let
                 (($TypeSynonym.let_xxx
                     (sum (con Tuple# Any# Any#))
                     (pack
                        (sum (con Tuple# Any# Any#))
                        (con Tuple# Any# Any#)
                        $TypeSynonym.d_xxx
                        $TypeSynonym.d_xxx)))
                 $TypeSynonym.let_xxx)))
        $TypeSynonym.d_xxx)))
   ((define
       (TCon)
       (-> () Any#)
       (let
          (($TypeSynonym.let_xxx
              (sum (con test/testcases/malgo/TypeSynonym.mlg.TCon))
              (pack
                 (sum (con test/testcases/malgo/TypeSynonym.mlg.TCon))
                 (con test/testcases/malgo/TypeSynonym.mlg.TCon))))
          (cast Any# $TypeSynonym.let_xxx)))
      (define (idOverS $TypeSynonym.x_xxx) (-> (Any#) Any#) $TypeSynonym.x_xxx)
      (define
         (main $TypeSynonym.$__xxx)
         (-> ((sum (con Tuple#))) (sum (con Tuple#)))
         (=
            $TypeSynonym.d_xxx
            (=
               $TypeSynonym.cast_xxx
               (cast Any# hello)
               (=
                  $TypeSynonym.d_xxx
                  (call |> $TypeSynonym.cast_xxx)
                  (cast
                     (->
                        ((-> ((sum (con Tuple# Any# Any#))) (sum (con Tuple#))))
                        (sum (con Tuple#)))
                     $TypeSynonym.d_xxx)))
            (=
               $TypeSynonym.d_xxx
               (let
                  (($TypeSynonym.fun_xxx
                      (-> ((sum (con Tuple# Any# Any#))) (sum (con Tuple#)))
                      (fun
                         ($TypeSynonym.tuple_xxx)
                         (match
                            $TypeSynonym.tuple_xxx
                            (unpack
                               (con Tuple# Any# Any#)
                               ($TypeSynonym.p_xxx $TypeSynonym.p_xxx)
                               (=
                                  $TypeSynonym.d_xxx
                                  (=
                                     $TypeSynonym.d_xxx
                                     (call putStr $TypeSynonym.p_xxx)
                                     (cast (sum (con Tuple#)) $TypeSynonym.d_xxx))
                                  (=
                                     $TypeSynonym.d_xxx
                                     (=
                                        $TypeSynonym.d_xxx
                                        (=
                                           $TypeSynonym.d_xxx
                                           (call String# " ")
                                           (cast Any# $TypeSynonym.d_xxx))
                                        (=
                                           $TypeSynonym.d_xxx
                                           (call putStr $TypeSynonym.d_xxx)
                                           (cast
                                              (sum (con Tuple#))
                                              $TypeSynonym.d_xxx)))
                                     (=
                                        $TypeSynonym.d_xxx
                                        (call putStrLn $TypeSynonym.p_xxx)
                                        (cast
                                           (sum (con Tuple#))
                                           $TypeSynonym.d_xxx)))))))))
                  $TypeSynonym.fun_xxx)
               (=
                  $TypeSynonym.d_xxx
                  (call $TypeSynonym.d_xxx $TypeSynonym.d_xxx)
                  (cast (sum (con Tuple#)) $TypeSynonym.d_xxx))))))
   ())