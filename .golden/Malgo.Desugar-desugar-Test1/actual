Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ AnyT,
      [ SumT [ Con Tuple [] ] ] :-> AnyT,
      [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
     { name = "if_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "true", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "t", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ],
    [ AnyT,
     [ SumT [ Con Tuple [] ] ] :-> AnyT,
     [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
       ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "true", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) )
    [ Unpack
     ( Con ( Data "test/testcases/malgo/Test1.mlg.True" ) [] ) []
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, typ = SumT
         [ Con Tuple [] ], _object = Pack
         ( SumT [ Con Tuple [] ] )
         ( Con Tuple [] ) [] } ]
       ( Atom
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "t", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) )
        [ Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ) ), Unpack
     ( Con ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ) []
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, typ = SumT
         [ Con Tuple [] ], _object = Pack
         ( SumT [ Con Tuple [] ] )
         ( Con Tuple [] ) [] } ]
       ( Atom
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "_", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) )
        [ Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ) ) ] ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "True", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
        ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
       ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
        ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test1.mlg.True" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
         ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "False", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
        ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
       ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
        ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test1.mlg.True" ) [], Con
         ( Data "test/testcases/malgo/Test1.mlg.False" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ] ),
   ( Meta
    { meta = [ AnyT ] :->
     (
      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
      ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) ), id = Id
     { name = "if", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "true", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ], [ AnyT ] :->
    (
     [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
     ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
       ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, typ =
      [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
      ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), _object = Fun
      [ Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
        { name = "t", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ]
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta =
          [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, typ =
         [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, _object = Fun
         [ Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "_", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ]
         ( CallDirect
          ( Meta
           { meta =
            [ AnyT,
             [ SumT [ Con Tuple [] ] ] :-> AnyT,
             [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
            { name = "if_curry", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
          [ Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "true", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ), Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "t", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ), Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
             { name = "_", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ] ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
        ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta =
       [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :->
       (
        [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ] ), id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
      ( CallDirect
       ( Meta
        { meta = [] :-> AnyT, id = Id
         { name = "True", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } } ) [] )
      ( Assign
       ( Meta
        { meta =
         [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
         ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :->
           (
            [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
            ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ) ), id = Id
           { name = "if", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        (
         [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :->
         (
          [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ] ) )
        ( Var
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :->
           ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT ), id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ) )
     ( Assign
      ( Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, typ =
         [ SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ], _object = Fun
         [ Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "$_", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ]
         ( Assign
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ StringT ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "malgo_print_string", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } } ) )
           [ Unboxed ( String "True" ) ] )
          ( Cast
           ( SumT [ Con Tuple [] ] )
           ( Var
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "fun", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta =
         [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :->
           (
            [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
            [ Con Tuple [] ] ), id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) )
        [ Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        (
         [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta =
           [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ) ) )
    ( Assign
     ( Meta
      { meta =
       [ SumT [ Con Tuple [] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } }, typ =
        [ SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "$_", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ]
        ( Assign
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ StringT ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "malgo_print_string", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = External } } ) )
          [ Unboxed ( String "False" ) ] )
         ( Cast
          ( SumT [ Con Tuple [] ] )
          ( Var
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test1.mlg" ), sort = Temporal } } ) ) ) ) ) ) ], extFuns =
  [ ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ) ] }