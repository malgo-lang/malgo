Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 16 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 18 } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 17 } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ StringT ] :-> AnyT, id = Id
         { name = "String#", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
      [ Unboxed ( String "OK" ) ] )
     ( Cast AnyT
      ( Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 17 } } ) ) ) )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 19 } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "putStrLn", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 18 } } ) ] )
     ( Cast
      ( SumT [ Con Tuple [] ] )
      ( Var
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 19 } } ) ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "isNil", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "nil", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 20 } } ], [ AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "runtime/malgo/Prelude.mlg.Nil" ) [], Con
       ( Data "runtime/malgo/Prelude.mlg.Cons" )
       [ AnyT, AnyT ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "nil", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 20 } } ) ) )
    [ Unpack
     ( Con ( Data "runtime/malgo/Prelude.mlg.Nil" ) [] ) []
     ( CallDirect
      ( Meta
       { meta = [] :-> AnyT, id = Id
        { name = "True", moduleName = Artifact
         ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] ), Unpack
     ( Con ( Data "runtime/malgo/Prelude.mlg.Cons" ) [ AnyT, AnyT ] )
     [ Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 21 } }, Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Pattern.mlg" ), sort = Temporal 22 } } ]
     ( CallDirect
      ( Meta
       { meta = [] :-> AnyT, id = Id
        { name = "False", moduleName = Artifact
         ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) [] ) ] ) ], extFuns = [] }