Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 12 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 19 } } )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 15 } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = [ AnyT ] :-> AnyT, id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 14 } }, typ = [ AnyT ] :-> AnyT, _object = Fun
        [ Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 13 } } ]
        ( Atom
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "x", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 13 } } ) ) ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 14 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 17 } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 16 } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ StringT ] :-> AnyT, id = Id
           { name = "String#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( String "hoge" ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 16 } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 18 } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 15 } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 17 } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 18 } } ) ) ) ) ) )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 20 } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "printString", moduleName = Artifact
          ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 19 } } ) ] )
     ( Cast
      ( SumT [ Con Tuple [] ] )
      ( Var
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TypeAnnotation.mlg" ), sort = Temporal 20 } } ) ) ) ) ) ], extFuns = [] }