Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
     { name = "|>_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 52 } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 53 } }, Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "f", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 54 } } ],
    [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 55 } } )
    ( Call
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 54 } } ) )
     [ Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "x", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 53 } } ) ] )
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 55 } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
     { name = "|>", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 49 } } ], [ AnyT ] :->
    ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 56 } }, typ =
      [ [ AnyT ] :-> AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 50 } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "|>_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 52 } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 49 } } ), Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 50 } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 56 } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 57 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Match
    ( Assign
     ( Meta
      { meta = [ Int32T ] :-> Int32T, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 59 } } )
     ( Assign
      ( Meta
       { meta = [ Int32T ] :-> Int32T, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 58 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ Int32T ] :->
          ( [ Int32T ] :-> Int32T ), id = Id
          { name = "addInt32#", moduleName = Artifact
           ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
       [ Unboxed ( Int32 1 ) ] )
      ( Cast
       ( [ Int32T ] :-> Int32T )
       ( Var
        ( Meta
         { meta = [ Int32T ] :-> Int32T, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 58 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = Int32T, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 60 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ Int32T ] :-> Int32T, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 59 } } ) )
       [ Unboxed ( Int32 2 ) ] )
      ( Cast Int32T
       ( Var
        ( Meta
         { meta = Int32T, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 60 } } ) ) ) ) )
    [ Bind
     ( Meta
      { meta = Int32T, id = Id
       { name = "let_test/testcases/malgo/TestLet.mlg.#x_4", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 61 } } ) Int32T
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 65 } } )
      ( Assign
       ( Meta
        { meta = StringT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 63 } } )
       ( Assign
        ( Meta
         { meta = StringT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 62 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ Int32T ] :-> StringT, id = Id
            { name = "toStringInt32#", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = Int32T, id = Id
            { name = "let_test/testcases/malgo/TestLet.mlg.#x_4", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 61 } } ) ] )
        ( Cast StringT
         ( Var
          ( Meta
           { meta = StringT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 62 } } ) ) ) )
       ( Assign
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 64 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ StringT ] :-> SumT
            [ Con Tuple [] ], id = Id
            { name = "printString#", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = StringT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 63 } } ) ] )
        ( Cast
         ( SumT [ Con Tuple [] ] )
         ( Var
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 64 } } ) ) ) ) )
      ( Match
       ( Assign
        ( Meta
         { meta = Int32T, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 69 } } )
        ( Assign
         ( Meta
          { meta = [ Int32T ] :-> Int32T, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 67 } } )
         ( Assign
          ( Meta
           { meta = [ Int32T ] :-> Int32T, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 66 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ Int32T ] :->
              ( [ Int32T ] :-> Int32T ), id = Id
              { name = "addInt32#", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
           [ Unboxed ( Int32 1 ) ] )
          ( Cast
           ( [ Int32T ] :-> Int32T )
           ( Var
            ( Meta
             { meta = [ Int32T ] :-> Int32T, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 66 } } ) ) ) )
         ( Assign
          ( Meta
           { meta = Int32T, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 68 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ Int32T ] :-> Int32T, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 67 } } ) )
           [ Unboxed ( Int32 2 ) ] )
          ( Cast Int32T
           ( Var
            ( Meta
             { meta = Int32T, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 68 } } ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 70 } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ Int32T ] :-> AnyT, id = Id
             { name = "Int32#", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
          [ Var
           ( Meta
            { meta = Int32T, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 69 } } ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 70 } } ) ) ) ) )
       [ Bind
        ( Meta
         { meta = AnyT, id = Id
          { name = "let_test/testcases/malgo/TestLet.mlg.#x_5", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 71 } } ) AnyT
        ( Match
         ( Let
          [ LocalDef
           { _variable = Meta
            { meta = [ AnyT ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 77 } }, typ = [ AnyT ] :-> SumT
            [ Con Tuple [] ], _object = Fun
            [ Meta
             { meta = AnyT, id = Id
              { name = "int32#", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 72 } } ]
            ( Match
             ( Cast
              ( SumT
               [ Con ( Data "runtime/malgo/Builtin.mlg.Int32#" ) [ Int32T ] ] )
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "int32#", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 72 } } ) ) )
             [ Unpack
              ( Con ( Data "runtime/malgo/Builtin.mlg.Int32#" ) [ Int32T ] )
              [ Meta
               { meta = Int32T, id = Id
                { name = "p", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 73 } } ]
              ( Assign
               ( Meta
                { meta = StringT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 75 } } )
               ( Assign
                ( Meta
                 { meta = StringT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 74 } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta = [ Int32T ] :-> StringT, id = Id
                    { name = "toStringInt32#", moduleName = Artifact
                     ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                 [ Var
                  ( Meta
                   { meta = Int32T, id = Id
                    { name = "p", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 73 } } ) ] )
                ( Cast StringT
                 ( Var
                  ( Meta
                   { meta = StringT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 74 } } ) ) ) )
               ( Assign
                ( Meta
                 { meta = SumT
                  [ Con Tuple [] ], id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 76 } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta = [ StringT ] :-> SumT
                    [ Con Tuple [] ], id = Id
                    { name = "printString#", moduleName = Artifact
                     ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                 [ Var
                  ( Meta
                   { meta = StringT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 75 } } ) ] )
                ( Cast
                 ( SumT [ Con Tuple [] ] )
                 ( Var
                  ( Meta
                   { meta = SumT
                    [ Con Tuple [] ], id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 76 } } ) ) ) ) ) ] ) } ]
          ( Atom
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 77 } } ) ) ) )
         [ Bind
          ( Meta
           { meta = [ AnyT ] :-> SumT
            [ Con Tuple [] ], id = Id
            { name = "let_test/testcases/malgo/TestLet.mlg.#printInt32_7", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 78 } } )
          ( [ AnyT ] :-> SumT [ Con Tuple [] ] )
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 79 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "let_test/testcases/malgo/TestLet.mlg.#printInt32_7", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 78 } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "let_test/testcases/malgo/TestLet.mlg.#x_5", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 71 } } ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestLet.mlg" ), sort = Temporal 79 } } ) ) ) ) ] ) ] ) ) ] ) ], extFuns = [] }