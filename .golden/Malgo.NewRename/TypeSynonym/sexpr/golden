(module
   "test/testcases/malgo/TypeSynonym.mlg"
   ((((((./test/testcases/malgo/TypeSynonym.mlg 15 1)
          (./test/testcases/malgo/TypeSynonym.mlg 17 1))
         idOverS
         (fn ((clause (#TypeSynonym.x_xxx) (seq (do #TypeSynonym.x_xxx)))))))
       ((((./test/testcases/malgo/TypeSynonym.mlg 9 1)
            (./test/testcases/malgo/TypeSynonym.mlg 11 1))
           hello
           (tuple
              (apply String# (string "hello"))
              (apply String# (string "world")))))
       ((((./test/testcases/malgo/TypeSynonym.mlg 18 1)
            (./test/testcases/malgo/TypeSynonym.mlg 21 1))
           main
           (fn
              ((clause
                  ()
                  (seq
                     (do
                        (opapp
                           |>
                           hello
                           (fn
                              ((clause
                                  ((tuple #TypeSynonym.h_xxx #TypeSynonym.w_xxx))
                                  (seq
                                     (do (apply putStr #TypeSynonym.h_xxx))
                                     (do
                                        (apply
                                           putStr
                                           (apply String# (string " "))))
                                     (do (apply putStrLn #TypeSynonym.w_xxx)))))))))))))))
      ((((./test/testcases/malgo/TypeSynonym.mlg 8 1)
           (./test/testcases/malgo/TypeSynonym.mlg 9 1))
          hello
          (app #TypeSynonym.MyTuple_xxx (#TypeSynonym.MyString_xxx)))
         (((./test/testcases/malgo/TypeSynonym.mlg 14 1)
             (./test/testcases/malgo/TypeSynonym.mlg 15 1))
            idOverS
            (-> #TypeSynonym.S_xxx #TypeSynonym.T_xxx))
         (((./test/testcases/malgo/TypeSynonym.mlg 17 1)
             (./test/testcases/malgo/TypeSynonym.mlg 18 1))
            main
            (-> (tuple) (tuple))))
      ((((./test/testcases/malgo/TypeSynonym.mlg 11 1)
           (./test/testcases/malgo/TypeSynonym.mlg 12 1))
          T
          ()
          ((((./test/testcases/malgo/TypeSynonym.mlg 11 10)
               (./test/testcases/malgo/TypeSynonym.mlg 12 1))
              TCon
              ()))))
      ((((./test/testcases/malgo/TypeSynonym.mlg 4 1)
           (./test/testcases/malgo/TypeSynonym.mlg 6 1))
          MyTuple
          (#TypeSynonym.a_xxx)
          (tuple #TypeSynonym.a_xxx #TypeSynonym.a_xxx))
         (((./test/testcases/malgo/TypeSynonym.mlg 6 1)
             (./test/testcases/malgo/TypeSynonym.mlg 8 1))
            MyString
            ()
            String)
         (((./test/testcases/malgo/TypeSynonym.mlg 12 1)
             (./test/testcases/malgo/TypeSynonym.mlg 14 1))
            S
            ()
            T))
      ()
      ((((./test/testcases/malgo/TypeSynonym.mlg 1 1)
           (./test/testcases/malgo/TypeSynonym.mlg 2 1))
          "runtime/malgo/Builtin.mlg"
          all)
         (((./test/testcases/malgo/TypeSynonym.mlg 2 1)
             (./test/testcases/malgo/TypeSynonym.mlg 4 1))
            "runtime/malgo/Prelude.mlg"
            all))))