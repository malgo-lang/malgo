Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
     { name = "|>_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 81 } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 82 } }, Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "f", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 83 } } ],
    [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 84 } } )
    ( Call
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 83 } } ) )
     [ Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "x", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 82 } } ) ] )
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 84 } } ) ) ) ),
   ( Meta
    { meta =
     [ AnyT, AnyT ] :-> AnyT, id = Id
     { name = "Cons_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 72 } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 73 } }, Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 74 } } ],
    [ AnyT, AnyT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Test3.mlg.Cons" )
        [ AnyT, AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 75 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
       ( Data "test/testcases/malgo/Test3.mlg.Cons" )
       [ AnyT, AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Test3.mlg.Cons" )
        [ AnyT, AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/Test3.mlg.Cons" ) [ AnyT, AnyT ] )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 73 } } ), Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 74 } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
         ( Data "test/testcases/malgo/Test3.mlg.Cons" )
         [ AnyT, AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 75 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "A", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 66 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
       ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test3.mlg.A" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
         ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 66 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "B", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 67 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
       ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
        ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ] )
      ( Con ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
         ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 67 } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "Nil", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Test3.mlg.Cons" )
        [ AnyT, AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 68 } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
       ( Data "test/testcases/malgo/Test3.mlg.Cons" )
       [ AnyT, AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/Test3.mlg.Cons" )
        [ AnyT, AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
         ( Data "test/testcases/malgo/Test3.mlg.Cons" )
         [ AnyT, AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 68 } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "Cons", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 69 } } ], [ AnyT ] :->
    ( [ AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 76 } }, typ = [ AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "p", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 70 } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, AnyT ] :-> AnyT, id = Id
         { name = "Cons_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 72 } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 69 } } ), Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 70 } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 76 } } ) ) ) ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 77 } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 77 } } ) ] ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
     { name = "|>", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 78 } } ], [ AnyT ] :->
    ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta =
       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 85 } }, typ =
      [ [ AnyT ] :-> AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "f", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 79 } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "|>_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 81 } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "x", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 78 } } ), Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "f", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 79 } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 85 } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 86 } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 99 } } )
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 97 } } )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 89 } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 87 } } )
       ( CallDirect
        ( Meta
         { meta = [] :-> AnyT, id = Id
          { name = "A", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) [] )
       ( Assign
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 88 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :->
            ( [ AnyT ] :-> AnyT ), id = Id
            { name = "Cons", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 87 } } ) ] )
        ( Cast
         ( [ AnyT ] :-> AnyT )
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 88 } } ) ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 95 } } )
       ( Assign
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 92 } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 90 } } )
         ( CallDirect
          ( Meta
           { meta = [] :-> AnyT, id = Id
            { name = "B", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) [] )
         ( Assign
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 91 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ AnyT ] :-> AnyT ), id = Id
              { name = "Cons", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 90 } } ) ] )
          ( Cast
           ( [ AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 91 } } ) ) ) ) )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 93 } } )
         ( CallDirect
          ( Meta
           { meta = [] :-> AnyT, id = Id
            { name = "Nil", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) [] )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 94 } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 92 } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 93 } } ) ] )
          ( Cast AnyT
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 94 } } ) ) ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 96 } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 89 } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 95 } } ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 96 } } ) ) ) ) ) )
     ( Assign
      ( Meta
       { meta =
        [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 98 } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :->
          ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
          { name = "|>", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 97 } } ) ] )
      ( Cast
       ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 98 } } ) ) ) ) )
    ( Assign
     ( Meta
      { meta = [ AnyT ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 110 } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = [ AnyT ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 109 } }, typ = [ AnyT ] :-> SumT
        [ Con Tuple [] ], _object = Fun
        [ Meta
         { meta = AnyT, id = Id
          { name = "cons", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 100 } } ]
        ( Match
         ( Cast
          ( SumT
           [ Con
            ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
            ( Data "test/testcases/malgo/Test3.mlg.Cons" )
            [ AnyT, AnyT ] ] )
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "cons", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 100 } } ) ) )
         [ Unpack
          ( Con ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [] ) []
          ( Assign
           ( Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ StringT ] :-> SumT
               [ Con Tuple [] ], id = Id
               { name = "malgo_print_string", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
            [ Unboxed ( String "WRONG" ) ] )
           ( Cast
            ( SumT [ Con Tuple [] ] )
            ( Var
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } ) ) ) ), Unpack
          ( Con ( Data "test/testcases/malgo/Test3.mlg.Cons" ) [ AnyT, AnyT ] )
          [ Meta
           { meta = AnyT, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 102 } }, Meta
           { meta = AnyT, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 103 } } ]
          ( Match
           ( Cast
            ( SumT
             [ Con
              ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
              ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ] )
            ( Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "p", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 102 } } ) ) )
           [ Unpack
            ( Con ( Data "test/testcases/malgo/Test3.mlg.A" ) [] ) []
            ( Match
             ( Cast
              ( SumT
               [ Con
                ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
                ( Data "test/testcases/malgo/Test3.mlg.Cons" )
                [ AnyT, AnyT ] ] )
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "p", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 103 } } ) ) )
             [ Unpack
              ( Con ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [] ) []
              ( Assign
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } )
               ( Call
                ( Var
                 ( Meta
                  { meta = [ StringT ] :-> SumT
                   [ Con Tuple [] ], id = Id
                   { name = "malgo_print_string", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
                [ Unboxed ( String "WRONG" ) ] )
               ( Cast
                ( SumT [ Con Tuple [] ] )
                ( Var
                 ( Meta
                  { meta = SumT
                   [ Con Tuple [] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } ) ) ) ), Unpack
              ( Con
               ( Data "test/testcases/malgo/Test3.mlg.Cons" )
               [ AnyT, AnyT ] )
              [ Meta
               { meta = AnyT, id = Id
                { name = "p", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 104 } }, Meta
               { meta = AnyT, id = Id
                { name = "p", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 105 } } ]
              ( Match
               ( Cast
                ( SumT
                 [ Con
                  ( Data "test/testcases/malgo/Test3.mlg.A" ) [], Con
                  ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ] )
                ( Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "p", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 104 } } ) ) )
               [ Unpack
                ( Con ( Data "test/testcases/malgo/Test3.mlg.A" ) [] ) []
                ( Assign
                 ( Meta
                  { meta = SumT
                   [ Con Tuple [] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ StringT ] :-> SumT
                     [ Con Tuple [] ], id = Id
                     { name = "malgo_print_string", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
                  [ Unboxed ( String "WRONG" ) ] )
                 ( Cast
                  ( SumT [ Con Tuple [] ] )
                  ( Var
                   ( Meta
                    { meta = SumT
                     [ Con Tuple [] ], id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } ) ) ) ), Unpack
                ( Con ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ) []
                ( Match
                 ( Cast
                  ( SumT
                   [ Con
                    ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [], Con
                    ( Data "test/testcases/malgo/Test3.mlg.Cons" )
                    [ AnyT, AnyT ] ] )
                  ( Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "p", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 105 } } ) ) )
                 [ Unpack
                  ( Con ( Data "test/testcases/malgo/Test3.mlg.Nil" ) [] ) []
                  ( Assign
                   ( Meta
                    { meta = SumT
                     [ Con Tuple [] ], id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 106 } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ StringT ] :-> SumT
                       [ Con Tuple [] ], id = Id
                       { name = "malgo_print_string", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
                    [ Unboxed ( String "OK" ) ] )
                   ( Cast
                    ( SumT [ Con Tuple [] ] )
                    ( Var
                     ( Meta
                      { meta = SumT
                       [ Con Tuple [] ], id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 106 } } ) ) ) ), Unpack
                  ( Con
                   ( Data "test/testcases/malgo/Test3.mlg.Cons" )
                   [ AnyT, AnyT ] )
                  [ Meta
                   { meta = AnyT, id = Id
                    { name = "p", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 107 } }, Meta
                   { meta = AnyT, id = Id
                    { name = "p", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 108 } } ]
                  ( Assign
                   ( Meta
                    { meta = SumT
                     [ Con Tuple [] ], id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ StringT ] :-> SumT
                       [ Con Tuple [] ], id = Id
                       { name = "malgo_print_string", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
                    [ Unboxed ( String "WRONG" ) ] )
                   ( Cast
                    ( SumT [ Con Tuple [] ] )
                    ( Var
                     ( Meta
                      { meta = SumT
                       [ Con Tuple [] ], id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } ) ) ) ) ] ) ] ) ] ), Unpack
            ( Con ( Data "test/testcases/malgo/Test3.mlg.B" ) [] ) []
            ( Assign
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ StringT ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "malgo_print_string", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = External } } ) )
              [ Unboxed ( String "WRONG" ) ] )
             ( Cast
              ( SumT [ Con Tuple [] ] )
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 101 } } ) ) ) ) ] ) ] ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 109 } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 111 } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 99 } } ) )
       [ Var
        ( Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 110 } } ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/Test3.mlg" ), sort = Temporal 111 } } ) ) ) ) ) ) ], extFuns =
  [ ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ) ] }