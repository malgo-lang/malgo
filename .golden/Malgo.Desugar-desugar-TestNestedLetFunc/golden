Program
    { topVars = []
    , topFuns =
        [
            ( Meta
                { meta = [ StringT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "malgo_print_string"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta = StringT
                    , id = Id
                        { name = "p"
                        , moduleName = ModuleName
                            { raw = "TestNestedLetFunc" }
                        , sort = Temporal 13
                        }
                    }
                ]
            , [ StringT ] :-> SumT
                [ Con Tuple [] ]
            , RawCall "malgo_print_string"
                ( [ StringT ] :-> SumT
                    [ Con Tuple [] ]
                )
                [ Var
                    ( Meta
                        { meta = StringT
                        , id = Id
                            { name = "p"
                            , moduleName = ModuleName
                                { raw = "TestNestedLetFunc" }
                            , sort = Temporal 13
                            }
                        }
                    )
                ]
            )
        ,
            ( Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "main"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = External
                    }
                }
            ,
                [ Meta
                    { meta = SumT
                        [ Con Tuple [] ]
                    , id = Id
                        { name = "$_"
                        , moduleName = ModuleName
                            { raw = "TestNestedLetFunc" }
                        , sort = Temporal 14
                        }
                    }
                ]
            ,
                [ SumT
                    [ Con Tuple [] ]
                ] :-> SumT
                [ Con Tuple [] ]
            , Match
                ( Let
                    [ LocalDef
                        { _variable = Meta
                            { meta =
                                [ SumT
                                    [ Con Tuple [] ]
                                ] :-> SumT
                                [ Con Tuple [] ]
                            , id = Id
                                { name = "fun"
                                , moduleName = ModuleName
                                    { raw = "TestNestedLetFunc" }
                                , sort = Temporal 23
                                }
                            }
                        , typ =
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> SumT
                            [ Con Tuple [] ]
                        , _object = Fun
                            [ Meta
                                { meta = SumT
                                    [ Con Tuple [] ]
                                , id = Id
                                    { name = "$_"
                                    , moduleName = ModuleName
                                        { raw = "TestNestedLetFunc" }
                                    , sort = Temporal 15
                                    }
                                }
                            ]
                            ( Assign
                                ( Meta
                                    { meta =
                                        [ SumT
                                            [ Con Tuple [] ]
                                        ] :-> SumT
                                        [ Con Tuple [] ]
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "TestNestedLetFunc" }
                                        , sort = Temporal 19
                                        }
                                    }
                                )
                                ( Let
                                    [ LocalDef
                                        { _variable = Meta
                                            { meta =
                                                [ SumT
                                                    [ Con Tuple [] ]
                                                ] :-> SumT
                                                [ Con Tuple [] ]
                                            , id = Id
                                                { name = "fun"
                                                , moduleName = ModuleName
                                                    { raw = "TestNestedLetFunc" }
                                                , sort = Temporal 18
                                                }
                                            }
                                        , typ =
                                            [ SumT
                                                [ Con Tuple [] ]
                                            ] :-> SumT
                                            [ Con Tuple [] ]
                                        , _object = Fun
                                            [ Meta
                                                { meta = SumT
                                                    [ Con Tuple [] ]
                                                , id = Id
                                                    { name = "a"
                                                    , moduleName = ModuleName
                                                        { raw = "TestNestedLetFunc" }
                                                    , sort = Temporal 16
                                                    }
                                                }
                                            ]
                                            ( Let
                                                [ LocalDef
                                                    { _variable = Meta
                                                        { meta = SumT
                                                            [ Con Tuple [] ]
                                                        , id = Id
                                                            { name = "let"
                                                            , moduleName = ModuleName
                                                                { raw = "TestNestedLetFunc" }
                                                            , sort = Temporal 17
                                                            }
                                                        }
                                                    , typ = SumT
                                                        [ Con Tuple [] ]
                                                    , _object = Pack
                                                        ( SumT
                                                            [ Con Tuple [] ]
                                                        )
                                                        ( Con Tuple [] ) []
                                                    }
                                                ]
                                                ( Atom
                                                    ( Var
                                                        ( Meta
                                                            { meta = SumT
                                                                [ Con Tuple [] ]
                                                            , id = Id
                                                                { name = "let"
                                                                , moduleName = ModuleName
                                                                    { raw = "TestNestedLetFunc" }
                                                                , sort = Temporal 17
                                                                }
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        }
                                    ]
                                    ( Atom
                                        ( Var
                                            ( Meta
                                                { meta =
                                                    [ SumT
                                                        [ Con Tuple [] ]
                                                    ] :-> SumT
                                                    [ Con Tuple [] ]
                                                , id = Id
                                                    { name = "fun"
                                                    , moduleName = ModuleName
                                                        { raw = "TestNestedLetFunc" }
                                                    , sort = Temporal 18
                                                    }
                                                }
                                            )
                                        )
                                    )
                                )
                                ( Assign
                                    ( Meta
                                        { meta = SumT
                                            [ Con Tuple [] ]
                                        , id = Id
                                            { name = "d"
                                            , moduleName = ModuleName
                                                { raw = "TestNestedLetFunc" }
                                            , sort = Temporal 21
                                            }
                                        }
                                    )
                                    ( Let
                                        [ LocalDef
                                            { _variable = Meta
                                                { meta = SumT
                                                    [ Con Tuple [] ]
                                                , id = Id
                                                    { name = "let"
                                                    , moduleName = ModuleName
                                                        { raw = "TestNestedLetFunc" }
                                                    , sort = Temporal 20
                                                    }
                                                }
                                            , typ = SumT
                                                [ Con Tuple [] ]
                                            , _object = Pack
                                                ( SumT
                                                    [ Con Tuple [] ]
                                                )
                                                ( Con Tuple [] ) []
                                            }
                                        ]
                                        ( Atom
                                            ( Var
                                                ( Meta
                                                    { meta = SumT
                                                        [ Con Tuple [] ]
                                                    , id = Id
                                                        { name = "let"
                                                        , moduleName = ModuleName
                                                            { raw = "TestNestedLetFunc" }
                                                        , sort = Temporal 20
                                                        }
                                                    }
                                                )
                                            )
                                        )
                                    )
                                    ( Assign
                                        ( Meta
                                            { meta = SumT
                                                [ Con Tuple [] ]
                                            , id = Id
                                                { name = "d"
                                                , moduleName = ModuleName
                                                    { raw = "TestNestedLetFunc" }
                                                , sort = Temporal 22
                                                }
                                            }
                                        )
                                        ( Call
                                            ( Var
                                                ( Meta
                                                    { meta =
                                                        [ SumT
                                                            [ Con Tuple [] ]
                                                        ] :-> SumT
                                                        [ Con Tuple [] ]
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "TestNestedLetFunc" }
                                                        , sort = Temporal 19
                                                        }
                                                    }
                                                )
                                            )
                                            [ Var
                                                ( Meta
                                                    { meta = SumT
                                                        [ Con Tuple [] ]
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "TestNestedLetFunc" }
                                                        , sort = Temporal 21
                                                        }
                                                    }
                                                )
                                            ]
                                        )
                                        ( Cast
                                            ( SumT
                                                [ Con Tuple [] ]
                                            )
                                            ( Var
                                                ( Meta
                                                    { meta = SumT
                                                        [ Con Tuple [] ]
                                                    , id = Id
                                                        { name = "d"
                                                        , moduleName = ModuleName
                                                            { raw = "TestNestedLetFunc" }
                                                        , sort = Temporal 22
                                                        }
                                                    }
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        }
                    ]
                    ( Atom
                        ( Var
                            ( Meta
                                { meta =
                                    [ SumT
                                        [ Con Tuple [] ]
                                    ] :-> SumT
                                    [ Con Tuple [] ]
                                , id = Id
                                    { name = "fun"
                                    , moduleName = ModuleName
                                        { raw = "TestNestedLetFunc" }
                                    , sort = Temporal 23
                                    }
                                }
                            )
                        )
                    )
                )
                [ Bind
                    ( Meta
                        { meta =
                            [ SumT
                                [ Con Tuple [] ]
                            ] :-> SumT
                            [ Con Tuple [] ]
                        , id = Id
                            { name = "let_TestNestedLetFunc.#f_2"
                            , moduleName = ModuleName
                                { raw = "TestNestedLetFunc" }
                            , sort = Temporal 24
                            }
                        }
                    )
                    (
                        [ SumT
                            [ Con Tuple [] ]
                        ] :-> SumT
                        [ Con Tuple [] ]
                    )
                    ( Assign
                        ( Meta
                            { meta = SumT
                                [ Con Tuple [] ]
                            , id = Id
                                { name = "d"
                                , moduleName = ModuleName
                                    { raw = "TestNestedLetFunc" }
                                , sort = Temporal 25
                                }
                            }
                        )
                        ( Call
                            ( Var
                                ( Meta
                                    { meta = [ StringT ] :-> SumT
                                        [ Con Tuple [] ]
                                    , id = Id
                                        { name = "malgo_print_string"
                                        , moduleName = ModuleName
                                            { raw = "TestNestedLetFunc" }
                                        , sort = External
                                        }
                                    }
                                )
                            )
                            [ Unboxed
                                ( String "PASS" )
                            ]
                        )
                        ( Cast
                            ( SumT
                                [ Con Tuple [] ]
                            )
                            ( Var
                                ( Meta
                                    { meta = SumT
                                        [ Con Tuple [] ]
                                    , id = Id
                                        { name = "d"
                                        , moduleName = ModuleName
                                            { raw = "TestNestedLetFunc" }
                                        , sort = Temporal 25
                                        }
                                    }
                                )
                            )
                        )
                    )
                ]
            )
        ]
    , extFuns =
        [
            ( "malgo_print_string"
            , [ StringT ] :-> SumT
                [ Con Tuple [] ]
            )
        ]
    }
DsState
    { _nameEnv = fromList
        [
            ( Id
                { name = "malgo_print_string"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = External
                }
            , Meta
                { meta = [ StringT ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "malgo_print_string"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "f"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 2
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "let_TestNestedLetFunc.#f_2"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = Temporal 24
                    }
                }
            )
        ,
            ( Id
                { name = "main"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = External
                }
            , Meta
                { meta =
                    [ SumT
                        [ Con Tuple [] ]
                    ] :-> SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "main"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = External
                    }
                }
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 12
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "$_"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = Temporal 14
                    }
                }
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 9
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "$_"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = Temporal 15
                    }
                }
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 0
                }
            , Meta
                { meta = SumT
                    [ Con Tuple [] ]
                , id = Id
                    { name = "a"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = Temporal 16
                    }
                }
            )
        ]
    , _signatureMap = fromList
        [
            ( Id
                { name = "malgo_print_string"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = External
                }
            , Forall []
                ( TyArr ( TyPrim StringT )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "y"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 1
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "f"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 2
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "main"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = External
                }
            , Forall []
                ( TyArr
                    ( TyTuple 0 )
                    ( TyTuple 0 )
                )
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 12
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "$_"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 9
                }
            , Forall []
                ( TyTuple 0 )
            )
        ,
            ( Id
                { name = "a"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 0
                }
            , Forall []
                ( TyTuple 0 )
            )
        ]
    , _typeDefMap = fromList
        [
            ( Id
                { name = "Int64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim Int64T
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Double#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim DoubleT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Int32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim Int32T
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Ptr#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPtr
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "String#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim StringT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Float#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim FloatT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ,
            ( Id
                { name = "Char#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TypeDef
                { _typeConstructor = TyPrim CharT
                , _typeParameters = []
                , _valueConstructors = []
                }
            )
        ]
    , _kindCtx = fromList
        [
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 8
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = Temporal 7
                    }
                )
            )
        ,
            ( Id
                { name = "Int64#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 11
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = Temporal 10
                    }
                )
            )
        ,
            ( Id
                { name = "Double#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "Int32#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 4
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = Temporal 3
                    }
                )
            )
        ,
            ( Id
                { name = "Ptr#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TyArr TYPE TYPE
            )
        ,
            ( Id
                { name = "t"
                , moduleName = ModuleName
                    { raw = "TestNestedLetFunc" }
                , sort = Internal 6
                }
            , TyMeta
                ( Id
                    { name = "kt"
                    , moduleName = ModuleName
                        { raw = "TestNestedLetFunc" }
                    , sort = Temporal 5
                    }
                )
            )
        ,
            ( Id
                { name = "String#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "Float#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ,
            ( Id
                { name = "Char#"
                , moduleName = ModuleName
                    { raw = "Builtin" }
                , sort = External
                }
            , TYPE
            )
        ]
    , _globalDefs = []
    , globalClosures = fromList []
    }