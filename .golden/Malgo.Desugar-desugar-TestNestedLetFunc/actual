Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Match
    ( Let
     [ LocalDef
      { _variable = Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "fun", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } }, typ =
       [ SumT [ Con Tuple [] ] ] :-> SumT
       [ Con Tuple [] ], _object = Fun
       [ Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "$_", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ]
       ( Assign
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } )
        ( Let
         [ LocalDef
          { _variable = Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :-> SumT
            [ Con Tuple [] ], id = Id
            { name = "fun", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } }, typ =
           [ SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], _object = Fun
           [ Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "a", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ]
           ( Let
            [ LocalDef
             { _variable = Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "let", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } }, typ = SumT
              [ Con Tuple [] ], _object = Pack
              ( SumT [ Con Tuple [] ] )
              ( Con Tuple [] ) [] } ]
            ( Atom
             ( Var
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "let", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ) ) ) } ]
         ( Atom
          ( Var
           ( Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ) ) )
        ( Assign
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } )
         ( Let
          [ LocalDef
           { _variable = Meta
            { meta = SumT
             [ Con Tuple [] ], id = Id
             { name = "let", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } }, typ = SumT
            [ Con Tuple [] ], _object = Pack
            ( SumT [ Con Tuple [] ] )
            ( Con Tuple [] ) [] } ]
          ( Atom
           ( Var
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "let", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ) ) )
         ( Assign
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) )
           [ Var
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( SumT [ Con Tuple [] ] )
           ( Var
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ) ) ) ) ) } ]
     ( Atom
      ( Var
       ( Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ) ) )
    [ Bind
     ( Meta
      { meta =
       [ SumT [ Con Tuple [] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "let_test/testcases/malgo/TestNestedLetFunc.mlg.#f_2", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } )
     ( [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ StringT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "malgo_print_string", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External } } ) )
       [ Unboxed ( String "PASS" ) ] )
      ( Cast
       ( SumT [ Con Tuple [] ] )
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ) ) ) ] ) ], extFuns =
  [ ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ) ] }
DsState
 { _nameEnv = fromList
  [
   ( Id
    { name = "malgo_print_string", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External }, Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External } } ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Meta
    { meta = SumT
     [ Con Tuple [] ], id = Id
     { name = "a", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "main", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External }, Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External } } ),
   ( Id
    { name = "$_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Meta
    { meta = SumT
     [ Con Tuple [] ], id = Id
     { name = "$_", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "$_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Meta
    { meta = SumT
     [ Con Tuple [] ], id = Id
     { name = "$_", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ),
   ( Id
    { name = "f", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "let_test/testcases/malgo/TestNestedLetFunc.mlg.#f_2", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } } ) ], _signatureMap = fromList
  [
   ( Id
    { name = "malgo_print_string", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External }, Forall []
    ( TyArr ( TyPrim StringT ) ( TyTuple 0 ) ) ),
   ( Id
    { name = "a", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Forall []
    ( TyTuple 0 ) ),
   ( Id
    { name = "main", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = External }, Forall []
    ( TyArr ( TyTuple 0 ) ( TyTuple 0 ) ) ),
   ( Id
    { name = "y", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Forall []
    ( TyTuple 0 ) ),
   ( Id
    { name = "$_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Forall []
    ( TyTuple 0 ) ),
   ( Id
    { name = "$_", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Forall []
    ( TyTuple 0 ) ),
   ( Id
    { name = "f", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, Forall []
    ( TyArr ( TyTuple 0 ) ( TyTuple 0 ) ) ) ], _typeDefMap = fromList
  [
   ( Id
    { name = "Double#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim DoubleT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Int32#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim Int32T, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Ptr#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPtr, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Char#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim CharT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Int64#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim Int64T, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "String#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim StringT, _typeParameters = [], _valueConstructors = [] } ),
   ( Id
    { name = "Float#", moduleName = ModuleName "Builtin", sort = External }, TypeDef
    { _typeConstructor = TyPrim FloatT, _typeParameters = [], _valueConstructors = [] } ) ], _kindCtx = fromList
  [
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Double#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "Int32#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "t", moduleName = Artifact
     ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Internal }, TyMeta
    ( Id
     { name = "kt", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestNestedLetFunc.mlg" ), sort = Temporal } ) ),
   ( Id
    { name = "Ptr#", moduleName = ModuleName "Builtin", sort = External }, TyArr TYPE TYPE ),
   ( Id
    { name = "Char#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "Int64#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "String#", moduleName = ModuleName "Builtin", sort = External }, TYPE ),
   ( Id
    { name = "Float#", moduleName = ModuleName "Builtin", sort = External }, TYPE ) ], _globalDefs = [], globalClosures = fromList [] }