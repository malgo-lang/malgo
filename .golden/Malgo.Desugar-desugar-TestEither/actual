Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ [ AnyT ] :-> AnyT, AnyT ] :-> AnyT, id = Id
     { name = "andThen_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } },
    [ Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, Meta
     { meta = AnyT, id = Id
      { name = "left", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ],
    [ [ AnyT ] :-> AnyT, AnyT ] :-> AnyT, Match
    ( Cast
     ( SumT
      [ Con
       ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
       ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ] )
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "left", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) )
    [ Unpack
     ( Con ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ] )
     [ Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "Left", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ), Unpack
     ( Con ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] )
     [ Meta
      { meta = AnyT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "_", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ] ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "Left", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
        ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
       ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
        ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ] )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
         ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "Right", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
        ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
       ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
        ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
         ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "id", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Atom
    ( Var
     ( Meta
      { meta = AnyT, id = Id
       { name = "x", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ),
   ( Meta
    { meta =
     [ [ AnyT ] :-> AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "andThen", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } },
    [ Meta
     { meta = [ AnyT ] :-> AnyT, id = Id
      { name = "_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ],
    [ [ AnyT ] :-> AnyT ] :->
    ( [ AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "left", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ [ AnyT ] :-> AnyT, AnyT ] :-> AnyT, id = Id
         { name = "andThen_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = [ AnyT ] :-> AnyT, id = Id
          { name = "_", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "left", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta =
       [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ Int32T ] :-> AnyT, id = Id
            { name = "Int32#", moduleName = Artifact
             ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
         [ Unboxed ( Int32 1 ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
       ( Assign
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "Right", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
         [ Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
        ( Cast AnyT
         ( Var
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
      ( Assign
       ( Meta
        { meta =
         [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :->
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
           { name = "|>", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta =
           [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
     ( Assign
      ( Meta
       { meta = [ AnyT ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = [ AnyT ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> SumT
         [ Con Tuple [] ], _object = Fun
         [ Meta
          { meta = AnyT, id = Id
           { name = "right", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
         ( Match
          ( Cast
           ( SumT
            [ Con
             ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
             ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ] )
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "right", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) )
          [ Unpack
           ( Con ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ] )
           [ Meta
            { meta = AnyT, id = Id
             { name = "p", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ StringT ] :-> AnyT, id = Id
                 { name = "String#", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
              [ Unboxed ( String "unreachable" ) ] )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
            ( Assign
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "putStrLn", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
             ( Cast
              ( SumT [ Con Tuple [] ] )
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ), Unpack
           ( Con
            ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] )
           [ Meta
            { meta = AnyT, id = Id
             { name = "p", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "toStringInt32", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "p", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
             ( Cast AnyT
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
            ( Assign
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "putStr", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
             ( Cast
              ( SumT [ Con Tuple [] ] )
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "fun", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
        [ Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) )
    ( Match
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ Int32T ] :-> AnyT, id = Id
           { name = "Int32#", moduleName = Artifact
            ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
        [ Unboxed ( Int32 1 ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "Right", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
     [ Bind
      ( Meta
       { meta = AnyT, id = Id
        { name = "let_test/testcases/malgo/TestEither.mlg.#x_9", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) AnyT
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
       ( Assign
        ( Meta
         { meta =
          [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
          ( Assign
           ( Meta
            { meta =
             [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ AnyT ] :->
               ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
               { name = "|>", moduleName = Artifact
                ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = AnyT, id = Id
               { name = "let_test/testcases/malgo/TestEither.mlg.#x_9", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
           ( Cast
            ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
            ( Var
             ( Meta
              { meta =
               [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
           ( Assign
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "fun", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
               [ Meta
                { meta = AnyT, id = Id
                 { name = "x", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                ( Assign
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Assign
                  ( Meta
                   { meta = [ AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta = [ AnyT ] :->
                      ( [ AnyT ] :-> AnyT ), id = Id
                      { name = "addInt32", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                   [ Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "x", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                  ( Cast
                   ( [ AnyT ] :-> AnyT )
                   ( Var
                    ( Meta
                     { meta = [ AnyT ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
                 ( Assign
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ Int32T ] :-> AnyT, id = Id
                       { name = "Int32#", moduleName = Artifact
                        ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                    [ Unboxed ( Int32 1 ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ AnyT ] :-> AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
                    [ Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) )
                ( Assign
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ AnyT ] :-> AnyT, id = Id
                     { name = "Right", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
                  [ Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                 ( Cast AnyT
                  ( Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) } ]
             ( Atom
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "fun", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
            ( Assign
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
             ( Call
              ( Var
               ( Meta
                { meta =
                 [ [ AnyT ] :-> AnyT ] :->
                 ( [ AnyT ] :-> AnyT ), id = Id
                 { name = "andThen", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
             ( Cast
              ( [ AnyT ] :-> AnyT )
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
            ( Call
             ( Var
              ( Meta
               { meta =
                [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
             [ Var
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
            ( Cast AnyT
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) )
         ( Assign
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
              { name = "|>", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
           ( Var
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta = [ AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
          ( Let
           [ LocalDef
            { _variable = Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
             [ Meta
              { meta = AnyT, id = Id
               { name = "y", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
             ( Assign
              ( Meta
               { meta =
                [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
              ( Assign
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
               ( Assign
                ( Meta
                 { meta =
                  [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
                  [ Con Tuple [] ], id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                ( Assign
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Assign
                  ( Meta
                   { meta =
                    [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Assign
                   ( Meta
                    { meta =
                     [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ AnyT ] :->
                       ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                       { name = "|>", moduleName = Artifact
                        ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
                    [ Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "y", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                   ( Cast
                    ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
                    ( Var
                     ( Meta
                      { meta =
                       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta =
                       [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
                    [ Var
                     ( Meta
                      { meta = [ AnyT ] :-> AnyT, id = Id
                       { name = "toStringInt32", moduleName = Artifact
                        ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
                 ( Assign
                  ( Meta
                   { meta =
                    [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta = [ AnyT ] :->
                      ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                      { name = "|>", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
                   [ Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                  ( Cast
                   (
                    [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
                    [ Con Tuple [] ] )
                   ( Var
                    ( Meta
                     { meta =
                      [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
                ( Assign
                 ( Meta
                  { meta = SumT
                   [ Con Tuple [] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta =
                     [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
                     [ Con Tuple [] ], id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
                  [ Var
                   ( Meta
                    { meta = [ AnyT ] :-> SumT
                     [ Con Tuple [] ], id = Id
                     { name = "putStr", moduleName = Artifact
                      ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) ] )
                 ( Cast
                  ( SumT [ Con Tuple [] ] )
                  ( Var
                   ( Meta
                    { meta = SumT
                     [ Con Tuple [] ], id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "cast", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                ( Cast AnyT
                 ( Var
                  ( Meta
                   { meta = SumT
                    [ Con Tuple [] ], id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) )
                ( Assign
                 ( Meta
                  { meta =
                   [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ AnyT ] :->
                     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                     { name = "|>", moduleName = Artifact
                      ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
                  [ Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "cast", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                 ( Cast
                  ( [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT )
                  ( Var
                   ( Meta
                    { meta =
                     [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) )
              ( Assign
               ( Meta
                { meta =
                 [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                 { name = "cast", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
               ( Cast
                ( [ SumT [ Con Tuple [] ] ] :-> AnyT )
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "Right", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) ) )
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta =
                    [ [ SumT [ Con Tuple [] ] ] :-> AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
                 [ Var
                  ( Meta
                   { meta =
                    [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
                    { name = "cast", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                ( Cast AnyT
                 ( Var
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) ) } ]
           ( Atom
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "fun", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
          ( Assign
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta =
               [ [ AnyT ] :-> AnyT ] :->
               ( [ AnyT ] :-> AnyT ), id = Id
               { name = "andThen", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
           ( Cast
            ( [ AnyT ] :-> AnyT )
            ( Var
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
         ( Assign
          ( Meta
           { meta = AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
           [ Var
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
          ( Cast AnyT
           ( Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) )
       ( Assign
        ( Meta
         { meta =
          [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
         ( Assign
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
          ( Assign
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
           ( Assign
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
            ( Assign
             ( Meta
              { meta =
               [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ AnyT ] :->
                 ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                 { name = "|>", moduleName = Artifact
                  ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "let_test/testcases/malgo/TestEither.mlg.#x_9", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
             ( Cast
              ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
              ( Var
               ( Meta
                { meta =
                 [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
            ( Assign
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
             ( Assign
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
              ( Let
               [ LocalDef
                { _variable = Meta
                 { meta = [ AnyT ] :-> AnyT, id = Id
                  { name = "fun", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
                 [ Meta
                  { meta = AnyT, id = Id
                   { name = "_", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
                 ( Assign
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ StringT ] :-> AnyT, id = Id
                       { name = "String#", moduleName = Artifact
                        ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                    [ Unboxed ( String "error" ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ AnyT ] :-> AnyT, id = Id
                       { name = "Left", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
                    [ Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) } ]
               ( Atom
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "fun", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
              ( Assign
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
               ( Call
                ( Var
                 ( Meta
                  { meta =
                   [ [ AnyT ] :-> AnyT ] :->
                   ( [ AnyT ] :-> AnyT ), id = Id
                   { name = "andThen", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
                [ Var
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
               ( Cast
                ( [ AnyT ] :-> AnyT )
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
              ( Call
               ( Var
                ( Meta
                 { meta =
                  [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
               [ Var
                ( Meta
                 { meta = [ AnyT ] :-> AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
              ( Cast AnyT
               ( Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) )
           ( Assign
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
            ( Call
             ( Var
              ( Meta
               { meta = [ AnyT ] :->
                ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                { name = "|>", moduleName = Artifact
                 ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
             [ Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
            ( Cast
             ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
             ( Var
              ( Meta
               { meta =
                [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
          ( Assign
           ( Meta
            { meta = [ AnyT ] :-> AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
           ( Assign
            ( Meta
             { meta = [ AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
            ( Let
             [ LocalDef
              { _variable = Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "fun", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
               [ Meta
                { meta = AnyT, id = Id
                 { name = "x", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                ( Assign
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Assign
                  ( Meta
                   { meta = [ AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta = [ AnyT ] :->
                      ( [ AnyT ] :-> AnyT ), id = Id
                      { name = "addInt32", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                   [ Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "x", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                  ( Cast
                   ( [ AnyT ] :-> AnyT )
                   ( Var
                    ( Meta
                     { meta = [ AnyT ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
                 ( Assign
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ Int32T ] :-> AnyT, id = Id
                       { name = "Int32#", moduleName = Artifact
                        ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                    [ Unboxed ( Int32 1 ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
                  ( Assign
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                   ( Call
                    ( Var
                     ( Meta
                      { meta = [ AnyT ] :-> AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
                    [ Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                   ( Cast AnyT
                    ( Var
                     ( Meta
                      { meta = AnyT, id = Id
                       { name = "d", moduleName = Artifact
                        ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) )
                ( Assign
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ AnyT ] :-> AnyT, id = Id
                     { name = "Right", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
                  [ Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                 ( Cast AnyT
                  ( Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) } ]
             ( Atom
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "fun", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
            ( Assign
             ( Meta
              { meta = [ AnyT ] :-> AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
             ( Call
              ( Var
               ( Meta
                { meta =
                 [ [ AnyT ] :-> AnyT ] :->
                 ( [ AnyT ] :-> AnyT ), id = Id
                 { name = "andThen", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
             ( Cast
              ( [ AnyT ] :-> AnyT )
              ( Var
               ( Meta
                { meta = [ AnyT ] :-> AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
           ( Assign
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
            ( Call
             ( Var
              ( Meta
               { meta =
                [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
             [ Var
              ( Meta
               { meta = [ AnyT ] :-> AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
            ( Cast AnyT
             ( Var
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) )
         ( Assign
          ( Meta
           { meta =
            [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta = [ AnyT ] :->
              ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
              { name = "|>", moduleName = Artifact
               ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
           [ Var
            ( Meta
             { meta = AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
           ( Var
            ( Meta
             { meta =
              [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
        ( Assign
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
         ( Let
          [ LocalDef
           { _variable = Meta
            { meta = [ AnyT ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> SumT
            [ Con Tuple [] ], _object = Fun
            [ Meta
             { meta = AnyT, id = Id
              { name = "left", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
            ( Match
             ( Cast
              ( SumT
               [ Con
                ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ], Con
                ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] ] )
              ( Var
               ( Meta
                { meta = AnyT, id = Id
                 { name = "left", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) )
             [ Unpack
              ( Con
               ( Data "test/testcases/malgo/TestEither.mlg.Left" ) [ AnyT ] )
              [ Meta
               { meta = AnyT, id = Id
                { name = "p", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
              ( Assign
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
               ( Call
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :-> SumT
                   [ Con Tuple [] ], id = Id
                   { name = "putStrLn", moduleName = Artifact
                    ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
                [ Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "p", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
               ( Cast
                ( SumT [ Con Tuple [] ] )
                ( Var
                 ( Meta
                  { meta = SumT
                   [ Con Tuple [] ], id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ), Unpack
              ( Con
               ( Data "test/testcases/malgo/TestEither.mlg.Right" ) [ AnyT ] )
              [ Meta
               { meta = AnyT, id = Id
                { name = "p", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ]
              ( Assign
               ( Meta
                { meta =
                 [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
               ( Assign
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                ( Assign
                 ( Meta
                  { meta =
                   [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Assign
                  ( Meta
                   { meta =
                    [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta = [ AnyT ] :->
                      ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                      { name = "|>", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
                   [ Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "p", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                  ( Cast
                   ( [ [ AnyT ] :-> AnyT ] :-> AnyT )
                   ( Var
                    ( Meta
                     { meta =
                      [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
                 ( Assign
                  ( Meta
                   { meta = AnyT, id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                  ( Call
                   ( Var
                    ( Meta
                     { meta =
                      [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
                   [ Var
                    ( Meta
                     { meta = [ AnyT ] :-> AnyT, id = Id
                      { name = "toStringInt32", moduleName = Artifact
                       ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) ] )
                  ( Cast AnyT
                   ( Var
                    ( Meta
                     { meta = AnyT, id = Id
                      { name = "d", moduleName = Artifact
                       ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
                ( Assign
                 ( Meta
                  { meta =
                   [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                 ( Call
                  ( Var
                   ( Meta
                    { meta = [ AnyT ] :->
                     ( [ [ AnyT ] :-> AnyT ] :-> AnyT ), id = Id
                     { name = "|>", moduleName = Artifact
                      ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) )
                  [ Var
                   ( Meta
                    { meta = AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
                 ( Cast
                  (
                   [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
                   [ Con Tuple [] ] )
                  ( Var
                   ( Meta
                    { meta =
                     [ [ AnyT ] :-> AnyT ] :-> AnyT, id = Id
                     { name = "d", moduleName = Artifact
                      ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) )
               ( Assign
                ( Meta
                 { meta = SumT
                  [ Con Tuple [] ], id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
                ( Call
                 ( Var
                  ( Meta
                   { meta =
                    [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
                    [ Con Tuple [] ], id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
                 [ Var
                  ( Meta
                   { meta = [ AnyT ] :-> SumT
                    [ Con Tuple [] ], id = Id
                    { name = "putStrLn", moduleName = Artifact
                     ( ArtifactPath "runtime/malgo/Prelude.mlg" ), sort = External } } ) ] )
                ( Cast
                 ( SumT [ Con Tuple [] ] )
                 ( Var
                  ( Meta
                   { meta = SumT
                    [ Con Tuple [] ], id = Id
                    { name = "d", moduleName = Artifact
                     ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) ] ) } ]
          ( Atom
           ( Var
            ( Meta
             { meta = [ AnyT ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) )
         ( Assign
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } )
          ( Call
           ( Var
            ( Meta
             { meta =
              [ [ AnyT ] :-> SumT [ Con Tuple [] ] ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) )
           [ Var
            ( Meta
             { meta = [ AnyT ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ] )
          ( Cast
           ( SumT [ Con Tuple [] ] )
           ( Var
            ( Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/TestEither.mlg" ), sort = Temporal } } ) ) ) ) ) ) ) ] ) ) ], extFuns = [] }