Program
 { topVars =
  [
   ( Meta
    { meta = AnyT, id = Id
     { name = "one", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = External } }, AnyT, Assign
    ( Meta
     { meta = AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta =
       [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } }, typ =
        [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
        [ Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "$_", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ]
        ( Assign
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
         ( Call
          ( Var
           ( Meta
            { meta = [ Int32T ] :-> AnyT, id = Id
             { name = "Int32#", moduleName = Artifact
              ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
          [ Unboxed ( Int32 1 ) ] )
         ( Cast AnyT
          ( Var
           ( Meta
            { meta = AnyT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) ) } ]
      ( Atom
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } }, typ = SumT
         [ Con Tuple [] ], _object = Pack
         ( SumT [ Con Tuple [] ] )
         ( Con Tuple [] ) [] } ]
       ( Atom
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = AnyT, id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) )
        [ Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ] )
       ( Cast AnyT
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) ) ) )
    ( Atom
     ( Var
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) ) ], topFuns =
  [
   ( Meta
    { meta = [ AnyT ] :-> AnyT, id = Id
     { name = "id", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "x", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ], [ AnyT ] :-> AnyT, Assign
    ( Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
    ( Let
     [ LocalDef
      { _variable = Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
        { name = "fun", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } }, typ =
       [ SumT [ Con Tuple [] ] ] :-> AnyT, _object = Fun
       [ Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "$_", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ]
       ( Atom
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "x", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) } ]
     ( Atom
      ( Var
       ( Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
         { name = "fun", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) )
    ( Assign
     ( Meta
      { meta = SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
     ( Let
      [ LocalDef
       { _variable = Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "let", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } }, typ = SumT
        [ Con Tuple [] ], _object = Pack
        ( SumT [ Con Tuple [] ] )
        ( Con Tuple [] ) [] } ]
      ( Atom
       ( Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "let", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
      ( Call
       ( Var
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) )
       [ Var
        ( Meta
         { meta = SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ] )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) ) ) ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "eta", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Assign
    ( Meta
     { meta =
      [ SumT [ Con Tuple [] ] ] :-> SumT
      [ Con Tuple [] ], id = Id
      { name = "d", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
    ( Assign
     ( Meta
      { meta =
       [ SumT [ Con Tuple [] ] ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
     ( Assign
      ( Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :->
        ( [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ), id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
      ( Let
       [ LocalDef
        { _variable = Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :->
          ( [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ), id = Id
          { name = "fun", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } }, typ =
         [ SumT [ Con Tuple [] ] ] :->
         ( [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ), _object = Fun
         [ Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "$_", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ]
         ( Let
          [ LocalDef
           { _variable = Meta
            { meta =
             [ SumT [ Con Tuple [] ] ] :-> SumT
             [ Con Tuple [] ], id = Id
             { name = "fun", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } }, typ =
            [ SumT [ Con Tuple [] ] ] :-> SumT
            [ Con Tuple [] ], _object = Fun
            [ Meta
             { meta = SumT
              [ Con Tuple [] ], id = Id
              { name = "$_", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ]
            ( Assign
             ( Meta
              { meta = AnyT, id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
             ( Assign
              ( Meta
               { meta = AnyT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
              ( Assign
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
               ( Call
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "id", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = External } } ) )
                [ Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "one", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = External } } ) ] )
               ( Cast AnyT
                ( Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) )
              ( Assign
               ( Meta
                { meta = AnyT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
               ( Call
                ( Var
                 ( Meta
                  { meta = [ AnyT ] :-> AnyT, id = Id
                   { name = "toStringInt32", moduleName = Artifact
                    ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
                [ Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ] )
               ( Cast AnyT
                ( Var
                 ( Meta
                  { meta = AnyT, id = Id
                   { name = "d", moduleName = Artifact
                    ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) ) )
             ( Assign
              ( Meta
               { meta = SumT
                [ Con Tuple [] ], id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
              ( Call
               ( Var
                ( Meta
                 { meta = [ AnyT ] :-> SumT
                  [ Con Tuple [] ], id = Id
                  { name = "printString", moduleName = Artifact
                   ( ArtifactPath "runtime/malgo/Builtin.mlg" ), sort = External } } ) )
               [ Var
                ( Meta
                 { meta = AnyT, id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ] )
              ( Cast
               ( SumT [ Con Tuple [] ] )
               ( Var
                ( Meta
                 { meta = SumT
                  [ Con Tuple [] ], id = Id
                  { name = "d", moduleName = Artifact
                   ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) ) ) } ]
          ( Atom
           ( Var
            ( Meta
             { meta =
              [ SumT [ Con Tuple [] ] ] :-> SumT
              [ Con Tuple [] ], id = Id
              { name = "fun", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) ) } ]
       ( Atom
        ( Var
         ( Meta
          { meta =
           [ SumT [ Con Tuple [] ] ] :->
           ( [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ), id = Id
           { name = "fun", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
       ( Let
        [ LocalDef
         { _variable = Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "let", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } }, typ = SumT
          [ Con Tuple [] ], _object = Pack
          ( SumT [ Con Tuple [] ] )
          ( Con Tuple [] ) [] } ]
        ( Atom
         ( Var
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "let", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) )
       ( Assign
        ( Meta
         { meta =
          [ SumT [ Con Tuple [] ] ] :-> SumT
          [ Con Tuple [] ], id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } )
        ( Call
         ( Var
          ( Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :->
            ( [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] ), id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) )
         [ Var
          ( Meta
           { meta = SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ] )
        ( Cast
         ( [ SumT [ Con Tuple [] ] ] :-> SumT [ Con Tuple [] ] )
         ( Var
          ( Meta
           { meta =
            [ SumT [ Con Tuple [] ] ] :-> SumT
            [ Con Tuple [] ], id = Id
            { name = "d", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) ) ) )
     ( Atom
      ( Var
       ( Meta
        { meta =
         [ SumT [ Con Tuple [] ] ] :-> SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ) ) )
    ( Call
     ( Var
      ( Meta
       { meta =
        [ SumT [ Con Tuple [] ] ] :-> SumT
        [ Con Tuple [] ], id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) )
     [ Var
      ( Meta
       { meta = SumT
        [ Con Tuple [] ], id = Id
        { name = "eta", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/ZeroArgs.mlg" ), sort = Temporal } } ) ] ) ) ], extFuns = [] }