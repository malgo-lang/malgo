Program
 { topVars = [], topFuns =
  [
   ( Meta
    { meta =
     [ AnyT, AnyT ] :-> AnyT, id = Id
     { name = "Cons_curry", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } }, Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ],
    [ AnyT, AnyT ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/DataDef.mlg.Cons" )
        [ AnyT, AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [], Con
       ( Data "test/testcases/malgo/DataDef.mlg.Cons" )
       [ AnyT, AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/DataDef.mlg.Cons" )
        [ AnyT, AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/DataDef.mlg.Cons" ) [ AnyT, AnyT ] )
      [ Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ), Var
       ( Meta
        { meta = AnyT, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [], Con
         ( Data "test/testcases/malgo/DataDef.mlg.Cons" )
         [ AnyT, AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ Int64T ] :-> AnyT, id = Id
     { name = "Int#", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } },
    [ Meta
     { meta = Int64T, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ], [ Int64T ] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] ], _object = Pack
      ( SumT
       [ Con ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] ] )
      ( Con ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] )
      [ Var
       ( Meta
        { meta = Int64T, id = Id
         { name = "p", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [] :-> AnyT, id = Id
     { name = "Nil", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } }, [], [] :-> AnyT, Let
    [ LocalDef
     { _variable = Meta
      { meta = SumT
       [ Con
        ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/DataDef.mlg.Cons" )
        [ AnyT, AnyT ] ], id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } }, typ = SumT
      [ Con
       ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [], Con
       ( Data "test/testcases/malgo/DataDef.mlg.Cons" )
       [ AnyT, AnyT ] ], _object = Pack
      ( SumT
       [ Con
        ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [], Con
        ( Data "test/testcases/malgo/DataDef.mlg.Cons" )
        [ AnyT, AnyT ] ] )
      ( Con ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [] ) [] } ]
    ( Cast AnyT
     ( Var
      ( Meta
       { meta = SumT
        [ Con
         ( Data "test/testcases/malgo/DataDef.mlg.Nil" ) [], Con
         ( Data "test/testcases/malgo/DataDef.mlg.Cons" )
         [ AnyT, AnyT ] ], id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ AnyT ] :->
     ( [ AnyT ] :-> AnyT ), id = Id
     { name = "Cons", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } },
    [ Meta
     { meta = AnyT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ], [ AnyT ] :->
    ( [ AnyT ] :-> AnyT ), Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> AnyT, id = Id
       { name = "let", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> AnyT, _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "p", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ]
      ( CallDirect
       ( Meta
        { meta =
         [ AnyT, AnyT ] :-> AnyT, id = Id
         { name = "Cons_curry", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } )
       [ Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ), Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "p", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ] ) } ]
    ( Atom
     ( Var
      ( Meta
       { meta = [ AnyT ] :-> AnyT, id = Id
        { name = "let", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) ) ),
   ( Meta
    { meta = [ Int64T ] :-> StringT, id = Id
     { name = "malgo_int64_t_to_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } },
    [ Meta
     { meta = Int64T, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ], [ Int64T ] :-> StringT, RawCall "malgo_int64_t_to_string"
    ( [ Int64T ] :-> StringT )
    [ Var
     ( Meta
      { meta = Int64T, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ] ),
   ( Meta
    { meta = [ StringT ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "malgo_print_string", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } },
    [ Meta
     { meta = StringT, id = Id
      { name = "p", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ], [ StringT ] :-> SumT
    [ Con Tuple [] ], RawCall "malgo_print_string"
    ( [ StringT ] :-> SumT [ Con Tuple [] ] )
    [ Var
     ( Meta
      { meta = StringT, id = Id
       { name = "p", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ] ),
   ( Meta
    { meta =
     [ SumT [ Con Tuple [] ] ] :-> SumT
     [ Con Tuple [] ], id = Id
     { name = "main", moduleName = Artifact
      ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } },
    [ Meta
     { meta = SumT
      [ Con Tuple [] ], id = Id
      { name = "$_", moduleName = Artifact
       ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ],
    [ SumT [ Con Tuple [] ] ] :-> SumT
    [ Con Tuple [] ], Let
    [ LocalDef
     { _variable = Meta
      { meta = [ AnyT ] :-> SumT
       [ Con Tuple [] ], id = Id
       { name = "fun", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } }, typ = [ AnyT ] :-> SumT
      [ Con Tuple [] ], _object = Fun
      [ Meta
       { meta = AnyT, id = Id
        { name = "int#", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ]
      ( Assign
       ( Meta
        { meta = SumT
         [ Con
          ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] ], id = Id
         { name = "scrutinee", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } )
       ( Cast
        ( SumT
         [ Con ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] ] )
        ( Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "int#", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) )
       ( Switch
        ( Var
         ( Meta
          { meta = SumT
           [ Con
            ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] ], id = Id
           { name = "scrutinee", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) )
        [
         ( Data "test/testcases/malgo/DataDef.mlg.Int#", Destruct
          ( Var
           ( Meta
            { meta = SumT
             [ Con
              ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] ], id = Id
             { name = "scrutinee", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) )
          ( Con ( Data "test/testcases/malgo/DataDef.mlg.Int#" ) [ Int64T ] )
          [ Meta
           { meta = Int64T, id = Id
            { name = "p", moduleName = Artifact
             ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ]
          ( Assign
           ( Meta
            { meta = StringT, id = Id
             { name = "d", moduleName = Artifact
              ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } )
           ( Call
            ( Var
             ( Meta
              { meta = [ Int64T ] :-> StringT, id = Id
               { name = "malgo_int64_t_to_string", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } } ) )
            [ Var
             ( Meta
              { meta = Int64T, id = Id
               { name = "p", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ] )
           ( Assign
            ( Meta
             { meta = StringT, id = Id
              { name = "d", moduleName = Artifact
               ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } )
            ( Cast StringT
             ( Var
              ( Meta
               { meta = StringT, id = Id
                { name = "d", moduleName = Artifact
                 ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) )
            ( Assign
             ( Meta
              { meta = SumT
               [ Con Tuple [] ], id = Id
               { name = "d", moduleName = Artifact
                ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } )
             ( Call
              ( Var
               ( Meta
                { meta = [ StringT ] :-> SumT
                 [ Con Tuple [] ], id = Id
                 { name = "malgo_print_string", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } } ) )
              [ Var
               ( Meta
                { meta = StringT, id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ] )
             ( Cast
              ( SumT [ Con Tuple [] ] )
              ( Var
               ( Meta
                { meta = SumT
                 [ Con Tuple [] ], id = Id
                 { name = "d", moduleName = Artifact
                  ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) ) ) ) ) ) ]
        ( Error ( SumT [ Con Tuple [] ] ) ) ) ) } ]
    ( Assign
     ( Meta
      { meta = AnyT, id = Id
       { name = "d", moduleName = Artifact
        ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } )
     ( Call
      ( Var
       ( Meta
        { meta = [ Int64T ] :-> AnyT, id = Id
         { name = "Int#", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = External } } ) )
      [ Unboxed ( Int64 1 ) ] )
     ( Assign
      ( Meta
       { meta = AnyT, id = Id
        { name = "d", moduleName = Artifact
         ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } )
      ( Cast AnyT
       ( Var
        ( Meta
         { meta = AnyT, id = Id
          { name = "d", moduleName = Artifact
           ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) )
      ( Assign
       ( Meta
        { meta = SumT
         [ Con Tuple [] ], id = Id
         { name = "d", moduleName = Artifact
          ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } )
       ( Call
        ( Var
         ( Meta
          { meta = [ AnyT ] :-> SumT
           [ Con Tuple [] ], id = Id
           { name = "fun", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) )
        [ Var
         ( Meta
          { meta = AnyT, id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ] )
       ( Cast
        ( SumT [ Con Tuple [] ] )
        ( Var
         ( Meta
          { meta = SumT
           [ Con Tuple [] ], id = Id
           { name = "d", moduleName = Artifact
            ( ArtifactPath "test/testcases/malgo/DataDef.mlg" ), sort = Temporal } } ) ) ) ) ) ) ) ], extFuns =
  [
   ( "malgo_int64_t_to_string", [ Int64T ] :-> StringT ),
   ( "malgo_print_string", [ StringT ] :-> SumT [ Con Tuple [] ] ) ] }