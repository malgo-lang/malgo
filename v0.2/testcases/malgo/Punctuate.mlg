module Punctuate = {
  module {..} = import Builtin;
  module {..} = import Prelude;

  infixr 6 (<>);
  (<>) : String -> String -> String;
  (<>) = appendString; 

  data SExpr = Symbol String
             | SInt Int32
             | SList (List SExpr);

  show : SExpr -> String;
  show =
    { Symbol str -> "Symbol " <> str
    | SInt int -> "SInt " <> toStringInt32 int
    | SList ss -> "SList [" <> concatString (punctuate ", " (mapList show ss)) <> "]"
    };

  main = {
    -- (x (y (z)))  
    let x = SList [Symbol "x", SList [Symbol "y", SList [Symbol "z"]]];
    putStrLn (show x)
  };
}

-- Expected: SList [Symbol x, SList [Symbol y, SList [Symbol z]]]
