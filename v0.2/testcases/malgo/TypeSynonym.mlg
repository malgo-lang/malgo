module TypeSynonym = {
  module {..} = import Builtin;
  module {..} = import Prelude;

  type MyTuple a = (a, a);

  type MyString = String;

  hello : MyTuple MyString;
  hello = ("hello", "world");

  data T = TCon;
  type S = T;

  idOverS : S -> T;
  idOverS = { x -> x };

  main : { () };
  main = {
    hello |> { (h, w) -> putStr h; putStr " "; putStrLn w }
  };
}
-- Expected: hello world
