module Record = {
  import Builtin;
  import Prelude;

  type Person = { name: String, age: Int32 }
    with {
      person = { name age -> { name: name, age: age } };
      sayHello = { self -> "Hello. My name is ${self.name}" };
      getYearsOld = { years self -> { self | age: self.age + years } }

      -- This version will fail to compile.
      getYearsOld' = { self years -> { self | age: self.age + years } }
--                     ^^^^
-- `self` is a special parameter that can only be used with` with`.
--  If you write `data Person = ~ with ~`, `self` will be typed as `self :: Person` in `with`.
-- `self` can only be used in the last argument of a function literal (immediately before `->`).

      -- This version will compile successfully.
      badGetYearsOld { self -> { years -> { self | age: self.age + years } } }

    }

  personAge    = { { age: age } -> age };
  personAge'   = { p -> age p };
  personAge''  = age
  -- personAge''' = { .age -> age };

  main = {
    let hoge = person age:42 name:"Hoge" -- parse as (person (age:42) (name:"Hoge")), evaluate as (person "Hoge" 42)
    hoge |> sayHello |> puts; -- sayHello is dispatched as Person.sayHello
    hoge |> getYearsOld 10 |> age |> "I'm ${#0} years old." |> puts -- "${#0}" means { x -> "" <> show x <> "" }
    hoge |> Person.getYearsOld 10 |> Person.age |> "I'm ${#0} years old." |> puts
    puts "I'm ${(hoge.getYearsOld 10).age} years old." -- hoge.getYearsOld 10 means Person.getYearsOld 10 hoge
    print_Int32 (personAge {name: "Hoge", age: 42})
  };
}

-- Expected: 42
